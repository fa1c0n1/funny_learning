!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AFTER_JMP	src/contrib/gcc_gvmat64/gvmat64.S	/^#define AFTER_JMP .intel_syntax noprefix$/;"	d
ALLOC	src/contrib/minizip/unzip.c	112;"	d	file:
ALLOC	src/contrib/minizip/zip.c	62;"	d	file:
APPEND_OP	src/examples/gzlog.c	273;"	d	file:
APPEND_STATUS_ADDINZIP	src/contrib/minizip/zip.h	114;"	d
APPEND_STATUS_CREATE	src/contrib/minizip/zip.h	112;"	d
APPEND_STATUS_CREATEAFTER	src/contrib/minizip/zip.h	113;"	d
AR	src/contrib/delphi/zlibd32.mak	/^AR = tlib$/;"	m
AR	src/contrib/pascal/zlibd32.mak	/^AR = tlib$/;"	m
ARCH	src/nintendods/Makefile	/^ARCH	:=	-mthumb -mthumb-interwork$/;"	m
AREGTYPE	src/contrib/untgz/untgz.c	43;"	d	file:
ASFLAGS	src/nintendods/Makefile	/^ASFLAGS	:=	$(ARCH) -march=armv5te -mtune=arm946e-s$/;"	m
Add	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        public abstract void Add(byte[] data, int offset, int count);$/;"	m	class:DotZLib.CodecBase	access:public	signature:(byte[] data, int offset, int count)
Add	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        public void Add(byte[] data)$/;"	m	class:DotZLib.CodecBase	access:public	signature:(byte[] data)
Add	src/contrib/dotzlib/DotZLib/Deflater.cs	/^        public override void Add(byte[] data, int offset, int count)$/;"	m	class:DotZLib.Deflater	access:public	signature:(byte[] data, int offset, int count)
Add	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        void Add(byte[] data);$/;"	m	interface:DotZLib.Codec	access:public	signature:(byte[] data)
Add	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        void Add(byte[] data, int offset, int count);$/;"	m	interface:DotZLib.Codec	access:public	signature:(byte[] data, int offset, int count)
Add	src/contrib/dotzlib/DotZLib/Inflater.cs	/^        public override void Add(byte[] data, int offset, int count)$/;"	m	class:DotZLib.Inflater	access:public	signature:(byte[] data, int offset, int count)
AdlerChecksum	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public AdlerChecksum() : base() {}$/;"	m	class:DotZLib.AdlerChecksum	access:public	signature:()
AdlerChecksum	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public AdlerChecksum(uint initialValue) : base(initialValue) {}$/;"	m	class:DotZLib.AdlerChecksum	access:public	signature:(uint initialValue)
AdlerChecksum	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^    public sealed class AdlerChecksum : ChecksumGeneratorBase$/;"	c	namespace:DotZLib	inherits:ChecksumGeneratorBase	access:public
Adler_Data	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void Adler_Data()$/;"	m	class:DotZLibTests.ChecksumTests	access:public	signature:()
Adler_Null	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void Adler_Null()$/;"	m	class:DotZLibTests.ChecksumTests	access:public	signature:()
Assert	src/zutil.h	223;"	d
Assert	src/zutil.h	230;"	d
Assert	zutil.h	223;"	d
Assert	zutil.h	230;"	d
BAD	src/contrib/infback9/inflate9.h	/^    BAD         \/* got a data error -- remain here until reset *\/$/;"	e	enum:__anon14
BAD	src/inflate.h	/^    BAD,        \/* got a data error -- remain here until reset *\/$/;"	e	enum:__anon19
BAIL	src/examples/gzlog.c	251;"	d	file:
BAIL	src/examples/gzlog.c	254;"	d	file:
BASE	src/adler32.c	14;"	d	file:
BEFORE_JMP	src/contrib/gcc_gvmat64/gvmat64.S	/^#define BEFORE_JMP .att_syntax$/;"	d
BIGBUFSIZE	src/contrib/iostream3/zfstream.cc	15;"	d	file:
BINFILES	src/nintendods/Makefile	/^BINFILES	:=	$(foreach dir,$(DATA),$(notdir $(wildcard $(dir)\/*.*)))$/;"	m
BITS	src/contrib/infback9/infback9.c	157;"	d	file:
BITS	src/infback.c	190;"	d	file:
BITS	src/inflate.c	506;"	d	file:
BLKTYPE	src/contrib/untgz/untgz.c	47;"	d	file:
BLOCKSIZE	src/contrib/untgz/untgz.c	65;"	d	file:
BL_CODES	src/deflate.h	42;"	d
BODY	src/examples/gzlog.c	337;"	d	file:
BUFLEN	src/test/minigzip.c	135;"	d	file:
BUFREADCOMMENT	src/contrib/minizip/unzip.c	405;"	d	file:
BUFREADCOMMENT	src/contrib/minizip/zip.c	472;"	d	file:
BUILD	src/nintendods/Makefile	/^BUILD		:=	build$/;"	m
BUILDFIXED	src/inflate.c	90;"	d	file:
BUSY_STATE	src/deflate.h	59;"	d
BYFOUR	src/crc32.c	37;"	d	file:
BYTEBITS	src/contrib/infback9/infback9.c	168;"	d	file:
BYTEBITS	src/infback.c	201;"	d	file:
BYTEBITS	src/inflate.c	517;"	d	file:
BeginCountPerfCounter	src/contrib/testzlib/testzlib.c	/^void BeginCountPerfCounter(LARGE_INTEGER * pbeginTime64,BOOL fComputeTimeQueryPerf)$/;"	f	signature:(LARGE_INTEGER * pbeginTime64,BOOL fComputeTimeQueryPerf)
BeginCountRdtsc	src/contrib/testzlib/testzlib.c	/^void BeginCountRdtsc(LARGE_INTEGER * pbeginTime64)$/;"	f	signature:(LARGE_INTEGER * pbeginTime64)
Best	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        Best = 9,$/;"	e	enum:DotZLib.CompressLevel	file:
Block	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        None,  Partial,  Sync,  Full,  Finish,  Block$/;"	e	enum:DotZLib.FlushTypes	file:
BlockPutGet	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void BlockPutGet()$/;"	m	class:DotZLibTests.CircBufferTests	access:public	signature:()
Buf_size	src/deflate.h	51;"	d
Byte	src/zconf.h	/^typedef unsigned char  Byte;  \/* 8 bits *\/$/;"	t
Byte	src/zconf.h	128;"	d
Byte	zconf.h	/^typedef unsigned char  Byte;  \/* 8 bits *\/$/;"	t
Byte	zconf.h	128;"	d
Bytef	src/zconf.h	/^   typedef Byte  FAR Bytef;$/;"	t
Bytef	src/zconf.h	129;"	d
Bytef	src/zconf.h	375;"	d
Bytef	zconf.h	/^   typedef Byte  FAR Bytef;$/;"	t
Bytef	zconf.h	129;"	d
Bytef	zconf.h	375;"	d
CASESENSITIVITY	src/contrib/minizip/miniunz.c	60;"	d	file:
CASESENSITIVITYDEFAULTVALUE	src/contrib/minizip/unzip.c	372;"	d	file:
CASESENSITIVITYDEFAULTVALUE	src/contrib/minizip/unzip.c	374;"	d	file:
CASESENSITIVITYDEFAULT_NO	src/contrib/minizip/unzip.c	98;"	d	file:
CC	src/contrib/delphi/zlibd32.mak	/^CC = bcc32$/;"	m
CC	src/contrib/minizip/Makefile	/^CC=cc$/;"	m
CC	src/contrib/pascal/zlibd32.mak	/^CC = bcc32$/;"	m
CC	src/contrib/untgz/Makefile	/^CC=cc$/;"	m
CC	src/watcom/watcom_f.mak	/^CC       = wcc386$/;"	m
CC	src/watcom/watcom_l.mak	/^CC       = wcc$/;"	m
CCheck	src/contrib/delphi/ZLib.pas	/^function CCheck(code: Integer): Integer;$/;"	f
CDataAvail	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void CDataAvail(byte[] data, int startIndex, int count)$/;"	m	class:DotZLibTests.DeflateInflateTests	access:public	signature:(byte[] data, int startIndex, int count)
CENTRALHEADERMAGIC	src/contrib/minizip/zip.c	104;"	d	file:
CFILES	src/nintendods/Makefile	/^CFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)\/*.c)))$/;"	m
CFLAGS	src/contrib/delphi/zlibd32.mak	/^CFLAGS = -a -d -k- -O2 $(LOC)$/;"	m
CFLAGS	src/contrib/minizip/Makefile	/^CFLAGS=-O -I..\/..$/;"	m
CFLAGS	src/contrib/pascal/zlibd32.mak	/^CFLAGS = -a -d -k- -O2 $(LOC)$/;"	m
CFLAGS	src/contrib/puff/Makefile	/^CFLAGS=-O$/;"	m
CFLAGS	src/contrib/untgz/Makefile	/^CFLAGS=-g$/;"	m
CFLAGS	src/nintendods/Makefile	/^CFLAGS	:=	-Wall -O2\\$/;"	m
CFLAGS	src/watcom/watcom_f.mak	/^CFLAGS   = -zq -mf -3r -fp3 -s -bt=dos -oilrtfm -fr=nul -wx$/;"	m
CFLAGS	src/watcom/watcom_l.mak	/^CFLAGS   = -zq -ml -s -bt=dos -oilrtfm -fr=nul -wx$/;"	m
CHECK	src/inflate.h	/^    CHECK,      \/* i: waiting for 32-bit check value *\/$/;"	e	enum:__anon19
CHECK_ERR	src/contrib/pascal/example.pas	/^procedure CHECK_ERR(err: Integer; msg: String);$/;"	p
CHECK_ERR	src/test/example.c	22;"	d	file:
CHECK_MMX	src/contrib/inflate86/inffast.S	/^#define CHECK_MMX    1$/;"	d
CHOP	src/adler32.c	29;"	d	file:
CHRTYPE	src/contrib/untgz/untgz.c	46;"	d	file:
CHUNK	src/contrib/blast/blast.c	414;"	d	file:
CHUNK	src/examples/gzappend.c	89;"	d	file:
CHUNK	src/examples/gzjoin.c	75;"	d	file:
CHUNK	src/examples/zpipe.c	28;"	d	file:
CHUNK	src/examples/zran.c	64;"	d	file:
CLEAR_HASH	src/deflate.c	196;"	d	file:
CODELENS	src/inflate.h	/^        CODELENS,   \/* i: waiting for length\/lit and distance code lengths *\/$/;"	e	enum:__anon19
CODES	src/contrib/infback9/inftree9.h	/^    CODES,$/;"	e	enum:__anon13
CODES	src/inftrees.h	/^    CODES,$/;"	e	enum:__anon17
COMM	src/contrib/masmx64/gvmat64.asm	/^COMM    good_match:DWORD$/;"	l
COMM	src/contrib/masmx64/gvmat64.asm	/^COMM    match_start:DWORD$/;"	l
COMM	src/contrib/masmx64/gvmat64.asm	/^COMM    max_chain_length:DWORD$/;"	l
COMM	src/contrib/masmx64/gvmat64.asm	/^COMM    nice_match:DWORD$/;"	l
COMM	src/contrib/masmx64/gvmat64.asm	/^COMM    prev:WORD:08000H$/;"	l
COMM	src/contrib/masmx64/gvmat64.asm	/^COMM    prev_length:DWORD ; PrevLen$/;"	l
COMM	src/contrib/masmx64/gvmat64.asm	/^COMM    strstart:DWORD$/;"	l
COMM	src/contrib/masmx64/gvmat64.asm	/^COMM    window:BYTE:010040H$/;"	l
COMM	src/contrib/masmx64/gvmat64.asm	/^COMM    window_size:DWORD$/;"	l
COMMENT	src/inflate.h	/^    COMMENT,    \/* i: waiting for end of comment (gzip) *\/$/;"	e	enum:__anon19
COMMENT_STATE	src/deflate.h	57;"	d
COMPRESS_OP	src/examples/gzlog.c	274;"	d	file:
CONTTYPE	src/contrib/untgz/untgz.c	50;"	d	file:
COPY	src/gzguts.h	157;"	d
COPY	src/inflate.h	/^        COPY,       \/* i\/o: waiting for input or output to copy stored block *\/$/;"	e	enum:__anon19
COPY_	src/inflate.h	/^        COPY_,      \/* i\/o: same as COPY below, but only first time in *\/$/;"	e	enum:__anon19
CPPFILES	src/nintendods/Makefile	/^CPPFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)\/*.cpp)))$/;"	m
CRC2	src/inflate.c	441;"	d	file:
CRC32	src/contrib/minizip/crypt.h	30;"	d
CRC32Checksum	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public CRC32Checksum() : base() {}$/;"	m	class:DotZLib.CRC32Checksum	access:public	signature:()
CRC32Checksum	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public CRC32Checksum(uint initialValue) : base(initialValue) {}$/;"	m	class:DotZLib.CRC32Checksum	access:public	signature:(uint initialValue)
CRC32Checksum	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^    public sealed class CRC32Checksum : ChecksumGeneratorBase$/;"	c	namespace:DotZLib	inherits:ChecksumGeneratorBase	access:public
CRC32_Data	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void CRC32_Data()$/;"	m	class:DotZLibTests.ChecksumTests	access:public	signature:()
CRC32_Null	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void CRC32_Null()$/;"	m	class:DotZLibTests.ChecksumTests	access:public	signature:()
CRC4	src/inflate.c	448;"	d	file:
CRC_LOCALHEADER_OFFSET	src/contrib/minizip/zip.c	110;"	d	file:
CXXFLAGS	src/nintendods/Makefile	/^CXXFLAGS	:= $(CFLAGS) -fno-rtti -fno-exceptions$/;"	m
C_SOURCE	src/watcom/watcom_f.mak	/^C_SOURCE =  adler32.c  compress.c crc32.c   deflate.c    &$/;"	m
C_SOURCE	src/watcom/watcom_l.mak	/^C_SOURCE =  adler32.c  compress.c crc32.c   deflate.c    &$/;"	m
CanRead	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override bool CanRead$/;"	p	class:DotZLib.GZipStream	access:public
CanSeek	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override bool CanSeek$/;"	p	class:DotZLib.GZipStream	access:public
CanWrite	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override bool CanWrite$/;"	p	class:DotZLib.GZipStream	access:public
Check16	src/contrib/amd64/amd64-match.S	/^Check16:        testw   $0xFFFF, %ax$/;"	l
Checksum	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        public uint Checksum { get { return _checksum; } }$/;"	p	class:DotZLib.CodecBase	access:public
Checksum	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        uint Checksum { get; }$/;"	p	interface:DotZLib.Codec	access:public
ChecksumGenerator	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^    public interface ChecksumGenerator$/;"	i	namespace:DotZLib	access:public
ChecksumGeneratorBase	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public ChecksumGeneratorBase()$/;"	m	class:DotZLib.ChecksumGeneratorBase	access:public	signature:()
ChecksumGeneratorBase	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public ChecksumGeneratorBase(uint initialValue)$/;"	m	class:DotZLib.ChecksumGeneratorBase	access:public	signature:(uint initialValue)
ChecksumGeneratorBase	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^    public abstract class ChecksumGeneratorBase : ChecksumGenerator$/;"	c	namespace:DotZLib	inherits:ChecksumGenerator	access:public
ChecksumTests	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^    public class ChecksumTests$/;"	c	namespace:DotZLibTests	access:public
CircBufferTests	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^    public class CircBufferTests$/;"	c	namespace:DotZLibTests	access:public
CircularBuffer	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^	internal class CircularBuffer$/;"	c	namespace:DotZLib
CircularBuffer	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        public CircularBuffer(int capacity)$/;"	m	class:DotZLib.CircularBuffer	access:public	signature:(int capacity)
CleanUp	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        private void CleanUp(bool isDisposing)$/;"	m	class:DotZLib.CodecBase	file:	access:private	signature:(bool isDisposing)
CleanUp	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        protected abstract void CleanUp();$/;"	m	class:DotZLib.CodecBase	access:protected	signature:()
CleanUp	src/contrib/dotzlib/DotZLib/Deflater.cs	/^        protected override void CleanUp() { deflateEnd(ref _ztream); }$/;"	m	class:DotZLib.Deflater	access:protected	signature:()
CleanUp	src/contrib/dotzlib/DotZLib/Inflater.cs	/^        protected override void CleanUp() { inflateEnd(ref _ztream); }$/;"	m	class:DotZLib.Inflater	access:protected	signature:()
Code	src/deflate.h	77;"	d
Codec	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^    public interface Codec$/;"	i	namespace:DotZLib	access:public
CodecBase	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^		public CodecBase()$/;"	m	class:DotZLib.CodecBase	access:public	signature:()
CodecBase	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^	public abstract class CodecBase : Codec, IDisposable$/;"	c	namespace:DotZLib	inherits:Codec,IDisposable	access:public
CompressBuf	src/contrib/delphi/ZLib.pas	/^procedure CompressBuf(const InBuf: Pointer; InBytes: Integer;$/;"	p
CompressLevel	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^    public enum CompressLevel : int$/;"	g	namespace:DotZLib	access:public
Create	src/contrib/delphi/ZLib.pas	/^    constructor Create(CompressionLevel: TCompressionLevel; Dest: TStream);$/;"	p
Create	src/contrib/delphi/ZLib.pas	/^    constructor Create(Source: TStream);$/;"	p
Create	src/contrib/delphi/ZLib.pas	/^    constructor Create(Strm: TStream);$/;"	p
DATA	src/nintendods/Makefile	/^DATA		:=	data$/;"	m
DCheck	src/contrib/delphi/ZLib.pas	/^function DCheck(code: Integer): Integer;$/;"	f
DDataAvail	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        private void DDataAvail(byte[] data, int startIndex, int count)$/;"	m	class:DotZLibTests.DeflateInflateTests	file:	access:private	signature:(byte[] data, int startIndex, int count)
DEFLATE_H	src/deflate.h	14;"	d
DEF_MEM_LEVEL	src/contrib/minizip/zip.c	93;"	d	file:
DEF_MEM_LEVEL	src/contrib/minizip/zip.c	95;"	d	file:
DEF_MEM_LEVEL	src/contrib/minizip/zip.h	81;"	d
DEF_MEM_LEVEL	src/contrib/minizip/zip.h	83;"	d
DEF_MEM_LEVEL	src/gzguts.h	140;"	d
DEF_MEM_LEVEL	src/gzguts.h	142;"	d
DEF_MEM_LEVEL	src/zutil.h	64;"	d
DEF_MEM_LEVEL	src/zutil.h	66;"	d
DEF_MEM_LEVEL	zutil.h	64;"	d
DEF_MEM_LEVEL	zutil.h	66;"	d
DEF_WBITS	src/zutil.h	59;"	d
DEF_WBITS	zutil.h	59;"	d
DEPENDS	src/nintendods/Makefile	/^DEPENDS	:=	$(OFILES:.o=.d)$/;"	m
DEPSDIR	src/nintendods/Makefile	/^export DEPSDIR	:=	$(CURDIR)\/$(BUILD)$/;"	m
DICT	src/examples/gzlog.c	269;"	d	file:
DICT	src/inflate.h	/^    DICT,       \/* waiting for inflateSetDictionary() call *\/$/;"	e	enum:__anon19
DICTID	src/inflate.h	/^    DICTID,     \/* i: waiting for dictionary check value *\/$/;"	e	enum:__anon19
DIRTYPE	src/contrib/untgz/untgz.c	48;"	d	file:
DIST	src/inflate.h	/^            DIST,       \/* i: waiting for distance code *\/$/;"	e	enum:__anon19
DISTEXT	src/inflate.h	/^            DISTEXT,    \/* i: waiting for distance extra bits *\/$/;"	e	enum:__anon19
DISTS	src/contrib/infback9/inftree9.h	/^    DISTS$/;"	e	enum:__anon13
DISTS	src/inftrees.h	/^    DISTS$/;"	e	enum:__anon17
DIST_CODE_LEN	src/trees.c	81;"	d	file:
DO1	src/adler32.c	18;"	d	file:
DO1	src/crc32.c	200;"	d	file:
DO16	src/adler32.c	22;"	d	file:
DO2	src/adler32.c	19;"	d	file:
DO4	src/adler32.c	20;"	d	file:
DO8	src/adler32.c	21;"	d	file:
DO8	src/crc32.c	201;"	d	file:
DOBIG32	src/crc32.c	284;"	d	file:
DOBIG4	src/crc32.c	281;"	d	file:
DOLIT32	src/crc32.c	244;"	d	file:
DOLIT4	src/crc32.c	241;"	d	file:
DONE	src/contrib/infback9/inflate9.h	/^    DONE,       \/* finished check, done -- remain here until reset *\/$/;"	e	enum:__anon14
DONE	src/inflate.h	/^    DONE,       \/* finished check, done -- remain here until reset *\/$/;"	e	enum:__anon19
DONT_USE_MMX	src/contrib/inflate86/inffast.S	/^#define DONT_USE_MMX 3$/;"	d
DO_USE_MMX	src/contrib/inflate86/inffast.S	/^#define DO_USE_MMX   2$/;"	d
DROPBITS	src/contrib/infback9/infback9.c	161;"	d	file:
DROPBITS	src/infback.c	194;"	d	file:
DROPBITS	src/inflate.c	510;"	d	file:
DSIZE	src/examples/gzappend.c	90;"	d	file:
DYNAMIC_CRC_TABLE	src/crc32.c	27;"	d	file:
DYN_TREES	src/zutil.h	72;"	d
DYN_TREES	zutil.h	72;"	d
D_CODES	src/deflate.h	39;"	d
Dad	src/deflate.h	78;"	d
DataAvailable	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        public event DataAvailableHandler DataAvailable;$/;"	E	class:DotZLib.CodecBase	access:public
DataAvailable	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        event DataAvailableHandler DataAvailable;$/;"	E	interface:DotZLib.Codec	access:public
DataAvailableHandler	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^    public delegate void DataAvailableHandler(byte[] data, int startIndex, int count);$/;"	m	namespace:DotZLib	access:public	signature:(byte[] data, int startIndex, int count)
DecompressBuf	src/contrib/delphi/ZLib.pas	/^procedure DecompressBuf(const InBuf: Pointer; InBytes: Integer;$/;"	p
DecompressToUserBuf	src/contrib/delphi/ZLib.pas	/^procedure DecompressToUserBuf(const InBuf: Pointer; InBytes: Integer;$/;"	p
Default	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        Default = -1,$/;"	e	enum:DotZLib.CompressLevel	file:
DeflateInflateTests	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^    public class DeflateInflateTests$/;"	c	namespace:DotZLibTests	access:public
Deflate_Compress	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void Deflate_Compress()$/;"	m	class:DotZLibTests.DeflateInflateTests	access:public	signature:()
Deflate_Init	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void Deflate_Init()$/;"	m	class:DotZLibTests.DeflateInflateTests	access:public	signature:()
Deflater	src/contrib/dotzlib/DotZLib/Deflater.cs	/^		public Deflater(CompressLevel level) : base()$/;"	m	class:DotZLib.Deflater	access:public	signature:(CompressLevel level)
Deflater	src/contrib/dotzlib/DotZLib/Deflater.cs	/^	public sealed class Deflater : CodecBase$/;"	c	namespace:DotZLib	inherits:CodecBase	access:public
Destroy	src/contrib/delphi/ZLib.pas	/^    destructor Destroy; override;$/;"	p
Display64BitsSize	src/contrib/minizip/miniunz.c	/^void Display64BitsSize(ZPOS64_T n, int size_char)$/;"	f	signature:(ZPOS64_T n, int size_char)
Dispose	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        public void Dispose()$/;"	m	class:DotZLib.CodecBase	access:public	signature:()
Dispose	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public void Dispose()$/;"	m	class:DotZLib.GZipStream	access:public	signature:()
DotZLib	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^namespace DotZLib$/;"	n
DotZLib	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^namespace DotZLib$/;"	n
DotZLib	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^namespace DotZLib$/;"	n
DotZLib	src/contrib/dotzlib/DotZLib/Deflater.cs	/^namespace DotZLib$/;"	n
DotZLib	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^namespace DotZLib$/;"	n
DotZLib	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^namespace DotZLib$/;"	n
DotZLib	src/contrib/dotzlib/DotZLib/Inflater.cs	/^namespace DotZLib$/;"	n
DotZLib.AdlerChecksum	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^    public sealed class AdlerChecksum : ChecksumGeneratorBase$/;"	c	namespace:DotZLib	inherits:ChecksumGeneratorBase	access:public
DotZLib.AdlerChecksum.AdlerChecksum	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public AdlerChecksum() : base() {}$/;"	m	class:DotZLib.AdlerChecksum	access:public	signature:()
DotZLib.AdlerChecksum.AdlerChecksum	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public AdlerChecksum(uint initialValue) : base(initialValue) {}$/;"	m	class:DotZLib.AdlerChecksum	access:public	signature:(uint initialValue)
DotZLib.AdlerChecksum.Update	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public override void Update(byte[] data, int offset, int count)$/;"	m	class:DotZLib.AdlerChecksum	access:public	signature:(byte[] data, int offset, int count)
DotZLib.AdlerChecksum.adler32	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        private static extern uint adler32(uint adler, int data, uint length);$/;"	m	class:DotZLib.AdlerChecksum	file:	access:private	signature:(uint adler, int data, uint length)
DotZLib.CRC32Checksum	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^    public sealed class CRC32Checksum : ChecksumGeneratorBase$/;"	c	namespace:DotZLib	inherits:ChecksumGeneratorBase	access:public
DotZLib.CRC32Checksum.CRC32Checksum	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public CRC32Checksum() : base() {}$/;"	m	class:DotZLib.CRC32Checksum	access:public	signature:()
DotZLib.CRC32Checksum.CRC32Checksum	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public CRC32Checksum(uint initialValue) : base(initialValue) {}$/;"	m	class:DotZLib.CRC32Checksum	access:public	signature:(uint initialValue)
DotZLib.CRC32Checksum.Update	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public override void Update(byte[] data, int offset, int count)$/;"	m	class:DotZLib.CRC32Checksum	access:public	signature:(byte[] data, int offset, int count)
DotZLib.CRC32Checksum.crc32	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        private static extern uint crc32(uint crc, int data, uint length);$/;"	m	class:DotZLib.CRC32Checksum	file:	access:private	signature:(uint crc, int data, uint length)
DotZLib.ChecksumGenerator	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^    public interface ChecksumGenerator$/;"	i	namespace:DotZLib	access:public
DotZLib.ChecksumGenerator.Reset	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        void Reset();$/;"	m	interface:DotZLib.ChecksumGenerator	access:public	signature:()
DotZLib.ChecksumGenerator.Update	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        void Update(byte[] data);$/;"	m	interface:DotZLib.ChecksumGenerator	access:public	signature:(byte[] data)
DotZLib.ChecksumGenerator.Update	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        void Update(byte[] data, int offset, int count);$/;"	m	interface:DotZLib.ChecksumGenerator	access:public	signature:(byte[] data, int offset, int count)
DotZLib.ChecksumGenerator.Update	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        void Update(string data);$/;"	m	interface:DotZLib.ChecksumGenerator	access:public	signature:(string data)
DotZLib.ChecksumGenerator.Update	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        void Update(string data, Encoding encoding);$/;"	m	interface:DotZLib.ChecksumGenerator	access:public	signature:(string data, Encoding encoding)
DotZLib.ChecksumGenerator.Value	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        uint Value { get; }$/;"	p	interface:DotZLib.ChecksumGenerator	access:public
DotZLib.ChecksumGeneratorBase	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^    public abstract class ChecksumGeneratorBase : ChecksumGenerator$/;"	c	namespace:DotZLib	inherits:ChecksumGenerator	access:public
DotZLib.ChecksumGeneratorBase.ChecksumGeneratorBase	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public ChecksumGeneratorBase()$/;"	m	class:DotZLib.ChecksumGeneratorBase	access:public	signature:()
DotZLib.ChecksumGeneratorBase.ChecksumGeneratorBase	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public ChecksumGeneratorBase(uint initialValue)$/;"	m	class:DotZLib.ChecksumGeneratorBase	access:public	signature:(uint initialValue)
DotZLib.ChecksumGeneratorBase.Reset	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public void Reset() { _current = 0; }$/;"	m	class:DotZLib.ChecksumGeneratorBase	access:public	signature:()
DotZLib.ChecksumGeneratorBase.Update	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public abstract void Update(byte[] data, int offset, int count);$/;"	m	class:DotZLib.ChecksumGeneratorBase	access:public	signature:(byte[] data, int offset, int count)
DotZLib.ChecksumGeneratorBase.Update	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public void Update(byte[] data)$/;"	m	class:DotZLib.ChecksumGeneratorBase	access:public	signature:(byte[] data)
DotZLib.ChecksumGeneratorBase.Update	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public void Update(string data)$/;"	m	class:DotZLib.ChecksumGeneratorBase	access:public	signature:(string data)
DotZLib.ChecksumGeneratorBase.Update	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public void Update(string data, Encoding encoding)$/;"	m	class:DotZLib.ChecksumGeneratorBase	access:public	signature:(string data, Encoding encoding)
DotZLib.ChecksumGeneratorBase.Value	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public uint Value { get { return _current; } }$/;"	p	class:DotZLib.ChecksumGeneratorBase	access:public
DotZLib.ChecksumGeneratorBase._current	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        protected uint _current;$/;"	f	class:DotZLib.ChecksumGeneratorBase	access:protected
DotZLib.CircularBuffer	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^	internal class CircularBuffer$/;"	c	namespace:DotZLib
DotZLib.CircularBuffer.CircularBuffer	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        public CircularBuffer(int capacity)$/;"	m	class:DotZLib.CircularBuffer	access:public	signature:(int capacity)
DotZLib.CircularBuffer.Get	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        public int Get()$/;"	m	class:DotZLib.CircularBuffer	access:public	signature:()
DotZLib.CircularBuffer.Get	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        public int Get(byte[] destination, int offset, int count)$/;"	m	class:DotZLib.CircularBuffer	access:public	signature:(byte[] destination, int offset, int count)
DotZLib.CircularBuffer.Put	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        public bool Put(byte b)$/;"	m	class:DotZLib.CircularBuffer	access:public	signature:(byte b)
DotZLib.CircularBuffer.Put	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        public int Put(byte[] source, int offset, int count)$/;"	m	class:DotZLib.CircularBuffer	access:public	signature:(byte[] source, int offset, int count)
DotZLib.CircularBuffer.Size	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        public int Size { get { return _size; } }$/;"	p	class:DotZLib.CircularBuffer	access:public
DotZLib.CircularBuffer._buffer	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        private byte[] _buffer;$/;"	f	class:DotZLib.CircularBuffer	file:	access:private
DotZLib.CircularBuffer._capacity	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        private int _capacity;$/;"	f	class:DotZLib.CircularBuffer	file:	access:private
DotZLib.CircularBuffer._head	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        private int _head;$/;"	f	class:DotZLib.CircularBuffer	file:	access:private
DotZLib.CircularBuffer._size	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        private int _size;$/;"	f	class:DotZLib.CircularBuffer	file:	access:private
DotZLib.CircularBuffer._tail	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        private int _tail;$/;"	f	class:DotZLib.CircularBuffer	file:	access:private
DotZLib.Codec	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^    public interface Codec$/;"	i	namespace:DotZLib	access:public
DotZLib.Codec.Add	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        void Add(byte[] data);$/;"	m	interface:DotZLib.Codec	access:public	signature:(byte[] data)
DotZLib.Codec.Add	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        void Add(byte[] data, int offset, int count);$/;"	m	interface:DotZLib.Codec	access:public	signature:(byte[] data, int offset, int count)
DotZLib.Codec.Checksum	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        uint Checksum { get; }$/;"	p	interface:DotZLib.Codec	access:public
DotZLib.Codec.DataAvailable	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        event DataAvailableHandler DataAvailable;$/;"	E	interface:DotZLib.Codec	access:public
DotZLib.Codec.Finish	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        void Finish();$/;"	m	interface:DotZLib.Codec	access:public	signature:()
DotZLib.CodecBase	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^	public abstract class CodecBase : Codec, IDisposable$/;"	c	namespace:DotZLib	inherits:Codec,IDisposable	access:public
DotZLib.CodecBase.Add	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        public abstract void Add(byte[] data, int offset, int count);$/;"	m	class:DotZLib.CodecBase	access:public	signature:(byte[] data, int offset, int count)
DotZLib.CodecBase.Add	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        public void Add(byte[] data)$/;"	m	class:DotZLib.CodecBase	access:public	signature:(byte[] data)
DotZLib.CodecBase.Checksum	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        public uint Checksum { get { return _checksum; } }$/;"	p	class:DotZLib.CodecBase	access:public
DotZLib.CodecBase.CleanUp	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        private void CleanUp(bool isDisposing)$/;"	m	class:DotZLib.CodecBase	file:	access:private	signature:(bool isDisposing)
DotZLib.CodecBase.CleanUp	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        protected abstract void CleanUp();$/;"	m	class:DotZLib.CodecBase	access:protected	signature:()
DotZLib.CodecBase.CodecBase	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^		public CodecBase()$/;"	m	class:DotZLib.CodecBase	access:public	signature:()
DotZLib.CodecBase.DataAvailable	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        public event DataAvailableHandler DataAvailable;$/;"	E	class:DotZLib.CodecBase	access:public
DotZLib.CodecBase.Dispose	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        public void Dispose()$/;"	m	class:DotZLib.CodecBase	access:public	signature:()
DotZLib.CodecBase.Finish	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        public abstract void Finish();$/;"	m	class:DotZLib.CodecBase	access:public	signature:()
DotZLib.CodecBase.OnDataAvailable	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        protected void OnDataAvailable()$/;"	m	class:DotZLib.CodecBase	access:protected	signature:()
DotZLib.CodecBase._checksum	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        private uint _checksum = 0;$/;"	f	class:DotZLib.CodecBase	file:	access:private
DotZLib.CodecBase._hInput	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        private GCHandle _hInput;$/;"	f	class:DotZLib.CodecBase	file:	access:private
DotZLib.CodecBase._hOutput	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        private GCHandle _hOutput;$/;"	f	class:DotZLib.CodecBase	file:	access:private
DotZLib.CodecBase._inBuffer	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        private byte[] _inBuffer = new byte[kBufferSize];$/;"	f	class:DotZLib.CodecBase	file:	access:private
DotZLib.CodecBase._isDisposed	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        protected bool _isDisposed = false;$/;"	f	class:DotZLib.CodecBase	access:protected
DotZLib.CodecBase._outBuffer	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        private byte[] _outBuffer = new byte[kBufferSize];$/;"	f	class:DotZLib.CodecBase	file:	access:private
DotZLib.CodecBase._ztream	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        internal ZStream _ztream = new ZStream();$/;"	f	class:DotZLib.CodecBase	file:	access:private
DotZLib.CodecBase.copyInput	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        protected void copyInput(byte[] data, int startIndex, int count)$/;"	m	class:DotZLib.CodecBase	access:protected	signature:(byte[] data, int startIndex, int count)
DotZLib.CodecBase.kBufferSize	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        protected const int kBufferSize = 16384;$/;"	f	class:DotZLib.CodecBase	access:protected
DotZLib.CodecBase.resetOutput	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        protected void resetOutput()$/;"	m	class:DotZLib.CodecBase	access:protected	signature:()
DotZLib.CodecBase.setChecksum	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        protected void setChecksum(uint newSum)$/;"	m	class:DotZLib.CodecBase	access:protected	signature:(uint newSum)
DotZLib.CodecBase.~CodecBase	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        ~CodecBase()$/;"	m	class:DotZLib.CodecBase	file:	access:private	signature:()
DotZLib.CompressLevel	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^    public enum CompressLevel : int$/;"	g	namespace:DotZLib	access:public
DotZLib.DataAvailableHandler	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^    public delegate void DataAvailableHandler(byte[] data, int startIndex, int count);$/;"	m	namespace:DotZLib	access:public	signature:(byte[] data, int startIndex, int count)
DotZLib.Deflater	src/contrib/dotzlib/DotZLib/Deflater.cs	/^	public sealed class Deflater : CodecBase$/;"	c	namespace:DotZLib	inherits:CodecBase	access:public
DotZLib.Deflater.Add	src/contrib/dotzlib/DotZLib/Deflater.cs	/^        public override void Add(byte[] data, int offset, int count)$/;"	m	class:DotZLib.Deflater	access:public	signature:(byte[] data, int offset, int count)
DotZLib.Deflater.CleanUp	src/contrib/dotzlib/DotZLib/Deflater.cs	/^        protected override void CleanUp() { deflateEnd(ref _ztream); }$/;"	m	class:DotZLib.Deflater	access:protected	signature:()
DotZLib.Deflater.Deflater	src/contrib/dotzlib/DotZLib/Deflater.cs	/^		public Deflater(CompressLevel level) : base()$/;"	m	class:DotZLib.Deflater	access:public	signature:(CompressLevel level)
DotZLib.Deflater.Finish	src/contrib/dotzlib/DotZLib/Deflater.cs	/^        public override void Finish()$/;"	m	class:DotZLib.Deflater	access:public	signature:()
DotZLib.Deflater.deflate	src/contrib/dotzlib/DotZLib/Deflater.cs	/^        private static extern int deflate(ref ZStream sz, int flush);$/;"	m	class:DotZLib.Deflater	file:	access:private	signature:(ref ZStream sz, int flush)
DotZLib.Deflater.deflateEnd	src/contrib/dotzlib/DotZLib/Deflater.cs	/^        private static extern int deflateEnd(ref ZStream sz);$/;"	m	class:DotZLib.Deflater	file:	access:private	signature:(ref ZStream sz)
DotZLib.Deflater.deflateInit_	src/contrib/dotzlib/DotZLib/Deflater.cs	/^        private static extern int deflateInit_(ref ZStream sz, int level, string vs, int size);$/;"	m	class:DotZLib.Deflater	file:	access:private	signature:(ref ZStream sz, int level, string vs, int size)
DotZLib.Deflater.deflateReset	src/contrib/dotzlib/DotZLib/Deflater.cs	/^        private static extern int deflateReset(ref ZStream sz);$/;"	m	class:DotZLib.Deflater	file:	access:private	signature:(ref ZStream sz)
DotZLib.FlushTypes	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^    internal enum FlushTypes$/;"	g	namespace:DotZLib
DotZLib.GZipStream	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^	public class GZipStream : Stream, IDisposable$/;"	c	namespace:DotZLib	inherits:Stream,IDisposable	access:public
DotZLib.GZipStream.CanRead	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override bool CanRead$/;"	p	class:DotZLib.GZipStream	access:public
DotZLib.GZipStream.CanSeek	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override bool CanSeek$/;"	p	class:DotZLib.GZipStream	access:public
DotZLib.GZipStream.CanWrite	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override bool CanWrite$/;"	p	class:DotZLib.GZipStream	access:public
DotZLib.GZipStream.Dispose	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public void Dispose()$/;"	m	class:DotZLib.GZipStream	access:public	signature:()
DotZLib.GZipStream.Flush	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override void Flush()$/;"	m	class:DotZLib.GZipStream	access:public	signature:()
DotZLib.GZipStream.GZipStream	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^		public GZipStream(string fileName, CompressLevel level)$/;"	m	class:DotZLib.GZipStream	access:public	signature:(string fileName, CompressLevel level)
DotZLib.GZipStream.GZipStream	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public GZipStream(string fileName)$/;"	m	class:DotZLib.GZipStream	access:public	signature:(string fileName)
DotZLib.GZipStream.Length	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override long Length$/;"	p	class:DotZLib.GZipStream	access:public
DotZLib.GZipStream.Position	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override long Position$/;"	p	class:DotZLib.GZipStream	access:public
DotZLib.GZipStream.Read	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override int Read(byte[] buffer, int offset, int count)$/;"	m	class:DotZLib.GZipStream	access:public	signature:(byte[] buffer, int offset, int count)
DotZLib.GZipStream.ReadByte	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override int ReadByte()$/;"	m	class:DotZLib.GZipStream	access:public	signature:()
DotZLib.GZipStream.Seek	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override long Seek(long offset, SeekOrigin origin)$/;"	m	class:DotZLib.GZipStream	access:public	signature:(long offset, SeekOrigin origin)
DotZLib.GZipStream.SetLength	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override void SetLength(long value)$/;"	m	class:DotZLib.GZipStream	access:public	signature:(long value)
DotZLib.GZipStream.Write	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override void Write(byte[] buffer, int offset, int count)$/;"	m	class:DotZLib.GZipStream	access:public	signature:(byte[] buffer, int offset, int count)
DotZLib.GZipStream.WriteByte	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override void WriteByte(byte value)$/;"	m	class:DotZLib.GZipStream	access:public	signature:(byte value)
DotZLib.GZipStream._gzFile	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private IntPtr _gzFile;$/;"	f	class:DotZLib.GZipStream	file:	access:private
DotZLib.GZipStream._isDisposed	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private bool _isDisposed = false;$/;"	f	class:DotZLib.GZipStream	file:	access:private
DotZLib.GZipStream._isWriting	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private bool _isWriting;$/;"	f	class:DotZLib.GZipStream	file:	access:private
DotZLib.GZipStream.cleanUp	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private void cleanUp(bool isDisposing)$/;"	m	class:DotZLib.GZipStream	file:	access:private	signature:(bool isDisposing)
DotZLib.GZipStream.gzclose	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private static extern int gzclose(IntPtr gzFile);$/;"	m	class:DotZLib.GZipStream	file:	access:private	signature:(IntPtr gzFile)
DotZLib.GZipStream.gzgetc	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private static extern int gzgetc(IntPtr gzFile);$/;"	m	class:DotZLib.GZipStream	file:	access:private	signature:(IntPtr gzFile)
DotZLib.GZipStream.gzopen	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private static extern IntPtr gzopen(string name, string mode);$/;"	m	class:DotZLib.GZipStream	file:	access:private	signature:(string name, string mode)
DotZLib.GZipStream.gzputc	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private static extern int gzputc(IntPtr gzFile, int c);$/;"	m	class:DotZLib.GZipStream	file:	access:private	signature:(IntPtr gzFile, int c)
DotZLib.GZipStream.gzread	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private static extern int gzread(IntPtr gzFile, int data, int length);$/;"	m	class:DotZLib.GZipStream	file:	access:private	signature:(IntPtr gzFile, int data, int length)
DotZLib.GZipStream.gzwrite	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private static extern int gzwrite(IntPtr gzFile, int data, int length);$/;"	m	class:DotZLib.GZipStream	file:	access:private	signature:(IntPtr gzFile, int data, int length)
DotZLib.GZipStream.~GZipStream	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        ~GZipStream()$/;"	m	class:DotZLib.GZipStream	file:	access:private	signature:()
DotZLib.Inflater	src/contrib/dotzlib/DotZLib/Inflater.cs	/^    public class Inflater : CodecBase$/;"	c	namespace:DotZLib	inherits:CodecBase	access:public
DotZLib.Inflater.Add	src/contrib/dotzlib/DotZLib/Inflater.cs	/^        public override void Add(byte[] data, int offset, int count)$/;"	m	class:DotZLib.Inflater	access:public	signature:(byte[] data, int offset, int count)
DotZLib.Inflater.CleanUp	src/contrib/dotzlib/DotZLib/Inflater.cs	/^        protected override void CleanUp() { inflateEnd(ref _ztream); }$/;"	m	class:DotZLib.Inflater	access:protected	signature:()
DotZLib.Inflater.Finish	src/contrib/dotzlib/DotZLib/Inflater.cs	/^        public override void Finish()$/;"	m	class:DotZLib.Inflater	access:public	signature:()
DotZLib.Inflater.Inflater	src/contrib/dotzlib/DotZLib/Inflater.cs	/^        public Inflater() : base()$/;"	m	class:DotZLib.Inflater	access:public	signature:()
DotZLib.Inflater.inflate	src/contrib/dotzlib/DotZLib/Inflater.cs	/^        private static extern int inflate(ref ZStream sz, int flush);$/;"	m	class:DotZLib.Inflater	file:	access:private	signature:(ref ZStream sz, int flush)
DotZLib.Inflater.inflateEnd	src/contrib/dotzlib/DotZLib/Inflater.cs	/^        private static extern int inflateEnd(ref ZStream sz);$/;"	m	class:DotZLib.Inflater	file:	access:private	signature:(ref ZStream sz)
DotZLib.Inflater.inflateInit_	src/contrib/dotzlib/DotZLib/Inflater.cs	/^        private static extern int inflateInit_(ref ZStream sz, string vs, int size);$/;"	m	class:DotZLib.Inflater	file:	access:private	signature:(ref ZStream sz, string vs, int size)
DotZLib.Inflater.inflateReset	src/contrib/dotzlib/DotZLib/Inflater.cs	/^        private static extern int inflateReset(ref ZStream sz);$/;"	m	class:DotZLib.Inflater	file:	access:private	signature:(ref ZStream sz)
DotZLib.Info	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^    public class Info$/;"	c	namespace:DotZLib	access:public
DotZLib.Info.HasDebugInfo	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public bool HasDebugInfo { get { return 0 != (_flags & 0x100); } }$/;"	p	class:DotZLib.Info	access:public
DotZLib.Info.Info	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public Info()$/;"	m	class:DotZLib.Info	access:public	signature:()
DotZLib.Info.SizeOfOffset	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public int SizeOfOffset { get { return bitSize((_flags >> 6) & 3); } }$/;"	p	class:DotZLib.Info	access:public
DotZLib.Info.SizeOfPointer	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public int SizeOfPointer { get { return bitSize((_flags >> 4) & 3); } }$/;"	p	class:DotZLib.Info	access:public
DotZLib.Info.SizeOfUInt	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public int SizeOfUInt { get { return bitSize(_flags & 3); } }$/;"	p	class:DotZLib.Info	access:public
DotZLib.Info.SizeOfULong	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public int SizeOfULong { get { return bitSize((_flags >> 2) & 3); } }$/;"	p	class:DotZLib.Info	access:public
DotZLib.Info.UsesAssemblyCode	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public bool UsesAssemblyCode { get { return 0 != (_flags & 0x200); } }$/;"	p	class:DotZLib.Info	access:public
DotZLib.Info.Version	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public static string Version { get { return zlibVersion(); } }$/;"	p	class:DotZLib.Info	access:public
DotZLib.Info._flags	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        private uint _flags;$/;"	f	class:DotZLib.Info	file:	access:private
DotZLib.Info.bitSize	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        private static int bitSize(uint bits)$/;"	m	class:DotZLib.Info	file:	access:private	signature:(uint bits)
DotZLib.Info.zlibCompileFlags	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        private static extern uint zlibCompileFlags();$/;"	m	class:DotZLib.Info	file:	access:private	signature:()
DotZLib.Info.zlibVersion	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        private static extern string zlibVersion();$/;"	m	class:DotZLib.Info	file:	access:private	signature:()
DotZLib.ZLibException	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^    public class ZLibException : ApplicationException$/;"	c	namespace:DotZLib	inherits:ApplicationException	access:public
DotZLib.ZLibException.ZLibException	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public ZLibException(int errorCode) : base(String.Format("ZLib error {0}", errorCode))$/;"	m	class:DotZLib.ZLibException	access:public	signature:(int errorCode)
DotZLib.ZLibException.ZLibException	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public ZLibException(int errorCode, string msg) : base(String.Format("ZLib error {0} {1}", errorCode, msg))$/;"	m	class:DotZLib.ZLibException	access:public	signature:(int errorCode, string msg)
DotZLib.ZStream	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^    internal struct ZStream$/;"	s	namespace:DotZLib
DotZLib.ZStream.adler	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public uint adler;$/;"	f	struct:DotZLib.ZStream	access:public
DotZLib.ZStream.avail_in	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public uint avail_in;$/;"	f	struct:DotZLib.ZStream	access:public
DotZLib.ZStream.avail_out	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public uint avail_out;$/;"	f	struct:DotZLib.ZStream	access:public
DotZLib.ZStream.data_type	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        int data_type;$/;"	f	struct:DotZLib.ZStream	access:public
DotZLib.ZStream.msg	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        string msg;$/;"	f	struct:DotZLib.ZStream	access:public
DotZLib.ZStream.next_in	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public IntPtr next_in;$/;"	f	struct:DotZLib.ZStream	access:public
DotZLib.ZStream.next_out	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public IntPtr next_out;$/;"	f	struct:DotZLib.ZStream	access:public
DotZLib.ZStream.opaque	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        uint opaque;$/;"	f	struct:DotZLib.ZStream	access:public
DotZLib.ZStream.reserved	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        uint reserved;$/;"	f	struct:DotZLib.ZStream	access:public
DotZLib.ZStream.state	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        uint state;$/;"	f	struct:DotZLib.ZStream	access:public
DotZLib.ZStream.total_in	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public uint total_in;$/;"	f	struct:DotZLib.ZStream	access:public
DotZLib.ZStream.total_out	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public uint total_out;$/;"	f	struct:DotZLib.ZStream	access:public
DotZLib.ZStream.zalloc	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        uint zalloc;$/;"	f	struct:DotZLib.ZStream	access:public
DotZLib.ZStream.zfree	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        uint zfree;$/;"	f	struct:DotZLib.ZStream	access:public
DotZLibTests	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^namespace DotZLibTests$/;"	n
DotZLibTests.ChecksumTests	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^    public class ChecksumTests$/;"	c	namespace:DotZLibTests	access:public
DotZLibTests.ChecksumTests.Adler_Data	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void Adler_Data()$/;"	m	class:DotZLibTests.ChecksumTests	access:public	signature:()
DotZLibTests.ChecksumTests.Adler_Null	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void Adler_Null()$/;"	m	class:DotZLibTests.ChecksumTests	access:public	signature:()
DotZLibTests.ChecksumTests.CRC32_Data	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void CRC32_Data()$/;"	m	class:DotZLibTests.ChecksumTests	access:public	signature:()
DotZLibTests.ChecksumTests.CRC32_Null	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void CRC32_Null()$/;"	m	class:DotZLibTests.ChecksumTests	access:public	signature:()
DotZLibTests.CircBufferTests	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^    public class CircBufferTests$/;"	c	namespace:DotZLibTests	access:public
DotZLibTests.CircBufferTests.BlockPutGet	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void BlockPutGet()$/;"	m	class:DotZLibTests.CircBufferTests	access:public	signature:()
DotZLibTests.CircBufferTests.SinglePutGet	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void SinglePutGet()$/;"	m	class:DotZLibTests.CircBufferTests	access:public	signature:()
DotZLibTests.DeflateInflateTests	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^    public class DeflateInflateTests$/;"	c	namespace:DotZLibTests	access:public
DotZLibTests.DeflateInflateTests.CDataAvail	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void CDataAvail(byte[] data, int startIndex, int count)$/;"	m	class:DotZLibTests.DeflateInflateTests	access:public	signature:(byte[] data, int startIndex, int count)
DotZLibTests.DeflateInflateTests.DDataAvail	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        private void DDataAvail(byte[] data, int startIndex, int count)$/;"	m	class:DotZLibTests.DeflateInflateTests	file:	access:private	signature:(byte[] data, int startIndex, int count)
DotZLibTests.DeflateInflateTests.Deflate_Compress	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void Deflate_Compress()$/;"	m	class:DotZLibTests.DeflateInflateTests	access:public	signature:()
DotZLibTests.DeflateInflateTests.Deflate_Init	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void Deflate_Init()$/;"	m	class:DotZLibTests.DeflateInflateTests	access:public	signature:()
DotZLibTests.DeflateInflateTests.Inflate_Expand	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void Inflate_Expand()$/;"	m	class:DotZLibTests.DeflateInflateTests	access:public	signature:()
DotZLibTests.DeflateInflateTests.Inflate_Init	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void Inflate_Init()$/;"	m	class:DotZLibTests.DeflateInflateTests	access:public	signature:()
DotZLibTests.DeflateInflateTests.adler1	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        private uint adler1;$/;"	f	class:DotZLibTests.DeflateInflateTests	file:	access:private
DotZLibTests.DeflateInflateTests.adler2	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        private uint adler2;$/;"	f	class:DotZLibTests.DeflateInflateTests	file:	access:private
DotZLibTests.DeflateInflateTests.compressedData	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        private ArrayList compressedData = new ArrayList();$/;"	f	class:DotZLibTests.DeflateInflateTests	file:	access:private
DotZLibTests.DeflateInflateTests.uncompressedData	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        private ArrayList uncompressedData = new ArrayList();$/;"	f	class:DotZLibTests.DeflateInflateTests	file:	access:private
DotZLibTests.GZipStreamTests	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^    public class GZipStreamTests$/;"	c	namespace:DotZLibTests	access:public
DotZLibTests.GZipStreamTests.GZipStream_WriteRead	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void GZipStream_WriteRead()$/;"	m	class:DotZLibTests.GZipStreamTests	access:public	signature:()
DotZLibTests.InfoTests	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^    public class InfoTests$/;"	c	namespace:DotZLibTests	access:public
DotZLibTests.InfoTests.Info_Version	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void Info_Version()$/;"	m	class:DotZLibTests.InfoTests	access:public	signature:()
DotZLibTests.Utils	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^    internal class Utils$/;"	c	namespace:DotZLibTests
DotZLibTests.Utils.byteArrEqual	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public static bool byteArrEqual( byte[] lhs, byte[] rhs )$/;"	m	class:DotZLibTests.Utils	access:public	signature:( byte[] lhs, byte[] rhs )
ELSE	src/contrib/masmx64/gvmat64.asm	/^ELSE$/;"	l
ELSE	src/contrib/masmx86/inffas32.asm	/^ELSE$/;"	l
ELSE	src/contrib/masmx86/match686.asm	/^ELSE$/;"	l
ENDHEADERMAGIC	src/contrib/minizip/zip.c	105;"	d	file:
ENDIF	src/contrib/masmx64/gvmat64.asm	/^ENDIF$/;"	l
ENDIF	src/contrib/masmx86/inffas32.asm	/^ENDIF$/;"	l
ENDIF	src/contrib/masmx86/match686.asm	/^ENDIF$/;"	l
END_BLOCK	src/trees.c	50;"	d	file:
ENOUGH	src/contrib/infback9/inftree9.h	50;"	d
ENOUGH	src/inftrees.h	51;"	d
ENOUGH_DISTS	src/contrib/infback9/inftree9.h	49;"	d
ENOUGH_DISTS	src/inftrees.h	50;"	d
ENOUGH_LENS	src/contrib/infback9/inftree9.h	48;"	d
ENOUGH_LENS	src/inftrees.h	49;"	d
EQUAL	src/deflate.c	151;"	d	file:
ERR_MSG	src/zutil.h	50;"	d
ERR_MSG	zutil.h	50;"	d
ERR_RETURN	src/zutil.h	52;"	d
ERR_RETURN	zutil.h	52;"	d
EXCESS	src/examples/fitblk.c	123;"	d	file:
EXIT_ERR	src/contrib/pascal/example.pas	/^procedure EXIT_ERR(const msg: String);$/;"	p
EXLEN	src/inflate.h	/^    EXLEN,      \/* i: waiting for extra length (gzip) *\/$/;"	e	enum:__anon19
EXTRA	src/examples/gzlog.c	328;"	d	file:
EXTRA	src/inflate.h	/^    EXTRA,      \/* i: waiting for extra bytes (gzip) *\/$/;"	e	enum:__anon19
EXTRA_STATE	src/deflate.h	55;"	d
ExprMatch	src/contrib/untgz/untgz.c	/^int ExprMatch           OF((char *, char *));$/;"	p	file:	signature:(char *, char *)
ExprMatch	src/contrib/untgz/untgz.c	/^int ExprMatch (char *string,char *expr)$/;"	f	signature:(char *string,char *expr)
FAR	src/zconf.h	292;"	d
FAR	src/zconf.h	294;"	d
FAR	src/zconf.h	301;"	d
FAR	src/zconf.h	303;"	d
FAR	src/zconf.h	327;"	d
FAR	src/zconf.h	364;"	d
FAR	zconf.h	292;"	d
FAR	zconf.h	294;"	d
FAR	zconf.h	301;"	d
FAR	zconf.h	303;"	d
FAR	zconf.h	327;"	d
FAR	zconf.h	364;"	d
FIFOTYPE	src/contrib/untgz/untgz.c	49;"	d	file:
FINISH_STATE	src/deflate.h	60;"	d
FIXLCODES	src/contrib/puff/puff.c	95;"	d	file:
FLAGS	src/inflate.h	/^    FLAGS,      \/* i: waiting for method and flags (gzip) *\/$/;"	e	enum:__anon19
FLAG_LOCALHEADER_OFFSET	src/contrib/minizip/zip.c	109;"	d	file:
FLUSHCODE	src/examples/gun.c	171;"	d	file:
FLUSH_BLOCK	src/deflate.c	1550;"	d	file:
FLUSH_BLOCK_ONLY	src/deflate.c	1538;"	d	file:
FOPEN_FUNC	src/contrib/minizip/ioapi.c	19;"	d	file:
FOPEN_FUNC	src/contrib/minizip/ioapi.c	23;"	d	file:
FOPEN_FUNC	src/contrib/minizip/miniunz.c	32;"	d	file:
FOPEN_FUNC	src/contrib/minizip/miniunz.c	36;"	d	file:
FOPEN_FUNC	src/contrib/minizip/minizip.c	33;"	d	file:
FOPEN_FUNC	src/contrib/minizip/minizip.c	37;"	d	file:
FSEEKO_FUNC	src/contrib/minizip/ioapi.c	21;"	d	file:
FSEEKO_FUNC	src/contrib/minizip/ioapi.c	25;"	d	file:
FSEEKO_FUNC	src/contrib/minizip/miniunz.c	34;"	d	file:
FSEEKO_FUNC	src/contrib/minizip/miniunz.c	38;"	d	file:
FSEEKO_FUNC	src/contrib/minizip/minizip.c	35;"	d	file:
FSEEKO_FUNC	src/contrib/minizip/minizip.c	39;"	d	file:
FTELLO_FUNC	src/contrib/minizip/ioapi.c	20;"	d	file:
FTELLO_FUNC	src/contrib/minizip/ioapi.c	24;"	d	file:
FTELLO_FUNC	src/contrib/minizip/miniunz.c	33;"	d	file:
FTELLO_FUNC	src/contrib/minizip/miniunz.c	37;"	d	file:
FTELLO_FUNC	src/contrib/minizip/minizip.c	34;"	d	file:
FTELLO_FUNC	src/contrib/minizip/minizip.c	38;"	d	file:
F_OK	src/contrib/untgz/untgz.c	27;"	d	file:
F_OPEN	src/zutil.h	106;"	d
F_OPEN	src/zutil.h	184;"	d
F_OPEN	zutil.h	106;"	d
F_OPEN	zutil.h	184;"	d
Fastest	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        Fastest = 1$/;"	e	enum:DotZLib.CompressLevel	file:
Finish	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        public abstract void Finish();$/;"	m	class:DotZLib.CodecBase	access:public	signature:()
Finish	src/contrib/dotzlib/DotZLib/Deflater.cs	/^        public override void Finish()$/;"	m	class:DotZLib.Deflater	access:public	signature:()
Finish	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        None,  Partial,  Sync,  Full,  Finish,  Block$/;"	e	enum:DotZLib.FlushTypes	file:
Finish	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        void Finish();$/;"	m	interface:DotZLib.Codec	access:public	signature:()
Finish	src/contrib/dotzlib/DotZLib/Inflater.cs	/^        public override void Finish()$/;"	m	class:DotZLib.Inflater	access:public	signature:()
Flush	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override void Flush()$/;"	m	class:DotZLib.GZipStream	access:public	signature:()
FlushTypes	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^    internal enum FlushTypes$/;"	g	namespace:DotZLib
Freq	src/deflate.h	76;"	d
Full	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        None,  Partial,  Sync,  Full,  Finish,  Block$/;"	e	enum:DotZLib.FlushTypes	file:
GAS_COFF	src/contrib/inflate86/inffast.S	/^#define GAS_COFF \/* windows object format *\/$/;"	d
GAS_ELF	src/contrib/inflate86/inffast.S	/^#define GAS_ELF$/;"	d
GF2_DIM	src/crc32.c	324;"	d	file:
GNUTYPE_DUMPDIR	src/contrib/untgz/untgz.c	54;"	d	file:
GNUTYPE_LONGLINK	src/contrib/untgz/untgz.c	55;"	d	file:
GNUTYPE_LONGNAME	src/contrib/untgz/untgz.c	56;"	d	file:
GNUTYPE_MULTIVOL	src/contrib/untgz/untgz.c	57;"	d	file:
GNUTYPE_NAMES	src/contrib/untgz/untgz.c	58;"	d	file:
GNUTYPE_SPARSE	src/contrib/untgz/untgz.c	59;"	d	file:
GNUTYPE_VOLHDR	src/contrib/untgz/untgz.c	60;"	d	file:
GT_OFF	src/gzguts.h	205;"	d
GT_OFF	src/gzguts.h	208;"	d
GUNZIP	src/inflate.h	16;"	d
GZBUFSIZE	src/gzguts.h	147;"	d
GZIP	src/deflate.h	23;"	d
GZIP	src/gzguts.h	158;"	d
GZLOG_H	src/examples/gzlog.h	49;"	d
GZ_APPEND	src/gzguts.h	153;"	d
GZ_NONE	src/gzguts.h	150;"	d
GZ_READ	src/gzguts.h	151;"	d
GZ_SUFFIX	src/test/minigzip.c	131;"	d	file:
GZ_SUFFIX	src/test/minigzip.c	49;"	d	file:
GZ_SUFFIX	src/test/minigzip.c	53;"	d	file:
GZ_WRITE	src/gzguts.h	152;"	d
GZipStream	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^		public GZipStream(string fileName, CompressLevel level)$/;"	m	class:DotZLib.GZipStream	access:public	signature:(string fileName, CompressLevel level)
GZipStream	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^	public class GZipStream : Stream, IDisposable$/;"	c	namespace:DotZLib	inherits:Stream,IDisposable	access:public
GZipStream	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public GZipStream(string fileName)$/;"	m	class:DotZLib.GZipStream	access:public	signature:(string fileName)
GZipStreamTests	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^    public class GZipStreamTests$/;"	c	namespace:DotZLibTests	access:public
GZipStream_WriteRead	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void GZipStream_WriteRead()$/;"	m	class:DotZLibTests.GZipStreamTests	access:public	signature:()
Get	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        public int Get()$/;"	m	class:DotZLib.CircularBuffer	access:public	signature:()
Get	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        public int Get(byte[] destination, int offset, int count)$/;"	m	class:DotZLib.CircularBuffer	access:public	signature:(byte[] destination, int offset, int count)
GetCompressionRate	src/contrib/delphi/ZLib.pas	/^    function GetCompressionRate: Single;$/;"	f
GetMsecSincePerfCounter	src/contrib/testzlib/testzlib.c	/^DWORD GetMsecSincePerfCounter(LARGE_INTEGER beginTime64,BOOL fComputeTimeQueryPerf)$/;"	f	signature:(LARGE_INTEGER beginTime64,BOOL fComputeTimeQueryPerf)
GetResRdtsc	src/contrib/testzlib/testzlib.c	/^LARGE_INTEGER GetResRdtsc(LARGE_INTEGER beginTime64,BOOL fComputeTimeQueryPerf)$/;"	f	signature:(LARGE_INTEGER beginTime64,BOOL fComputeTimeQueryPerf)
HAVE_MEMCPY	src/zutil.h	200;"	d
HAVE_MEMCPY	zutil.h	200;"	d
HAVE_VSNPRINTF	src/gzguts.h	51;"	d
HAVE_VSNPRINTF	src/gzguts.h	57;"	d
HAVE_VSNPRINTF	src/gzguts.h	63;"	d
HCRC	src/inflate.h	/^    HCRC,       \/* i: waiting for header crc (gzip) *\/$/;"	e	enum:__anon19
HCRC_STATE	src/deflate.h	58;"	d
HEAD	src/examples/gzlog.c	316;"	d	file:
HEAD	src/inflate.h	/^    HEAD,       \/* i: waiting for magic header *\/$/;"	e	enum:__anon19
HEAP_SIZE	src/deflate.h	45;"	d
HasDebugInfo	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public bool HasDebugInfo { get { return 0 != (_flags & 0x100); } }$/;"	p	class:DotZLib.Info	access:public
IFDEF	src/contrib/masmx64/gvmat64.asm	/^IFDEF INFOZIP$/;"	l
IFDEF	src/contrib/masmx86/inffas32.asm	/^IFDEF GUNZIP$/;"	l
IFDEF	src/contrib/masmx86/match686.asm	/^IFDEF NOUNDERLINE$/;"	l
INCLUDE	src/nintendods/Makefile	/^export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)\/$(dir)) \\$/;"	m
INCLUDECRYPTINGCODE_IFCRYPTALLOWED	src/contrib/minizip/zip.c	185;"	d	file:
INCLUDES	src/nintendods/Makefile	/^INCLUDES	:=	include$/;"	m
INDEX	src/examples/enough.c	179;"	d	file:
INFLATE_MODE_BAD	src/contrib/inflate86/inffast.S	/^#define INFLATE_MODE_BAD  26$/;"	d
INFLATE_MODE_BAD	src/contrib/masmx86/inffas32.asm	/^    INFLATE_MODE_BAD     equ 17$/;"	d
INFLATE_MODE_BAD	src/contrib/masmx86/inffas32.asm	/^    INFLATE_MODE_BAD     equ 26$/;"	d
INFLATE_MODE_BAD	src/contrib/masmx86/inffas32.asm	/^  INFLATE_MODE_BAD     equ 26$/;"	d
INFLATE_MODE_TYPE	src/contrib/inflate86/inffast.S	/^#define INFLATE_MODE_TYPE 11  \/* state->mode flags enum-ed in inflate.h *\/$/;"	d
INFLATE_MODE_TYPE	src/contrib/masmx86/inffas32.asm	/^    INFLATE_MODE_TYPE    equ 11$/;"	d
INFLATE_MODE_TYPE	src/contrib/masmx86/inffas32.asm	/^    INFLATE_MODE_TYPE    equ 3$/;"	d
INFLATE_MODE_TYPE	src/contrib/masmx86/inffas32.asm	/^  INFLATE_MODE_TYPE    equ 11$/;"	d
INITBITS	src/contrib/infback9/infback9.c	117;"	d	file:
INITBITS	src/infback.c	150;"	d	file:
INITBITS	src/inflate.c	481;"	d	file:
INIT_STATE	src/deflate.h	54;"	d
INSERT_STRING	src/deflate.c	181;"	d	file:
INSERT_STRING	src/deflate.c	186;"	d	file:
INVALID_HANDLE_VALUE	src/contrib/minizip/iowin32.c	21;"	d	file:
INVALID_SET_FILE_POINTER	src/contrib/minizip/iowin32.c	25;"	d	file:
IOWIN32_USING_WINRT_API	src/contrib/minizip/iowin32.c	31;"	d	file:
IPos	src/deflate.h	/^typedef unsigned IPos;$/;"	t
ISSPECIAL	src/contrib/untgz/untgz.c	288;"	d	file:
Inflate_Expand	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void Inflate_Expand()$/;"	m	class:DotZLibTests.DeflateInflateTests	access:public	signature:()
Inflate_Init	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void Inflate_Init()$/;"	m	class:DotZLibTests.DeflateInflateTests	access:public	signature:()
Inflater	src/contrib/dotzlib/DotZLib/Inflater.cs	/^        public Inflater() : base()$/;"	m	class:DotZLib.Inflater	access:public	signature:()
Inflater	src/contrib/dotzlib/DotZLib/Inflater.cs	/^    public class Inflater : CodecBase$/;"	c	namespace:DotZLib	inherits:CodecBase	access:public
Info	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public Info()$/;"	m	class:DotZLib.Info	access:public	signature:()
Info	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^    public class Info$/;"	c	namespace:DotZLib	access:public
InfoTests	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^    public class InfoTests$/;"	c	namespace:DotZLibTests	access:public
Info_Version	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void Info_Version()$/;"	m	class:DotZLibTests.InfoTests	access:public	signature:()
LD	src/contrib/delphi/zlibd32.mak	/^LD = bcc32$/;"	m
LD	src/contrib/pascal/zlibd32.mak	/^LD = bcc32$/;"	m
LD	src/nintendods/Makefile	/^	export LD	:=	$(CC)$/;"	m
LD	src/nintendods/Makefile	/^	export LD	:=	$(CXX)$/;"	m
LDFLAGS	src/contrib/delphi/zlibd32.mak	/^LDFLAGS =$/;"	m
LDFLAGS	src/contrib/pascal/zlibd32.mak	/^LDFLAGS =$/;"	m
LDFLAGS	src/nintendods/Makefile	/^LDFLAGS	=	-specs=ds_arm9.specs -g $(ARCH) -Wl,-Map,$(notdir $*.map)$/;"	m
LEN	src/contrib/infback9/inflate9.h	/^            LEN,        \/* i: waiting for length\/lit code *\/$/;"	e	enum:__anon14
LEN	src/inflate.h	/^            LEN,        \/* i: waiting for length\/lit\/eob code *\/$/;"	e	enum:__anon19
LENEXT	src/inflate.h	/^            LENEXT,     \/* i: waiting for length extra bits *\/$/;"	e	enum:__anon19
LENGTH	src/inflate.h	/^    LENGTH,     \/* i: waiting for 32-bit length (gzip) *\/$/;"	e	enum:__anon19
LENGTH_CODES	src/deflate.h	30;"	d
LENLENS	src/inflate.h	/^        LENLENS,    \/* i: waiting for code length code lengths *\/$/;"	e	enum:__anon19
LENS	src/contrib/infback9/inftree9.h	/^    LENS,$/;"	e	enum:__anon13
LENS	src/inftrees.h	/^    LENS,$/;"	e	enum:__anon17
LEN_	src/inflate.h	/^            LEN_,       \/* i: same as LEN below, but only first time in *\/$/;"	e	enum:__anon19
LGCHUNK	src/examples/gzappend.c	88;"	d	file:
LIBDIRS	src/nintendods/Makefile	/^LIBDIRS	:=	$(LIBNDS)$/;"	m
LINKER	src/watcom/watcom_f.mak	/^LINKER   = wcl386$/;"	m
LINKER	src/watcom/watcom_l.mak	/^LINKER   = wcl$/;"	m
LIT	src/inflate.h	/^            LIT,        \/* o: waiting for output space to write literal *\/$/;"	e	enum:__anon19
LITERALS	src/deflate.h	33;"	d
LNKTYPE	src/contrib/untgz/untgz.c	44;"	d	file:
LOAD	src/infback.c	128;"	d	file:
LOAD	src/inflate.c	459;"	d	file:
LOC	src/contrib/delphi/zlibd32.mak	/^LOC = -DZEXPORT=__fastcall -DZEXPORTVA=__cdecl$/;"	m
LOC	src/contrib/pascal/zlibd32.mak	/^LOC = -DZEXPORT=__fastcall -DZEXPORTVA=__cdecl$/;"	m
LOCALHEADERMAGIC	src/contrib/minizip/zip.c	103;"	d	file:
LOCAL_ARM_MODE	Android.mk	/^LOCAL_ARM_MODE := arm$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE := libz$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE := libz-host$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE := minizip$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE:= gzip$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE:= libunz$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE:= minigzip$/;"	m
LOCAL_MODULE_TAGS	Android.mk	/^LOCAL_MODULE_TAGS := optional$/;"	m
LOCAL_PATH	Android.mk	/^LOCAL_PATH:= $(call my-dir)$/;"	m
LOCAL_SDK_VERSION	Android.mk	/^  LOCAL_SDK_VERSION := 9$/;"	m
LOCAL_SHARED_LIBRARIES	Android.mk	/^LOCAL_SHARED_LIBRARIES := libz$/;"	m
LOCAL_SRC_FILES	Android.mk	/^LOCAL_SRC_FILES := $(zlib_files) $(zlib_arm_files)$/;"	m
LOCAL_SRC_FILES	Android.mk	/^LOCAL_SRC_FILES := $(zlib_files)$/;"	m
LOCAL_SRC_FILES	Android.mk	/^LOCAL_SRC_FILES := \\$/;"	m
LOCAL_SRC_FILES	Android.mk	/^LOCAL_SRC_FILES:=        \\$/;"	m
LOCAL_STATIC_LIBRARIES	Android.mk	/^LOCAL_STATIC_LIBRARIES := libz$/;"	m
LOGID	src/examples/gzlog.c	288;"	d	file:
LOOK	src/gzguts.h	156;"	d
LSEEK	src/gzlib.c	12;"	d	file:
LSEEK	src/gzlib.c	14;"	d	file:
LSEEK	src/gzlib.c	9;"	d	file:
L_CODES	src/deflate.h	36;"	d
L_add_bits_to_dist	src/contrib/masmx64/inffasx64.asm	/^L_add_bits_to_dist:$/;"	l
L_add_bits_to_dist	src/contrib/masmx86/inffas32.asm	/^L_add_bits_to_dist:$/;"	l
L_add_bits_to_dist_mmx	src/contrib/masmx86/inffas32.asm	/^L_add_bits_to_dist_mmx:$/;"	l
L_add_bits_to_len	src/contrib/masmx64/inffasx64.asm	/^L_add_bits_to_len:$/;"	l
L_add_bits_to_len	src/contrib/masmx86/inffas32.asm	/^L_add_bits_to_len:$/;"	l
L_align_long	src/contrib/masmx86/inffas32.asm	/^L_align_long:$/;"	l
L_break_loop	src/contrib/masmx64/inffasx64.asm	/^L_break_loop:$/;"	l
L_break_loop	src/contrib/masmx86/inffas32.asm	/^L_break_loop:$/;"	l
L_break_loop_with_status	src/contrib/masmx64/inffasx64.asm	/^L_break_loop_with_status:$/;"	l
L_buf_not_used	src/contrib/masmx86/inffas32.asm	/^L_buf_not_used:$/;"	l
L_check_dist_one	src/contrib/masmx64/inffasx64.asm	/^L_check_dist_one:$/;"	l
L_check_dist_one	src/contrib/masmx86/inffas32.asm	/^L_check_dist_one:$/;"	l
L_check_dist_one_mmx	src/contrib/masmx86/inffas32.asm	/^L_check_dist_one_mmx:$/;"	l
L_check_mmx	src/contrib/masmx86/inffas32.asm	/^L_check_mmx:$/;"	l
L_check_mmx_pop	src/contrib/masmx86/inffas32.asm	/^L_check_mmx_pop:$/;"	l
L_check_window	src/contrib/masmx64/inffasx64.asm	/^L_check_window:$/;"	l
L_check_window	src/contrib/masmx86/inffas32.asm	/^L_check_window:$/;"	l
L_check_window_mmx	src/contrib/masmx86/inffas32.asm	/^L_check_window_mmx:$/;"	l
L_clip_window	src/contrib/masmx64/inffasx64.asm	/^L_clip_window:$/;"	l
L_clip_window	src/contrib/masmx86/inffas32.asm	/^L_clip_window:$/;"	l
L_clip_window_mmx	src/contrib/masmx86/inffas32.asm	/^L_clip_window_mmx:$/;"	l
L_contiguous_in_window	src/contrib/masmx64/inffasx64.asm	/^L_contiguous_in_window:$/;"	l
L_contiguous_in_window	src/contrib/masmx86/inffas32.asm	/^L_contiguous_in_window:$/;"	l
L_contiguous_in_window_mmx	src/contrib/masmx86/inffas32.asm	/^L_contiguous_in_window_mmx:$/;"	l
L_copy_two	src/contrib/masmx64/inffasx64.asm	/^L_copy_two:$/;"	l
L_decode_distance	src/contrib/masmx64/inffasx64.asm	/^L_decode_distance:$/;"	l
L_decode_distance	src/contrib/masmx86/inffas32.asm	/^L_decode_distance:$/;"	l
L_decode_distance_mmx	src/contrib/masmx86/inffas32.asm	/^L_decode_distance_mmx:$/;"	l
L_do_copy	src/contrib/masmx64/inffasx64.asm	/^L_do_copy:$/;"	l
L_do_copy1	src/contrib/masmx86/inffas32.asm	/^L_do_copy1:$/;"	l
L_do_copy1_mmx	src/contrib/masmx86/inffas32.asm	/^L_do_copy1_mmx:$/;"	l
L_do_loop	src/contrib/masmx64/inffasx64.asm	/^L_do_loop:$/;"	l
L_do_loop	src/contrib/masmx86/inffas32.asm	/^L_do_loop:$/;"	l
L_do_loop_mmx	src/contrib/masmx86/inffas32.asm	/^L_do_loop_mmx:$/;"	l
L_dodist	src/contrib/masmx64/inffasx64.asm	/^L_dodist:$/;"	l
L_dodist	src/contrib/masmx86/inffas32.asm	/^L_dodist:$/;"	l
L_dodist_mmx	src/contrib/masmx86/inffas32.asm	/^L_dodist_mmx:$/;"	l
L_dolen	src/contrib/masmx64/inffasx64.asm	/^L_dolen:$/;"	l
L_dolen	src/contrib/masmx86/inffas32.asm	/^L_dolen:$/;"	l
L_dolen_mmx	src/contrib/masmx86/inffas32.asm	/^L_dolen_mmx:$/;"	l
L_done	src/contrib/masmx86/inffas32.asm	/^L_done:$/;"	l
L_dont_use_mmx	src/contrib/masmx86/inffas32.asm	/^L_dont_use_mmx:$/;"	l
L_end_is_smaller	src/contrib/masmx86/inffas32.asm	/^L_end_is_smaller:$/;"	l
L_fixup_out	src/contrib/masmx86/inffas32.asm	/^L_fixup_out:$/;"	l
L_get_dist_code_mmx	src/contrib/masmx86/inffas32.asm	/^L_get_dist_code_mmx:$/;"	l
L_get_distance_code	src/contrib/masmx64/inffasx64.asm	/^L_get_distance_code:$/;"	l
L_get_distance_code	src/contrib/masmx86/inffas32.asm	/^L_get_distance_code:$/;"	l
L_get_length_code	src/contrib/masmx64/inffasx64.asm	/^L_get_length_code:$/;"	l
L_get_length_code	src/contrib/masmx86/inffas32.asm	/^L_get_length_code:$/;"	l
L_get_length_code_mmx	src/contrib/masmx86/inffas32.asm	/^L_get_length_code_mmx:$/;"	l
L_get_length_code_one_time	src/contrib/masmx64/inffasx64.asm	/^L_get_length_code_one_time:$/;"	l
L_init_mmx	src/contrib/masmx86/inffas32.asm	/^L_init_mmx:$/;"	l
L_invalid_distance_code	src/contrib/masmx64/inffasx64.asm	/^L_invalid_distance_code:$/;"	l
L_invalid_distance_code	src/contrib/masmx86/inffas32.asm	/^L_invalid_distance_code:$/;"	l
L_invalid_distance_too_far	src/contrib/masmx64/inffasx64.asm	/^L_invalid_distance_too_far:$/;"	l
L_invalid_distance_too_far	src/contrib/masmx86/inffas32.asm	/^L_invalid_distance_too_far:$/;"	l
L_invalid_literal_length_code	src/contrib/masmx64/inffasx64.asm	/^L_invalid_literal_length_code:$/;"	l
L_invalid_literal_length_code	src/contrib/masmx86/inffas32.asm	/^L_invalid_literal_length_code:$/;"	l
L_is_aligned	src/contrib/masmx86/inffas32.asm	/^L_is_aligned:$/;"	l
L_last_is_smaller	src/contrib/masmx86/inffas32.asm	/^L_last_is_smaller:$/;"	l
L_one_time	src/contrib/masmx64/inffasx64.asm	/^L_one_time:$/;"	l
L_save_len	src/contrib/masmx86/inffas32.asm	/^L_save_len:$/;"	l
L_set_two	src/contrib/masmx64/inffasx64.asm	/^L_set_two:$/;"	l
L_skip_msg	src/contrib/masmx86/inffas32.asm	/^L_skip_msg:$/;"	l
L_test_for_end_of_block	src/contrib/masmx64/inffasx64.asm	/^L_test_for_end_of_block:$/;"	l
L_test_for_end_of_block	src/contrib/masmx86/inffas32.asm	/^L_test_for_end_of_block:$/;"	l
L_test_for_length_base	src/contrib/masmx64/inffasx64.asm	/^L_test_for_length_base:$/;"	l
L_test_for_length_base	src/contrib/masmx86/inffas32.asm	/^L_test_for_length_base:$/;"	l
L_test_for_length_base_mmx	src/contrib/masmx86/inffas32.asm	/^L_test_for_length_base_mmx:$/;"	l
L_test_for_second_level_dist	src/contrib/masmx64/inffasx64.asm	/^L_test_for_second_level_dist:$/;"	l
L_test_for_second_level_dist	src/contrib/masmx86/inffas32.asm	/^L_test_for_second_level_dist:$/;"	l
L_test_for_second_level_dist_mmx	src/contrib/masmx86/inffas32.asm	/^L_test_for_second_level_dist_mmx:$/;"	l
L_test_for_second_level_length	src/contrib/masmx64/inffasx64.asm	/^L_test_for_second_level_length:$/;"	l
L_test_for_second_level_length	src/contrib/masmx86/inffas32.asm	/^L_test_for_second_level_length:$/;"	l
L_test_for_second_level_length_mmx	src/contrib/masmx86/inffas32.asm	/^L_test_for_second_level_length_mmx:$/;"	l
L_update_hold	src/contrib/masmx86/inffas32.asm	/^L_update_hold:$/;"	l
L_update_next_in	src/contrib/masmx86/inffas32.asm	/^L_update_next_in:$/;"	l
L_update_stream_state	src/contrib/masmx86/inffas32.asm	/^L_update_stream_state:$/;"	l
L_use_mmx	src/contrib/masmx86/inffas32.asm	/^L_use_mmx:$/;"	l
L_while_test	src/contrib/masmx64/inffasx64.asm	/^L_while_test:$/;"	l
L_while_test	src/contrib/masmx86/inffas32.asm	/^L_while_test:$/;"	l
L_while_test_mmx	src/contrib/masmx86/inffas32.asm	/^L_while_test_mmx:$/;"	l
L_wrap_around_window	src/contrib/masmx64/inffasx64.asm	/^L_wrap_around_window:$/;"	l
L_wrap_around_window	src/contrib/masmx86/inffas32.asm	/^L_wrap_around_window:$/;"	l
L_wrap_around_window_mmx	src/contrib/masmx86/inffas32.asm	/^L_wrap_around_window_mmx:$/;"	l
LastMatchGood	src/contrib/amd64/amd64-match.S	/^LastMatchGood:$/;"	l
LastMatchGood	src/contrib/asm686/match.S	/^LastMatchGood:$/;"	l
LastMatchGood	src/contrib/gcc_gvmat64/gvmat64.S	/^LastMatchGood:$/;"	l
LastMatchGood	src/contrib/masmx64/gvmat64.asm	/^LastMatchGood:$/;"	l
LastMatchGood	src/contrib/masmx86/match686.asm	/^LastMatchGood:$/;"	l
LeaveLoopCmps	src/contrib/amd64/amd64-match.S	/^LeaveLoopCmps:	add	%rax, %rdx$/;"	l
LeaveLoopCmps	src/contrib/amd64/amd64-match.S	/^LeaveLoopCmps:	bsf	%rax, %rax \/* find the first non-zero bit *\/$/;"	l
LeaveLoopCmps	src/contrib/amd64/amd64-match.S	/^LeaveLoopCmps:	testl   $0xFFFFFFFF, %eax \/* Check the first 4 bytes *\/$/;"	l
LeaveLoopCmps	src/contrib/asm686/match.S	/^LeaveLoopCmps:	testl	$0x0000FFFF, %eax$/;"	l
LeaveLoopCmps	src/contrib/gcc_gvmat64/gvmat64.S	/^LeaveLoopCmps:$/;"	l
LeaveLoopCmps	src/contrib/masmx64/gvmat64.asm	/^LeaveLoopCmps:$/;"	l
LeaveLoopCmps	src/contrib/masmx86/match686.asm	/^LeaveLoopCmps:  test    eax, 0000FFFFh$/;"	l
LeaveLoopCmps16	src/contrib/amd64/amd64-match.S	/^LeaveLoopCmps16:$/;"	l
LeaveLoopCmps16	src/contrib/gcc_gvmat64/gvmat64.S	/^LeaveLoopCmps16: add rdx,8$/;"	l
LeaveLoopCmps16	src/contrib/masmx64/gvmat64.asm	/^LeaveLoopCmps16: add rdx,8$/;"	l
LeaveLoopCmps4	src/contrib/asm686/match.S	/^LeaveLoopCmps4:	addl	$4, %edx$/;"	l
LeaveLoopCmps4	src/contrib/masmx86/match686.asm	/^LeaveLoopCmps4: add edx, 4$/;"	l
LeaveLoopCmps8	src/contrib/amd64/amd64-match.S	/^LeaveLoopCmps8:$/;"	l
LeaveLoopCmps8	src/contrib/gcc_gvmat64/gvmat64.S	/^LeaveLoopCmps8: add rdx,8$/;"	l
LeaveLoopCmps8	src/contrib/masmx64/gvmat64.asm	/^LeaveLoopCmps8: add rdx,8$/;"	l
LeaveNow	src/contrib/amd64/amd64-match.S	/^LeaveNow:$/;"	l
LeaveNow	src/contrib/asm686/match.S	/^LeaveNow:$/;"	l
LeaveNow	src/contrib/gcc_gvmat64/gvmat64.S	/^LeaveNow:$/;"	l
LeaveNow	src/contrib/masmx64/gvmat64.asm	/^LeaveNow:$/;"	l
LeaveNow	src/contrib/masmx86/match686.asm	/^LeaveNow:$/;"	l
Len	src/deflate.h	79;"	d
LenLower	src/contrib/amd64/amd64-match.S	/^LenLower:	subb	$1, %al$/;"	l
LenLower	src/contrib/asm686/match.S	/^LenLower:	subb	$1, %al$/;"	l
LenLower	src/contrib/gcc_gvmat64/gvmat64.S	/^LenLower:		$/;"	l
LenLower	src/contrib/masmx64/gvmat64.asm	/^LenLower:   sub al, 1$/;"	l
LenLower	src/contrib/masmx86/match686.asm	/^LenLower:   sub al, 1$/;"	l
LenLower32	src/contrib/gcc_gvmat64/gvmat64.S	/^LenLower32:$/;"	l
LenLower32	src/contrib/masmx64/gvmat64.asm	/^LenLower32:$/;"	l
LenMaximum	src/contrib/amd64/amd64-match.S	/^LenMaximum:$/;"	l
LenMaximum	src/contrib/asm686/match.S	/^LenMaximum:	movl	deflatestate(%esp), %edx$/;"	l
LenMaximum	src/contrib/gcc_gvmat64/gvmat64.S	/^LenMaximum:$/;"	l
LenMaximum	src/contrib/masmx64/gvmat64.asm	/^LenMaximum:$/;"	l
LenMaximum	src/contrib/masmx86/match686.asm	/^LenMaximum: mov edx, [deflatestate]$/;"	l
Length	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override long Length$/;"	p	class:DotZLib.GZipStream	access:public
LimitPositive	src/contrib/asm686/match.S	/^LimitPositive:$/;"	l
LimitPositive	src/contrib/masmx86/match686.asm	/^LimitPositive:$/;"	l
LoadCentralDirectoryRecord	src/contrib/minizip/zip.c	/^int LoadCentralDirectoryRecord(zip64_internal* pziinit)$/;"	f	signature:(zip64_internal* pziinit)
LocalVarsSize	src/contrib/amd64/amd64-match.S	/^#define	LocalVarsSize	(112)$/;"	d
LocalVarsSize	src/contrib/asm686/match.S	/^#define	LocalVarsSize		(36)$/;"	d
LocalVarsSize	src/contrib/gcc_gvmat64/gvmat64.S	/^#define LocalVarsSize 96$/;"	d
LocalVarsSize	src/contrib/masmx64/gvmat64.asm	/^ LocalVarsSize   equ 72$/;"	d
LocalVarsSize	src/contrib/masmx86/match686.asm	/^LocalVarsSize   equ 36$/;"	d
LongerMatch	src/contrib/amd64/amd64-match.S	/^LongerMatch:$/;"	l
LongerMatch	src/contrib/asm686/match.S	/^LongerMatch:	movl	nicematch(%esp), %ebx$/;"	l
LongerMatch	src/contrib/gcc_gvmat64/gvmat64.S	/^LongerMatch:$/;"	l
LongerMatch	src/contrib/masmx64/gvmat64.asm	/^LongerMatch:$/;"	l
LongerMatch	src/contrib/masmx86/match686.asm	/^LongerMatch:    mov ebx, [nicematch]$/;"	l
Lookahead	src/contrib/gcc_gvmat64/gvmat64.S	/^#define Lookahead        [ rcx + dsLookahead] \/\/; 0ffffffffh on infozip$/;"	d
Lookahead	src/contrib/masmx64/gvmat64.asm	/^Lookahead       equ [ rcx + dsLookahead] ; 0ffffffffh on infozip$/;"	d
LookaheadLess	src/contrib/amd64/amd64-match.S	/^LookaheadLess:	movl	%ebx, %nicematch$/;"	l
LookaheadLess	src/contrib/asm686/match.S	/^LookaheadLess:	movl	%ebx, nicematch(%esp)$/;"	l
LookaheadLess	src/contrib/masmx86/match686.asm	/^LookaheadLess:  mov [nicematch], ebx$/;"	l
LookaheadRet	src/contrib/amd64/amd64-match.S	/^LookaheadRet:$/;"	l
LookaheadRet	src/contrib/asm686/match.S	/^LookaheadRet:$/;"	l
LookaheadRet	src/contrib/masmx86/match686.asm	/^LookaheadRet:$/;"	l
LookupLoop	src/contrib/amd64/amd64-match.S	/^LookupLoop:$/;"	l
LookupLoop	src/contrib/asm686/match.S	/^LookupLoop:$/;"	l
LookupLoop	src/contrib/gcc_gvmat64/gvmat64.S	/^LookupLoop:$/;"	l
LookupLoop	src/contrib/masmx64/gvmat64.asm	/^LookupLoop:$/;"	l
LookupLoop	src/contrib/masmx86/match686.asm	/^LookupLoop:$/;"	l
LookupLoop1	src/contrib/gcc_gvmat64/gvmat64.S	/^LookupLoop1:$/;"	l
LookupLoop1	src/contrib/masmx64/gvmat64.asm	/^LookupLoop1:$/;"	l
LookupLoop2	src/contrib/gcc_gvmat64/gvmat64.S	/^LookupLoop2:$/;"	l
LookupLoop2	src/contrib/masmx64/gvmat64.asm	/^LookupLoop2:$/;"	l
LookupLoop4	src/contrib/gcc_gvmat64/gvmat64.S	/^LookupLoop4:$/;"	l
LookupLoop4	src/contrib/masmx64/gvmat64.asm	/^LookupLoop4:$/;"	l
LookupLoopIsZero	src/contrib/gcc_gvmat64/gvmat64.S	/^LookupLoopIsZero:$/;"	l
LookupLoopIsZero	src/contrib/masmx64/gvmat64.asm	/^LookupLoopIsZero:$/;"	l
LoopCmps	src/contrib/amd64/amd64-match.S	/^LoopCmps:$/;"	l
LoopCmps	src/contrib/asm686/match.S	/^LoopCmps:$/;"	l
LoopCmps	src/contrib/gcc_gvmat64/gvmat64.S	/^LoopCmps:$/;"	l
LoopCmps	src/contrib/masmx64/gvmat64.asm	/^LoopCmps:$/;"	l
LoopCmps	src/contrib/masmx86/match686.asm	/^LoopCmps:$/;"	l
LoopEntry	src/contrib/amd64/amd64-match.S	/^LoopEntry:	cmpw	-1(%windowbestlen, %curmatch), %scanendw$/;"	l
LoopEntry	src/contrib/asm686/match.S	/^LoopEntry:	movzwl	-1(%esi,%ecx), %eax$/;"	l
LoopEntry	src/contrib/gcc_gvmat64/gvmat64.S	/^LoopEntry:$/;"	l
LoopEntry	src/contrib/masmx64/gvmat64.asm	/^LoopEntry:$/;"	l
LoopEntry	src/contrib/masmx86/match686.asm	/^LoopEntry:  movzx   eax, word ptr [esi + ecx - 1]$/;"	l
LoopEntry1	src/contrib/gcc_gvmat64/gvmat64.S	/^LoopEntry1:$/;"	l
LoopEntry1	src/contrib/masmx64/gvmat64.asm	/^LoopEntry1:$/;"	l
LoopEntry2	src/contrib/gcc_gvmat64/gvmat64.S	/^LoopEntry2:$/;"	l
LoopEntry2	src/contrib/masmx64/gvmat64.asm	/^LoopEntry2:$/;"	l
LoopEntry4	src/contrib/gcc_gvmat64/gvmat64.S	/^LoopEntry4:$/;"	l
LoopEntry4	src/contrib/masmx64/gvmat64.asm	/^LoopEntry4:$/;"	l
MAKEULONG64	src/contrib/minizip/zip.c	77;"	d	file:
MARGIN	src/examples/fitblk.c	124;"	d	file:
MATCH	src/inflate.h	/^            MATCH,      \/* o: waiting for output space to copy string *\/$/;"	e	enum:__anon19
MAXBITS	src/contrib/blast/blast.c	33;"	d	file:
MAXBITS	src/contrib/infback9/inftree9.c	9;"	d	file:
MAXBITS	src/contrib/puff/puff.c	91;"	d	file:
MAXBITS	src/inftrees.c	9;"	d	file:
MAXCODES	src/contrib/puff/puff.c	94;"	d	file:
MAXDCODES	src/contrib/puff/puff.c	93;"	d	file:
MAXFILENAME	src/contrib/minizip/miniunz.c	62;"	d	file:
MAXFILENAME	src/contrib/minizip/minizip.c	71;"	d	file:
MAXLCODES	src/contrib/puff/puff.c	92;"	d	file:
MAXSEG_64K	src/zconf.h	182;"	d
MAXSEG_64K	zconf.h	182;"	d
MAXU32	src/contrib/minizip/ioapi.h	95;"	d
MAXWIN	src/contrib/blast/blast.c	34;"	d	file:
MAX_BITS	src/deflate.h	48;"	d
MAX_BL_BITS	src/trees.c	47;"	d	file:
MAX_DIST	src/deflate.h	286;"	d
MAX_MATCH	src/contrib/amd64/amd64-match.S	/^#define	MAX_MATCH	(258)$/;"	d
MAX_MATCH	src/contrib/asm686/match.S	/^#define	MAX_MATCH	(258)$/;"	d
MAX_MATCH	src/contrib/gcc_gvmat64/gvmat64.S	/^#define    MAX_MATCH              258$/;"	d
MAX_MATCH	src/contrib/masmx64/gvmat64.asm	/^    MAX_MATCH           equ     258$/;"	d
MAX_MATCH	src/contrib/masmx86/match686.asm	/^    MAX_MATCH           equ     258$/;"	d
MAX_MATCH	src/contrib/masmx86/match686.asm	/^MAX_MATCH       equ     258$/;"	d
MAX_MATCH	src/zutil.h	76;"	d
MAX_MATCH	zutil.h	76;"	d
MAX_MATCH_8	src/contrib/amd64/amd64-match.S	/^#define	MAX_MATCH_8	((MAX_MATCH + 7) & ~7)$/;"	d
MAX_MATCH_8	src/contrib/asm686/match.S	/^#define	MAX_MATCH_8	((MAX_MATCH + 7) & ~7)$/;"	d
MAX_MATCH_8_	src/contrib/masmx86/match686.asm	/^MAX_MATCH_8_     equ     ((MAX_MATCH + 7) AND 0FFF0h)$/;"	d
MAX_MEM_LEVEL	src/zconf.h	235;"	d
MAX_MEM_LEVEL	src/zconf.h	237;"	d
MAX_MEM_LEVEL	zconf.h	235;"	d
MAX_MEM_LEVEL	zconf.h	237;"	d
MAX_NAME_LEN	src/test/minigzip.c	136;"	d	file:
MAX_PTR	src/zutil.c	202;"	d	file:
MAX_STORE	src/examples/gzlog.c	261;"	d	file:
MAX_WBITS	src/zconf.h	247;"	d
MAX_WBITS	zconf.h	247;"	d
MEM	src/inflate.h	/^    MEM,        \/* got an inflate() memory error -- remain here until reset *\/$/;"	e	enum:__anon19
MIN_LOOKAHEAD	src/contrib/amd64/amd64-match.S	/^#define	MIN_LOOKAHEAD	(MAX_MATCH + MIN_MATCH + 1)$/;"	d
MIN_LOOKAHEAD	src/contrib/asm686/match.S	/^#define	MIN_LOOKAHEAD	(MAX_MATCH + MIN_MATCH + 1)$/;"	d
MIN_LOOKAHEAD	src/contrib/gcc_gvmat64/gvmat64.S	/^#define    MIN_LOOKAHEAD          (MAX_MATCH+MIN_MATCH+1)$/;"	d
MIN_LOOKAHEAD	src/contrib/masmx64/gvmat64.asm	/^    MIN_LOOKAHEAD       equ     (MAX_MATCH+MIN_MATCH+1)$/;"	d
MIN_LOOKAHEAD	src/contrib/masmx86/match686.asm	/^    MIN_LOOKAHEAD       equ     (MAX_MATCH+MIN_MATCH+1)$/;"	d
MIN_LOOKAHEAD	src/contrib/masmx86/match686.asm	/^MIN_LOOKAHEAD   equ     (MAX_MATCH + MIN_MATCH + 1)$/;"	d
MIN_LOOKAHEAD	src/deflate.h	281;"	d
MIN_MATCH	src/contrib/amd64/amd64-match.S	/^#define	MIN_MATCH	(3)$/;"	d
MIN_MATCH	src/contrib/asm686/match.S	/^#define	MIN_MATCH	(3)$/;"	d
MIN_MATCH	src/contrib/gcc_gvmat64/gvmat64.S	/^#define    MIN_MATCH              3$/;"	d
MIN_MATCH	src/contrib/masmx64/gvmat64.asm	/^    MIN_MATCH           equ     3$/;"	d
MIN_MATCH	src/contrib/masmx86/match686.asm	/^    MIN_MATCH           equ     3$/;"	d
MIN_MATCH	src/contrib/masmx86/match686.asm	/^MIN_MATCH       equ     3$/;"	d
MIN_MATCH	src/zutil.h	75;"	d
MIN_MATCH	zutil.h	75;"	d
MOD	src/adler32.c	40;"	d	file:
MOD	src/adler32.c	59;"	d	file:
MOD28	src/adler32.c	35;"	d	file:
MOD28	src/adler32.c	60;"	d	file:
MOD63	src/adler32.c	45;"	d	file:
MOD63	src/adler32.c	61;"	d	file:
MSDOS	src/zconf.h	156;"	d
MSDOS	zconf.h	156;"	d
MY_ZCALLOC	src/zutil.c	194;"	d	file:
MY_ZCALLOC	src/zutil.c	272;"	d	file:
MyDoMinus64	src/contrib/testzlib/testzlib.c	/^void MyDoMinus64(LARGE_INTEGER *R,LARGE_INTEGER A,LARGE_INTEGER B)$/;"	f	signature:(LARGE_INTEGER *R,LARGE_INTEGER A,LARGE_INTEGER B)
MySetFilePointerEx	src/contrib/minizip/iowin32.c	/^static BOOL MySetFilePointerEx(HANDLE hFile, LARGE_INTEGER pos, LARGE_INTEGER *newPos,  DWORD dwMoveMethod)$/;"	f	file:	signature:(HANDLE hFile, LARGE_INTEGER pos, LARGE_INTEGER *newPos, DWORD dwMoveMethod)
NAME	src/inflate.h	/^    NAME,       \/* i: waiting for end of file name (gzip) *\/$/;"	e	enum:__anon19
NAME_STATE	src/deflate.h	56;"	d
NEEDBITS	src/contrib/infback9/infback9.c	150;"	d	file:
NEEDBITS	src/infback.c	183;"	d	file:
NEEDBITS	src/inflate.c	499;"	d	file:
NEXT	src/examples/gun.c	155;"	d	file:
NIL	src/contrib/puff/puff.h	29;"	d
NIL	src/deflate.c	104;"	d	file:
NMAX	src/adler32.c	15;"	d	file:
NOUNCRYPT	src/contrib/minizip/unzip.c	72;"	d	file:
NO_DUMMY_DECL	src/zconf.h	229;"	d
NO_DUMMY_DECL	zconf.h	229;"	d
NO_GZCOMPRESS	src/gzguts.h	46;"	d
NO_MEMCPY	src/zutil.h	190;"	d
NO_MEMCPY	src/zutil.h	197;"	d
NO_MEMCPY	zutil.h	190;"	d
NO_MEMCPY	zutil.h	197;"	d
NO_OP	src/examples/gzlog.c	272;"	d	file:
NO_vsnprintf	src/gzguts.h	71;"	d
NO_vsnprintf	src/gzguts.h	74;"	d
NO_vsnprintf	src/gzguts.h	85;"	d
NO_vsnprintf	src/gzguts.h	88;"	d
NO_vsnprintf	src/gzguts.h	91;"	d
NO_vsnprintf	src/gzguts.h	94;"	d
NbStack	src/contrib/masmx86/match686.asm	/^    NbStack         equ     76$/;"	d
NbStackAdd	src/contrib/masmx86/match686.asm	/^    NbStackAdd      equ     (NbStack-24)$/;"	d
None	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        None = 0,$/;"	e	enum:DotZLib.CompressLevel	file:
None	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        None,  Partial,  Sync,  Full,  Finish,  Block$/;"	e	enum:DotZLib.FlushTypes	file:
OBJ1	src/contrib/delphi/zlibd32.mak	/^OBJ1 = adler32.obj compress.obj crc32.obj deflate.obj gzclose.obj gzlib.obj gzread.obj$/;"	m
OBJ1	src/contrib/pascal/zlibd32.mak	/^OBJ1 = adler32.obj compress.obj crc32.obj deflate.obj gzclose.obj gzlib.obj gzread.obj$/;"	m
OBJ2	src/contrib/delphi/zlibd32.mak	/^OBJ2 = gzwrite.obj infback.obj inffast.obj inflate.obj inftrees.obj trees.obj uncompr.obj zutil.obj$/;"	m
OBJ2	src/contrib/pascal/zlibd32.mak	/^OBJ2 = gzwrite.obj infback.obj inffast.obj inflate.obj inftrees.obj trees.obj uncompr.obj zutil.obj$/;"	m
OBJP1	src/contrib/delphi/zlibd32.mak	/^OBJP1 = +adler32.obj+compress.obj+crc32.obj+deflate.obj+gzclose.obj+gzlib.obj+gzread.obj$/;"	m
OBJP1	src/contrib/pascal/zlibd32.mak	/^OBJP1 = +adler32.obj+compress.obj+crc32.obj+deflate.obj+gzclose.obj+gzlib.obj+gzread.obj$/;"	m
OBJP2	src/contrib/delphi/zlibd32.mak	/^OBJP2 = +gzwrite.obj+infback.obj+inffast.obj+inflate.obj+inftrees.obj+trees.obj+uncompr.obj+zutil.obj$/;"	m
OBJP2	src/contrib/pascal/zlibd32.mak	/^OBJP2 = +gzwrite.obj+infback.obj+inffast.obj+inflate.obj+inftrees.obj+trees.obj+uncompr.obj+zutil.obj$/;"	m
OBJS	src/watcom/watcom_f.mak	/^OBJS =      adler32.obj  compress.obj crc32.obj   deflate.obj    &$/;"	m
OBJS	src/watcom/watcom_l.mak	/^OBJS =      adler32.obj  compress.obj crc32.obj   deflate.obj    &$/;"	m
OF	src/contrib/minizip/ioapi.h	/^typedef ZPOS64_T (ZCALLBACK *tell64_file_func)    OF((voidpf opaque, voidpf stream));$/;"	t
OF	src/contrib/minizip/ioapi.h	/^typedef uLong    (ZCALLBACK *read_file_func)      OF((voidpf opaque, voidpf stream, void* buf, uLong size));$/;"	t
OF	src/contrib/minizip/ioapi.h	/^typedef uLong    (ZCALLBACK *write_file_func)     OF((voidpf opaque, voidpf stream, const void* buf, uLong size));$/;"	t
OF	src/contrib/minizip/ioapi.h	/^typedef voidpf   (ZCALLBACK *open64_file_func)    OF((voidpf opaque, const void* filename, int mode));$/;"	t
OF	src/contrib/minizip/ioapi.h	/^typedef voidpf   (ZCALLBACK *open_file_func)      OF((voidpf opaque, const char* filename, int mode));$/;"	t
OF	src/zconf.h	267;"	d
OF	src/zconf.h	269;"	d
OF	zconf.h	267;"	d
OF	zconf.h	269;"	d
OFF	src/inffast.c	29;"	d	file:
OFF	src/inffast.c	32;"	d	file:
OFILES	src/nintendods/Makefile	/^export OFILES	:=	$(addsuffix .o,$(BINFILES)) \\$/;"	m
OS	src/inflate.h	/^    OS,         \/* i: waiting for extra flags and operating system (gzip) *\/$/;"	e	enum:__anon19
OS2	src/zconf.h	159;"	d
OS2	zconf.h	159;"	d
OS_CODE	src/zutil.h	101;"	d
OS_CODE	src/zutil.h	105;"	d
OS_CODE	src/zutil.h	111;"	d
OS_CODE	src/zutil.h	115;"	d
OS_CODE	src/zutil.h	122;"	d
OS_CODE	src/zutil.h	135;"	d
OS_CODE	src/zutil.h	140;"	d
OS_CODE	src/zutil.h	145;"	d
OS_CODE	src/zutil.h	180;"	d
OS_CODE	src/zutil.h	84;"	d
OS_CODE	zutil.h	101;"	d
OS_CODE	zutil.h	105;"	d
OS_CODE	zutil.h	111;"	d
OS_CODE	zutil.h	115;"	d
OS_CODE	zutil.h	122;"	d
OS_CODE	zutil.h	135;"	d
OS_CODE	zutil.h	140;"	d
OS_CODE	zutil.h	145;"	d
OS_CODE	zutil.h	180;"	d
OS_CODE	zutil.h	84;"	d
OUTPUT	src/nintendods/Makefile	/^export OUTPUT	:=	$(CURDIR)\/lib\/libz.a$/;"	m
OnDataAvailable	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        protected void OnDataAvailable()$/;"	m	class:DotZLib.CodecBase	access:protected	signature:()
PAD_AVAIL_IN	src/contrib/inflate86/inffas86.c	101;"	d	file:
PAD_AVAIL_IN	src/contrib/masmx64/inffas8664.c	117;"	d	file:
PAD_AVAIL_OUT	src/contrib/inflate86/inffas86.c	102;"	d	file:
PAD_AVAIL_OUT	src/contrib/masmx64/inffas8664.c	118;"	d	file:
PATIENCE	src/examples/gzlog.c	258;"	d	file:
PIECE	src/examples/gun.c	77;"	d	file:
PRESET_DICT	src/zutil.h	79;"	d
PRESET_DICT	zutil.h	79;"	d
PULL	src/contrib/infback9/infback9.c	125;"	d	file:
PULL	src/infback.c	158;"	d	file:
PULL2	src/examples/gzlog.c	278;"	d	file:
PULL4	src/examples/gzlog.c	279;"	d	file:
PULL8	src/examples/gzlog.c	280;"	d	file:
PULLBYTE	src/contrib/infback9/infback9.c	139;"	d	file:
PULLBYTE	src/infback.c	172;"	d	file:
PULLBYTE	src/inflate.c	489;"	d	file:
PUP	src/inffast.c	30;"	d	file:
PUP	src/inffast.c	33;"	d	file:
PUT2	src/examples/gzlog.c	283;"	d	file:
PUT4	src/examples/gzlog.c	284;"	d	file:
PUT8	src/examples/gzlog.c	285;"	d	file:
Partial	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        None,  Partial,  Sync,  Full,  Finish,  Block$/;"	e	enum:DotZLib.FlushTypes	file:
Pos	src/deflate.h	/^typedef ush Pos;$/;"	t
Posf	src/deflate.h	/^typedef Pos FAR Posf;$/;"	t
Position	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override long Position$/;"	p	class:DotZLib.GZipStream	access:public
Progress	src/contrib/delphi/ZLib.pas	/^    procedure Progress(Sender: TObject); dynamic;$/;"	p
Put	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        public bool Put(byte b)$/;"	m	class:DotZLib.CircularBuffer	access:public	signature:(byte b)
Put	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        public int Put(byte[] source, int offset, int count)$/;"	m	class:DotZLib.CircularBuffer	access:public	signature:(byte[] source, int offset, int count)
RAND_HEAD_LEN	src/contrib/minizip/crypt.h	84;"	d
RANK	src/deflate.c	159;"	d	file:
RAWLEN	src/examples/fitblk.c	68;"	d	file:
READ_16	src/contrib/minizip/mztools.c	15;"	d	file:
READ_32	src/contrib/minizip/mztools.c	16;"	d	file:
READ_8	src/contrib/minizip/mztools.c	14;"	d	file:
REGTYPE	src/contrib/untgz/untgz.c	42;"	d	file:
REPLACE_OP	src/examples/gzlog.c	275;"	d	file:
REPZ_11_138	src/trees.c	59;"	d	file:
REPZ_3_10	src/trees.c	56;"	d	file:
REP_3_6	src/trees.c	53;"	d	file:
RESTORE	src/infback.c	139;"	d	file:
RESTORE	src/inflate.c	470;"	d	file:
ROOM	src/contrib/infback9/infback9.c	177;"	d	file:
ROOM	src/infback.c	210;"	d	file:
RUN_TIME_MMX	src/contrib/inflate86/inffast.S	/^#define RUN_TIME_MMX$/;"	d
Read	src/contrib/delphi/ZLib.pas	/^    function Read(var Buffer; Count: Longint): Longint; override;$/;"	f
Read	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override int Read(byte[] buffer, int offset, int count)$/;"	m	class:DotZLib.GZipStream	access:public	signature:(byte[] buffer, int offset, int count)
ReadByte	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override int ReadByte()$/;"	m	class:DotZLib.GZipStream	access:public	signature:()
ReadFileMemory	src/contrib/testzlib/testzlib.c	/^int ReadFileMemory(const char* filename,long* plFileSize,unsigned char** pFilePtr)$/;"	f	signature:(const char* filename,long* plFileSize,unsigned char** pFilePtr)
Reset	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public void Reset() { _current = 0; }$/;"	m	class:DotZLib.ChecksumGeneratorBase	access:public	signature:()
Reset	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        void Reset();$/;"	m	interface:DotZLib.ChecksumGenerator	access:public	signature:()
SEEK_CUR	src/contrib/minizip/zip.c	80;"	d	file:
SEEK_CUR	src/zconf.h	476;"	d
SEEK_CUR	zconf.h	476;"	d
SEEK_END	src/contrib/minizip/zip.c	84;"	d	file:
SEEK_END	src/zconf.h	477;"	d
SEEK_END	zconf.h	477;"	d
SEEK_SET	src/contrib/minizip/zip.c	88;"	d	file:
SEEK_SET	src/zconf.h	475;"	d
SEEK_SET	zconf.h	475;"	d
SEPARATOR	src/trees.c	324;"	d	file:
SET_BINARY_MODE	src/contrib/iostream2/zstream.h	35;"	d
SET_BINARY_MODE	src/contrib/iostream2/zstream.h	37;"	d
SET_BINARY_MODE	src/contrib/puff/pufftest.c	26;"	d	file:
SET_BINARY_MODE	src/contrib/puff/pufftest.c	28;"	d	file:
SET_BINARY_MODE	src/examples/zpipe.c	23;"	d	file:
SET_BINARY_MODE	src/examples/zpipe.c	25;"	d	file:
SET_BINARY_MODE	src/test/minigzip.c	38;"	d	file:
SET_BINARY_MODE	src/test/minigzip.c	40;"	d	file:
SFILES	src/nintendods/Makefile	/^SFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)\/*.s)))$/;"	m
SHORTNAMESIZE	src/contrib/untgz/untgz.c	66;"	d	file:
SIZE	src/examples/gun.c	76;"	d	file:
SIZECENTRALDIRITEM	src/contrib/minizip/unzip.c	118;"	d	file:
SIZECENTRALHEADER	src/contrib/minizip/zip.c	112;"	d	file:
SIZEDATA_INDATABLOCK	src/contrib/minizip/zip.c	101;"	d	file:
SIZEZIPLOCALHEADER	src/contrib/minizip/unzip.c	119;"	d	file:
SMALLBUFSIZE	src/contrib/iostream3/zfstream.cc	16;"	d	file:
SMALLEST	src/trees.c	424;"	d	file:
SMALL_MEDIUM	src/zconf.h	290;"	d
SMALL_MEDIUM	src/zconf.h	299;"	d
SMALL_MEDIUM	zconf.h	290;"	d
SMALL_MEDIUM	zconf.h	299;"	d
SOURCES	src/nintendods/Makefile	/^SOURCES		:=	..\/..\/$/;"	m
SPAN	src/examples/zran.c	62;"	d	file:
STATIC_TREES	src/zutil.h	71;"	d
STATIC_TREES	zutil.h	71;"	d
STDC	src/zconf.h	190;"	d
STDC	src/zconf.h	199;"	d
STDC	src/zconf.h	202;"	d
STDC	src/zconf.h	205;"	d
STDC	src/zconf.h	208;"	d
STDC	src/zconf.h	212;"	d
STDC	zconf.h	190;"	d
STDC	zconf.h	199;"	d
STDC	zconf.h	202;"	d
STDC	zconf.h	205;"	d
STDC	zconf.h	208;"	d
STDC	zconf.h	212;"	d
STDC99	src/zconf.h	194;"	d
STDC99	zconf.h	194;"	d
STORED	src/contrib/infback9/inflate9.h	/^        STORED,     \/* i: waiting for stored size (length and complement) *\/$/;"	e	enum:__anon14
STORED	src/inflate.h	/^        STORED,     \/* i: waiting for stored size (length and complement) *\/$/;"	e	enum:__anon19
STORED_BLOCK	src/zutil.h	70;"	d
STORED_BLOCK	zutil.h	70;"	d
STRCMPCASENOSENTIVEFUNCTION	src/contrib/minizip/unzip.c	378;"	d	file:
SUFFIX_LEN	src/test/minigzip.c	133;"	d	file:
SYMTYPE	src/contrib/untgz/untgz.c	45;"	d	file:
SYNC	src/inflate.h	/^    SYNC        \/* looking for synchronization bytes to restart inflate() *\/$/;"	e	enum:__anon19
SYS16BIT	src/zconf.h	172;"	d
SYS16BIT	zconf.h	172;"	d
Seek	src/contrib/delphi/ZLib.pas	/^    function Seek(Offset: Longint; Origin: Word): Longint; override;$/;"	f
Seek	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override long Seek(long offset, SeekOrigin origin)$/;"	m	class:DotZLib.GZipStream	access:public	signature:(long offset, SeekOrigin origin)
SetLength	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override void SetLength(long value)$/;"	m	class:DotZLib.GZipStream	access:public	signature:(long value)
SinglePutGet	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public void SinglePutGet()$/;"	m	class:DotZLibTests.CircBufferTests	access:public	signature:()
Size	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        public int Size { get { return _size; } }$/;"	p	class:DotZLib.CircularBuffer	access:public
SizeOfOffset	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public int SizeOfOffset { get { return bitSize((_flags >> 6) & 3); } }$/;"	p	class:DotZLib.Info	access:public
SizeOfPointer	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public int SizeOfPointer { get { return bitSize((_flags >> 4) & 3); } }$/;"	p	class:DotZLib.Info	access:public
SizeOfUInt	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public int SizeOfUInt { get { return bitSize(_flags & 3); } }$/;"	p	class:DotZLib.Info	access:public
SizeOfULong	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public int SizeOfULong { get { return bitSize((_flags >> 2) & 3); } }$/;"	p	class:DotZLib.Info	access:public
StripComments	src/zlib2ansi	/^sub StripComments$/;"	s
Sync	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        None,  Partial,  Sync,  Full,  Finish,  Block$/;"	e	enum:DotZLib.FlushTypes	file:
TABLE	src/contrib/infback9/inflate9.h	/^        TABLE,      \/* i: waiting for dynamic block table lengths *\/$/;"	e	enum:__anon14
TABLE	src/inflate.h	/^        TABLE,      \/* i: waiting for dynamic block table lengths *\/$/;"	e	enum:__anon19
TARGET	src/nintendods/Makefile	/^TARGET		:=	$(shell basename $(CURDIR))$/;"	m
TBLS	src/crc32.c	44;"	d	file:
TBLS	src/crc32.c	46;"	d	file:
TCompressionStream.Create	src/contrib/delphi/ZLib.pas	/^constructor TCompressionStream.Create(CompressionLevel: TCompressionLevel;$/;"	p
TCompressionStream.Destroy	src/contrib/delphi/ZLib.pas	/^destructor TCompressionStream.Destroy;$/;"	p
TCompressionStream.GetCompressionRate	src/contrib/delphi/ZLib.pas	/^function TCompressionStream.GetCompressionRate: Single;$/;"	f
TCompressionStream.Read	src/contrib/delphi/ZLib.pas	/^function TCompressionStream.Read(var Buffer; Count: Longint): Longint;$/;"	f
TCompressionStream.Seek	src/contrib/delphi/ZLib.pas	/^function TCompressionStream.Seek(Offset: Longint; Origin: Word): Longint;$/;"	f
TCompressionStream.Write	src/contrib/delphi/ZLib.pas	/^function TCompressionStream.Write(const Buffer; Count: Longint): Longint;$/;"	f
TCustomZLibStream.Create	src/contrib/delphi/ZLib.pas	/^constructor TCustomZLibStream.Create(Strm: TStream);$/;"	p
TCustomZLibStream.Progress	src/contrib/delphi/ZLib.pas	/^procedure TCustomZLibStream.Progress(Sender: TObject);$/;"	p
TDecompressionStream.Create	src/contrib/delphi/ZLib.pas	/^constructor TDecompressionStream.Create(Source: TStream);$/;"	p
TDecompressionStream.Destroy	src/contrib/delphi/ZLib.pas	/^destructor TDecompressionStream.Destroy;$/;"	p
TDecompressionStream.Read	src/contrib/delphi/ZLib.pas	/^function TDecompressionStream.Read(var Buffer; Count: Longint): Longint;$/;"	f
TDecompressionStream.Seek	src/contrib/delphi/ZLib.pas	/^function TDecompressionStream.Seek(Offset: Longint; Origin: Word): Longint;$/;"	f
TDecompressionStream.Write	src/contrib/delphi/ZLib.pas	/^function TDecompressionStream.Write(const Buffer; Count: Longint): Longint;$/;"	f
TESTFILE	src/test/example.c	17;"	d	file:
TESTFILE	src/test/example.c	19;"	d	file:
TGZ_EXTRACT	src/contrib/untgz/untgz.c	/^enum { TGZ_EXTRACT, TGZ_LIST, TGZ_INVALID };$/;"	e	enum:__anon15	file:
TGZ_INVALID	src/contrib/untgz/untgz.c	/^enum { TGZ_EXTRACT, TGZ_LIST, TGZ_INVALID };$/;"	e	enum:__anon15	file:
TGZ_LIST	src/contrib/untgz/untgz.c	/^enum { TGZ_EXTRACT, TGZ_LIST, TGZ_INVALID };$/;"	e	enum:__anon15	file:
TGZfname	src/contrib/untgz/untgz.c	/^char *TGZfname          OF((const char *));$/;"	p	file:	signature:(const char *)
TGZfname	src/contrib/untgz/untgz.c	/^char *TGZfname (const char *arcname)$/;"	f	signature:(const char *arcname)
TGZnotfound	src/contrib/untgz/untgz.c	/^void TGZnotfound        OF((const char *));$/;"	p	file:	signature:(const char *)
TGZnotfound	src/contrib/untgz/untgz.c	/^void TGZnotfound (const char *arcname)$/;"	f	signature:(const char *arcname)
TGZsuffix	src/contrib/untgz/untgz.c	/^const char *TGZsuffix[] = { "\\0", ".tar", ".tar.gz", ".taz", ".tgz", NULL };$/;"	v
TIME	src/inflate.h	/^    TIME,       \/* i: waiting for modification time (gzip) *\/$/;"	e	enum:__anon19
TOO_FAR	src/deflate.c	108;"	d	file:
TRIGGER	src/examples/gzlog.c	266;"	d	file:
TRYFREE	src/contrib/minizip/unzip.c	115;"	d	file:
TRYFREE	src/contrib/minizip/zip.c	65;"	d	file:
TRY_FREE	src/zutil.h	247;"	d
TRY_FREE	zutil.h	247;"	d
TYPE	src/contrib/infback9/inflate9.h	/^        TYPE,       \/* i: waiting for type bits, including last-flag bit *\/$/;"	e	enum:__anon14
TYPE	src/inflate.h	/^        TYPE,       \/* i: waiting for type bits, including last-flag bit *\/$/;"	e	enum:__anon19
TYPEDO	src/inflate.h	/^        TYPEDO,     \/* i: same, but skip check to exit inflate on new block *\/$/;"	e	enum:__anon19
TagunzFile__	src/contrib/minizip/unzip.h	/^typedef struct TagunzFile__ { int unused; } unzFile__;$/;"	s
TagunzFile__::unused	src/contrib/minizip/unzip.h	/^typedef struct TagunzFile__ { int unused; } unzFile__;$/;"	m	struct:TagunzFile__	access:public
TagzipFile__	src/contrib/minizip/zip.h	/^typedef struct TagzipFile__ { int unused; } zipFile__;$/;"	s
TagzipFile__::unused	src/contrib/minizip/zip.h	/^typedef struct TagzipFile__ { int unused; } zipFile__;$/;"	m	struct:TagzipFile__	access:public
Trace	src/zutil.h	224;"	d
Trace	src/zutil.h	231;"	d
Trace	zutil.h	224;"	d
Trace	zutil.h	231;"	d
Tracec	src/zutil.h	227;"	d
Tracec	src/zutil.h	234;"	d
Tracec	zutil.h	227;"	d
Tracec	zutil.h	234;"	d
Tracecv	src/zutil.h	228;"	d
Tracecv	src/zutil.h	235;"	d
Tracecv	zutil.h	228;"	d
Tracecv	zutil.h	235;"	d
Tracev	src/zutil.h	225;"	d
Tracev	src/zutil.h	232;"	d
Tracev	zutil.h	225;"	d
Tracev	zutil.h	232;"	d
Tracevv	src/zutil.h	226;"	d
Tracevv	src/zutil.h	233;"	d
Tracevv	zutil.h	226;"	d
Tracevv	zutil.h	233;"	d
UNALIGNED_OK	src/zconf.h	185;"	d
UNALIGNED_OK	zconf.h	185;"	d
UNZ_BADZIPFILE	src/contrib/minizip/unzip.h	79;"	d
UNZ_BUFSIZE	src/contrib/minizip/unzip.c	104;"	d	file:
UNZ_CRCERROR	src/contrib/minizip/unzip.h	81;"	d
UNZ_END_OF_LIST_OF_FILE	src/contrib/minizip/unzip.h	75;"	d
UNZ_EOF	src/contrib/minizip/unzip.h	77;"	d
UNZ_ERRNO	src/contrib/minizip/unzip.h	76;"	d
UNZ_INTERNALERROR	src/contrib/minizip/unzip.h	80;"	d
UNZ_MAXFILENAMEINZIP	src/contrib/minizip/unzip.c	108;"	d	file:
UNZ_OBJS	src/contrib/minizip/Makefile	/^UNZ_OBJS = miniunz.o unzip.o ioapi.o ..\/..\/libz.a$/;"	m
UNZ_OK	src/contrib/minizip/unzip.h	74;"	d
UNZ_PARAMERROR	src/contrib/minizip/unzip.h	78;"	d
UPDATE	src/inflate.c	433;"	d	file:
UPDATE	src/inflate.c	436;"	d	file:
UPDATE_HASH	src/deflate.c	167;"	d	file:
USEWIN32IOAPI	src/contrib/minizip/miniunz.c	65;"	d	file:
USEWIN32IOAPI	src/contrib/minizip/minizip.c	64;"	d	file:
Update	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public abstract void Update(byte[] data, int offset, int count);$/;"	m	class:DotZLib.ChecksumGeneratorBase	access:public	signature:(byte[] data, int offset, int count)
Update	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public override void Update(byte[] data, int offset, int count)$/;"	m	class:DotZLib.AdlerChecksum	access:public	signature:(byte[] data, int offset, int count)
Update	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public override void Update(byte[] data, int offset, int count)$/;"	m	class:DotZLib.CRC32Checksum	access:public	signature:(byte[] data, int offset, int count)
Update	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public void Update(byte[] data)$/;"	m	class:DotZLib.ChecksumGeneratorBase	access:public	signature:(byte[] data)
Update	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public void Update(string data)$/;"	m	class:DotZLib.ChecksumGeneratorBase	access:public	signature:(string data)
Update	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public void Update(string data, Encoding encoding)$/;"	m	class:DotZLib.ChecksumGeneratorBase	access:public	signature:(string data, Encoding encoding)
Update	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        void Update(byte[] data);$/;"	m	interface:DotZLib.ChecksumGenerator	access:public	signature:(byte[] data)
Update	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        void Update(byte[] data, int offset, int count);$/;"	m	interface:DotZLib.ChecksumGenerator	access:public	signature:(byte[] data, int offset, int count)
Update	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        void Update(string data);$/;"	m	interface:DotZLib.ChecksumGenerator	access:public	signature:(string data)
Update	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        void Update(string data, Encoding encoding);$/;"	m	interface:DotZLib.ChecksumGenerator	access:public	signature:(string data, Encoding encoding)
UsesAssemblyCode	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public bool UsesAssemblyCode { get { return 0 != (_flags & 0x200); } }$/;"	p	class:DotZLib.Info	access:public
Utils	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^    internal class Utils$/;"	c	namespace:DotZLibTests
VERSIONMADEBY	src/contrib/minizip/zip.c	50;"	d	file:
VPATH	src/nintendods/Makefile	/^export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)\/$(dir)) \\$/;"	m
Val	src/contrib/iostream2/zstream.h	/^    struct Val { unsigned char byte; size_t word; } val;$/;"	s	class:zstringlen	access:private
Value	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        public uint Value { get { return _current; } }$/;"	p	class:DotZLib.ChecksumGeneratorBase	access:public
Value	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        uint Value { get; }$/;"	p	interface:DotZLib.ChecksumGenerator	access:public
Version	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public static string Version { get { return zlibVersion(); } }$/;"	p	class:DotZLib.Info	access:public
WIN32	src/zconf.h	166;"	d
WIN32	zconf.h	166;"	d
WIN32FILE_IOWIN	src/contrib/minizip/iowin32.c	/^} WIN32FILE_IOWIN;$/;"	t	typeref:struct:__anon11	file:
WINDOWS	src/zconf.h	162;"	d
WINDOWS	zconf.h	162;"	d
WINSIZE	src/examples/zran.c	63;"	d	file:
WIN_INIT	src/deflate.h	291;"	d
WMask	src/contrib/gcc_gvmat64/gvmat64.S	/^#define WMask            [ rcx + dsWMask]$/;"	d
WMask	src/contrib/masmx64/gvmat64.asm	/^WMask           equ [ rcx + dsWMask]$/;"	d
WMask	src/contrib/masmx64/gvmat64.asm	/^WMask equ 07fffh$/;"	d
WRITEBUFFERSIZE	src/contrib/minizip/miniunz.c	61;"	d	file:
WRITEBUFFERSIZE	src/contrib/minizip/minizip.c	70;"	d	file:
WRITE_16	src/contrib/minizip/mztools.c	21;"	d	file:
WRITE_32	src/contrib/minizip/mztools.c	25;"	d	file:
WRITE_8	src/contrib/minizip/mztools.c	18;"	d	file:
WSIZE	src/contrib/infback9/infback9.c	11;"	d	file:
Write	src/contrib/delphi/ZLib.pas	/^    function Write(const Buffer; Count: Longint): Longint; override;$/;"	f
Write	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override void Write(byte[] buffer, int offset, int count)$/;"	m	class:DotZLib.GZipStream	access:public	signature:(byte[] buffer, int offset, int count)
WriteByte	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        public override void WriteByte(byte value)$/;"	m	class:DotZLib.GZipStream	access:public	signature:(byte value)
Write_EndOfCentralDirectoryRecord	src/contrib/minizip/zip.c	/^int Write_EndOfCentralDirectoryRecord(zip64_internal* zi, uLong size_centraldir, ZPOS64_T centraldir_pos_inzip)$/;"	f	signature:(zip64_internal* zi, uLong size_centraldir, ZPOS64_T centraldir_pos_inzip)
Write_GlobalComment	src/contrib/minizip/zip.c	/^int Write_GlobalComment(zip64_internal* zi, const char* global_comment)$/;"	f	signature:(zip64_internal* zi, const char* global_comment)
Write_LocalFileHeader	src/contrib/minizip/zip.c	/^int Write_LocalFileHeader(zip64_internal* zi, const char* filename, uInt size_extrafield_local, const void* extrafield_local)$/;"	f	signature:(zip64_internal* zi, const char* filename, uInt size_extrafield_local, const void* extrafield_local)
Write_Zip64EndOfCentralDirectoryLocator	src/contrib/minizip/zip.c	/^int Write_Zip64EndOfCentralDirectoryLocator(zip64_internal* zi, ZPOS64_T zip64eocd_pos_inzip)$/;"	f	signature:(zip64_internal* zi, ZPOS64_T zip64eocd_pos_inzip)
Write_Zip64EndOfCentralDirectoryRecord	src/contrib/minizip/zip.c	/^int Write_Zip64EndOfCentralDirectoryRecord(zip64_internal* zi, uLong size_centraldir, ZPOS64_T centraldir_pos_inzip)$/;"	f	signature:(zip64_internal* zi, uLong size_centraldir, ZPOS64_T centraldir_pos_inzip)
ZALLOC	src/zutil.h	244;"	d
ZALLOC	zutil.h	244;"	d
ZCALLBACK	src/contrib/minizip/ioapi.h	126;"	d
ZCALLBACK	src/contrib/minizip/ioapi.h	128;"	d
ZCLOSE64	src/contrib/minizip/ioapi.h	191;"	d
ZCONF_H	src/zconf.h	9;"	d
ZCONF_H	zconf.h	9;"	d
ZCR_SEED2	src/contrib/minizip/crypt.h	87;"	d
ZERROR64	src/contrib/minizip/ioapi.h	192;"	d
ZEXPORT	src/zconf.h	332;"	d
ZEXPORT	src/zconf.h	344;"	d
ZEXPORT	src/zconf.h	347;"	d
ZEXPORT	src/zconf.h	357;"	d
ZEXPORT	zconf.h	332;"	d
ZEXPORT	zconf.h	344;"	d
ZEXPORT	zconf.h	347;"	d
ZEXPORT	zconf.h	357;"	d
ZEXPORTVA	src/zconf.h	334;"	d
ZEXPORTVA	src/zconf.h	336;"	d
ZEXPORTVA	src/zconf.h	345;"	d
ZEXPORTVA	src/zconf.h	348;"	d
ZEXPORTVA	src/zconf.h	360;"	d
ZEXPORTVA	zconf.h	334;"	d
ZEXPORTVA	zconf.h	336;"	d
ZEXPORTVA	zconf.h	345;"	d
ZEXPORTVA	zconf.h	348;"	d
ZEXPORTVA	zconf.h	360;"	d
ZEXTERN	src/zconf.h	315;"	d
ZEXTERN	src/zconf.h	317;"	d
ZEXTERN	src/zconf.h	354;"	d
ZEXTERN	zconf.h	315;"	d
ZEXTERN	zconf.h	317;"	d
ZEXTERN	zconf.h	354;"	d
ZFREE	src/zutil.h	246;"	d
ZFREE	zutil.h	246;"	d
ZFSTREAM_H	src/contrib/iostream3/zfstream.h	11;"	d
ZIP64ENDHEADERMAGIC	src/contrib/minizip/zip.c	106;"	d	file:
ZIP64ENDLOCHEADERMAGIC	src/contrib/minizip/zip.c	107;"	d	file:
ZIP_BADZIPFILE	src/contrib/minizip/zip.h	76;"	d
ZIP_EOF	src/contrib/minizip/zip.h	73;"	d
ZIP_ERRNO	src/contrib/minizip/zip.h	74;"	d
ZIP_INTERNALERROR	src/contrib/minizip/zip.h	77;"	d
ZIP_OBJS	src/contrib/minizip/Makefile	/^ZIP_OBJS = minizip.o zip.o   ioapi.o ..\/..\/libz.a$/;"	m
ZIP_OK	src/contrib/minizip/zip.h	72;"	d
ZIP_PARAMERROR	src/contrib/minizip/zip.h	75;"	d
ZLIB_FILEFUNC_MODE_CREATE	src/contrib/minizip/ioapi.h	121;"	d
ZLIB_FILEFUNC_MODE_EXISTING	src/contrib/minizip/ioapi.h	120;"	d
ZLIB_FILEFUNC_MODE_READ	src/contrib/minizip/ioapi.h	116;"	d
ZLIB_FILEFUNC_MODE_READWRITEFILTER	src/contrib/minizip/ioapi.h	118;"	d
ZLIB_FILEFUNC_MODE_WRITE	src/contrib/minizip/ioapi.h	117;"	d
ZLIB_FILEFUNC_SEEK_CUR	src/contrib/minizip/ioapi.h	112;"	d
ZLIB_FILEFUNC_SEEK_END	src/contrib/minizip/ioapi.h	113;"	d
ZLIB_FILEFUNC_SEEK_SET	src/contrib/minizip/ioapi.h	114;"	d
ZLIB_H	src/zlib.h	32;"	d
ZLIB_H	zlib.h	32;"	d
ZLIB_INTERNAL	src/compress.c	8;"	d	file:
ZLIB_INTERNAL	src/gzguts.h	16;"	d
ZLIB_INTERNAL	src/gzguts.h	18;"	d
ZLIB_INTERNAL	src/test/infcover.c	16;"	d	file:
ZLIB_INTERNAL	src/uncompr.c	8;"	d	file:
ZLIB_INTERNAL	src/zutil.h	17;"	d
ZLIB_INTERNAL	src/zutil.h	19;"	d
ZLIB_INTERNAL	zutil.h	17;"	d
ZLIB_INTERNAL	zutil.h	19;"	d
ZLIB_LIB	src/contrib/delphi/zlibd32.mak	/^ZLIB_LIB = zlib.lib$/;"	m
ZLIB_LIB	src/contrib/pascal/zlibd32.mak	/^ZLIB_LIB = zlib.lib$/;"	m
ZLIB_LIB	src/watcom/watcom_f.mak	/^ZLIB_LIB = zlib_f.lib$/;"	m
ZLIB_LIB	src/watcom/watcom_l.mak	/^ZLIB_LIB = zlib_l.lib$/;"	m
ZLIB_VERNUM	src/zlib.h	41;"	d
ZLIB_VERNUM	zlib.h	41;"	d
ZLIB_VERSION	src/zlib.h	40;"	d
ZLIB_VERSION	zlib.h	40;"	d
ZLIB_VER_MAJOR	src/zlib.h	42;"	d
ZLIB_VER_MAJOR	zlib.h	42;"	d
ZLIB_VER_MINOR	src/zlib.h	43;"	d
ZLIB_VER_MINOR	zlib.h	43;"	d
ZLIB_VER_REVISION	src/zlib.h	44;"	d
ZLIB_VER_REVISION	zlib.h	44;"	d
ZLIB_VER_SUBREVISION	src/zlib.h	45;"	d
ZLIB_VER_SUBREVISION	zlib.h	45;"	d
ZLibException	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public ZLibException(int errorCode) : base(String.Format("ZLib error {0}", errorCode))$/;"	m	class:DotZLib.ZLibException	access:public	signature:(int errorCode)
ZLibException	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public ZLibException(int errorCode, string msg) : base(String.Format("ZLib error {0} {1}", errorCode, msg))$/;"	m	class:DotZLib.ZLibException	access:public	signature:(int errorCode, string msg)
ZLibException	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^    public class ZLibException : ApplicationException$/;"	c	namespace:DotZLib	inherits:ApplicationException	access:public
ZOPEN64	src/contrib/minizip/ioapi.h	200;"	d
ZPOS64_T	src/contrib/minizip/ioapi.h	/^typedef  64BIT_INT_CUSTOM_TYPE ZPOS64_T;$/;"	t
ZPOS64_T	src/contrib/minizip/ioapi.h	/^typedef uint64_t ZPOS64_T;$/;"	t
ZPOS64_T	src/contrib/minizip/ioapi.h	/^typedef unsigned __int64 ZPOS64_T;$/;"	t
ZPOS64_T	src/contrib/minizip/ioapi.h	/^typedef unsigned long long int ZPOS64_T;$/;"	t
ZREAD64	src/contrib/minizip/ioapi.h	187;"	d
ZSEEK64	src/contrib/minizip/ioapi.h	202;"	d
ZSTREAM__H	src/contrib/iostream2/zstream.h	20;"	d
ZSWAP32	src/zutil.h	250;"	d
ZSWAP32	zutil.h	250;"	d
ZStream	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^    internal struct ZStream$/;"	s	namespace:DotZLib
ZTELL64	src/contrib/minizip/ioapi.h	201;"	d
ZUTIL_H	src/zutil.h	14;"	d
ZUTIL_H	zutil.h	14;"	d
ZWRITE64	src/contrib/minizip/ioapi.h	188;"	d
Z_ARG	src/zconf.h	275;"	d
Z_ARG	src/zconf.h	277;"	d
Z_ARG	zconf.h	275;"	d
Z_ARG	zconf.h	277;"	d
Z_ASCII	src/zlib.h	201;"	d
Z_ASCII	zlib.h	201;"	d
Z_BEST_COMPRESSION	src/zlib.h	188;"	d
Z_BEST_COMPRESSION	zlib.h	188;"	d
Z_BEST_SPEED	src/zlib.h	187;"	d
Z_BEST_SPEED	zlib.h	187;"	d
Z_BINARY	src/zlib.h	199;"	d
Z_BINARY	zlib.h	199;"	d
Z_BLOCK	src/zlib.h	169;"	d
Z_BLOCK	zlib.h	169;"	d
Z_BUFSIZE	src/contrib/minizip/zip.c	54;"	d	file:
Z_BUF_ERROR	src/zlib.h	180;"	d
Z_BUF_ERROR	zlib.h	180;"	d
Z_BZIP2ED	src/contrib/minizip/unzip.h	62;"	d
Z_BZIP2ED	src/contrib/minizip/zip.h	61;"	d
Z_DATA_ERROR	src/zlib.h	178;"	d
Z_DATA_ERROR	zlib.h	178;"	d
Z_DEFAULT_COMPRESSION	src/zlib.h	189;"	d
Z_DEFAULT_COMPRESSION	zlib.h	189;"	d
Z_DEFAULT_STRATEGY	src/zlib.h	196;"	d
Z_DEFAULT_STRATEGY	zlib.h	196;"	d
Z_DEFLATED	src/zlib.h	205;"	d
Z_DEFLATED	zlib.h	205;"	d
Z_ERRNO	src/zlib.h	176;"	d
Z_ERRNO	zlib.h	176;"	d
Z_FILTERED	src/zlib.h	192;"	d
Z_FILTERED	zlib.h	192;"	d
Z_FINISH	src/zlib.h	168;"	d
Z_FINISH	zlib.h	168;"	d
Z_FIXED	src/zlib.h	195;"	d
Z_FIXED	zlib.h	195;"	d
Z_FULL_FLUSH	src/zlib.h	167;"	d
Z_FULL_FLUSH	zlib.h	167;"	d
Z_HAVE_STDARG_H	src/zconf.h	416;"	d
Z_HAVE_STDARG_H	zconf.h	416;"	d
Z_HAVE_UNISTD_H	src/zconf.h	412;"	d
Z_HAVE_UNISTD_H	src/zconf.h	448;"	d
Z_HAVE_UNISTD_H	zconf.h	412;"	d
Z_HAVE_UNISTD_H	zconf.h	448;"	d
Z_HUFFMAN_ONLY	src/zlib.h	193;"	d
Z_HUFFMAN_ONLY	zlib.h	193;"	d
Z_LARGE64	src/zconf.h	467;"	d
Z_LARGE64	zconf.h	467;"	d
Z_LFS64	src/zconf.h	463;"	d
Z_LFS64	zconf.h	463;"	d
Z_MAXFILENAMEINZIP	src/contrib/minizip/zip.c	58;"	d	file:
Z_MEM_ERROR	src/zlib.h	179;"	d
Z_MEM_ERROR	zlib.h	179;"	d
Z_NEED_DICT	src/zlib.h	175;"	d
Z_NEED_DICT	zlib.h	175;"	d
Z_NO_COMPRESSION	src/zlib.h	186;"	d
Z_NO_COMPRESSION	zlib.h	186;"	d
Z_NO_FLUSH	src/zlib.h	164;"	d
Z_NO_FLUSH	zlib.h	164;"	d
Z_NULL	src/zlib.h	208;"	d
Z_NULL	zlib.h	208;"	d
Z_OK	src/zlib.h	173;"	d
Z_OK	zlib.h	173;"	d
Z_PARTIAL_FLUSH	src/zlib.h	165;"	d
Z_PARTIAL_FLUSH	zlib.h	165;"	d
Z_PREFIX_SET	src/zconf.h	18;"	d
Z_PREFIX_SET	zconf.h	18;"	d
Z_RLE	src/zlib.h	194;"	d
Z_RLE	zlib.h	194;"	d
Z_STREAM_END	src/zlib.h	174;"	d
Z_STREAM_END	zlib.h	174;"	d
Z_STREAM_ERROR	src/zlib.h	177;"	d
Z_STREAM_ERROR	zlib.h	177;"	d
Z_SYNC_FLUSH	src/zlib.h	166;"	d
Z_SYNC_FLUSH	zlib.h	166;"	d
Z_TEXT	src/zlib.h	200;"	d
Z_TEXT	zlib.h	200;"	d
Z_TREES	src/zlib.h	170;"	d
Z_TREES	zlib.h	170;"	d
Z_U4	src/zconf.h	397;"	d
Z_U4	src/zconf.h	399;"	d
Z_U4	src/zconf.h	401;"	d
Z_U4	zconf.h	397;"	d
Z_U4	zconf.h	399;"	d
Z_U4	zconf.h	401;"	d
Z_UNKNOWN	src/zlib.h	202;"	d
Z_UNKNOWN	zlib.h	202;"	d
Z_VERSION_ERROR	src/zlib.h	181;"	d
Z_VERSION_ERROR	zlib.h	181;"	d
Z_WANT64	src/zconf.h	471;"	d
Z_WANT64	zconf.h	471;"	d
_CRT_SECURE_NO_WARNINGS	src/contrib/minizip/ioapi.c	14;"	d	file:
_CRT_glob	src/contrib/untgz/untgz.c	/^int _CRT_glob = 0;      \/* disable argument globbing in MinGW *\/$/;"	v
_DATA	src/contrib/masmx64/gvmat64.asm	/^_DATA   SEGMENT$/;"	l
_DATA	src/contrib/masmx86/inffas32.asm	/^_DATA			segment$/;"	l
_FILE_OFFSET_BIT	src/contrib/minizip/ioapi.h	39;"	d
_FILE_OFFSET_BIT	src/contrib/minizip/miniunz.c	26;"	d	file:
_FILE_OFFSET_BIT	src/contrib/minizip/minizip.c	27;"	d	file:
_FILE_OFFSET_BITS	src/gzguts.h	11;"	d
_LARGEFILE64_SOURCE	src/contrib/minizip/ioapi.h	36;"	d
_LARGEFILE64_SOURCE	src/contrib/minizip/miniunz.c	23;"	d	file:
_LARGEFILE64_SOURCE	src/contrib/minizip/minizip.c	24;"	d	file:
_LARGEFILE64_SOURCE	src/zconf.h	444;"	d
_LARGEFILE64_SOURCE	zconf.h	444;"	d
_LARGEFILE_SOURCE	src/gzguts.h	8;"	d
_PTRDIFF_T_DEFINED	src/zutil.h	157;"	d
_PTRDIFF_T_DEFINED	zutil.h	157;"	d
_TEXT	src/contrib/masmx86/inffas32.asm	/^_TEXT			segment$/;"	l
_TEXT	src/contrib/masmx86/match686.asm	/^_TEXT                   segment$/;"	l
_ZLIBIOAPI64_H	src/contrib/minizip/ioapi.h	22;"	d
__USE_FILE_OFFSET64	src/contrib/minizip/ioapi.h	30;"	d
__USE_FILE_OFFSET64	src/contrib/minizip/miniunz.c	17;"	d	file:
__USE_FILE_OFFSET64	src/contrib/minizip/minizip.c	18;"	d	file:
__USE_LARGEFILE64	src/contrib/minizip/ioapi.h	33;"	d
__USE_LARGEFILE64	src/contrib/minizip/miniunz.c	20;"	d	file:
__USE_LARGEFILE64	src/contrib/minizip/minizip.c	21;"	d	file:
__anon10::add_position_when_writting_offset	src/contrib/minizip/zip.c	/^    ZPOS64_T add_position_when_writting_offset;$/;"	m	struct:__anon10	file:	access:public
__anon10::begin_pos	src/contrib/minizip/zip.c	/^    ZPOS64_T begin_pos;            \/* position of the beginning of the zipfile *\/$/;"	m	struct:__anon10	file:	access:public
__anon10::central_dir	src/contrib/minizip/zip.c	/^    linkedlist_data central_dir;\/* datablock with central dir in construction*\/$/;"	m	struct:__anon10	file:	access:public
__anon10::ci	src/contrib/minizip/zip.c	/^    curfile64_info ci;            \/* info on the file curretly writing *\/$/;"	m	struct:__anon10	file:	access:public
__anon10::filestream	src/contrib/minizip/zip.c	/^    voidpf filestream;        \/* io structore of the zipfile *\/$/;"	m	struct:__anon10	file:	access:public
__anon10::globalcomment	src/contrib/minizip/zip.c	/^    char *globalcomment;$/;"	m	struct:__anon10	file:	access:public
__anon10::in_opened_file_inzip	src/contrib/minizip/zip.c	/^    int  in_opened_file_inzip;  \/* 1 if a file in the zip is currently writ.*\/$/;"	m	struct:__anon10	file:	access:public
__anon10::number_entry	src/contrib/minizip/zip.c	/^    ZPOS64_T number_entry;$/;"	m	struct:__anon10	file:	access:public
__anon10::z_filefunc	src/contrib/minizip/zip.c	/^    zlib_filefunc64_32_def z_filefunc;$/;"	m	struct:__anon10	file:	access:public
__anon11::error	src/contrib/minizip/iowin32.c	/^    int error;$/;"	m	struct:__anon11	file:	access:public
__anon11::hf	src/contrib/minizip/iowin32.c	/^    HANDLE hf;$/;"	m	struct:__anon11	file:	access:public
__anon12::bits	src/contrib/infback9/inftree9.h	/^    unsigned char bits;         \/* bits in this part of the code *\/$/;"	m	struct:__anon12	access:public
__anon12::op	src/contrib/infback9/inftree9.h	/^    unsigned char op;           \/* operation, extra bits, table bits *\/$/;"	m	struct:__anon12	access:public
__anon12::val	src/contrib/infback9/inftree9.h	/^    unsigned short val;         \/* offset in table or code value *\/$/;"	m	struct:__anon12	access:public
__anon16::bits	src/inftrees.h	/^    unsigned char bits;         \/* bits in this part of the code *\/$/;"	m	struct:__anon16	access:public
__anon16::op	src/inftrees.h	/^    unsigned char op;           \/* operation, extra bits, table bits *\/$/;"	m	struct:__anon16	access:public
__anon16::val	src/inftrees.h	/^    unsigned short val;         \/* offset in table or code value *\/$/;"	m	struct:__anon16	access:public
__anon1::direct	src/gzguts.h	/^    int direct;             \/* 0 if processing gzip, 1 if transparent *\/$/;"	m	struct:__anon1	access:public
__anon1::eof	src/gzguts.h	/^    int eof;                \/* true if end of input file reached *\/$/;"	m	struct:__anon1	access:public
__anon1::err	src/gzguts.h	/^    int err;                \/* error code *\/$/;"	m	struct:__anon1	access:public
__anon1::fd	src/gzguts.h	/^    int fd;                 \/* file descriptor *\/$/;"	m	struct:__anon1	access:public
__anon1::how	src/gzguts.h	/^    int how;                \/* 0: get header, 1: copy, 2: decompress *\/$/;"	m	struct:__anon1	access:public
__anon1::in	src/gzguts.h	/^    unsigned char *in;      \/* input buffer *\/$/;"	m	struct:__anon1	access:public
__anon1::level	src/gzguts.h	/^    int level;              \/* compression level *\/$/;"	m	struct:__anon1	access:public
__anon1::mode	src/gzguts.h	/^    int mode;               \/* see gzip modes above *\/$/;"	m	struct:__anon1	access:public
__anon1::msg	src/gzguts.h	/^    char *msg;              \/* error message *\/$/;"	m	struct:__anon1	access:public
__anon1::out	src/gzguts.h	/^    unsigned char *out;     \/* output buffer (double-sized when reading) *\/$/;"	m	struct:__anon1	access:public
__anon1::past	src/gzguts.h	/^    int past;               \/* true if read requested past end *\/$/;"	m	struct:__anon1	access:public
__anon1::path	src/gzguts.h	/^    char *path;             \/* path or fd for error messages *\/$/;"	m	struct:__anon1	access:public
__anon1::seek	src/gzguts.h	/^    int seek;               \/* true if seek request pending *\/$/;"	m	struct:__anon1	access:public
__anon1::size	src/gzguts.h	/^    unsigned size;          \/* buffer size, zero if not allocated yet *\/$/;"	m	struct:__anon1	access:public
__anon1::skip	src/gzguts.h	/^    z_off64_t skip;         \/* amount to skip (already rewound if backwards) *\/$/;"	m	struct:__anon1	access:public
__anon1::start	src/gzguts.h	/^    z_off64_t start;        \/* where the gzip data started, for rewinding *\/$/;"	m	struct:__anon1	access:public
__anon1::strategy	src/gzguts.h	/^    int strategy;           \/* compression strategy *\/$/;"	m	struct:__anon1	access:public
__anon1::strm	src/gzguts.h	/^    z_stream strm;          \/* stream structure in-place (not a pointer) *\/$/;"	m	struct:__anon1	access:public
__anon1::want	src/gzguts.h	/^    unsigned want;          \/* requested buffer size, default is GZBUFSIZE *\/$/;"	m	struct:__anon1	access:public
__anon1::x	src/gzguts.h	/^    struct gzFile_s x;      \/* "x" for exposed *\/$/;"	m	struct:__anon1	typeref:struct:__anon1::gzFile_s	access:public
__anon2::buf	src/examples/gzappend.c	/^    unsigned char *buf;         \/* buffer *\/$/;"	m	struct:__anon2	file:	access:public
__anon2::fd	src/examples/gzappend.c	/^    int fd;                     \/* file descriptor *\/$/;"	m	struct:__anon2	file:	access:public
__anon2::left	src/examples/gzappend.c	/^    unsigned left;              \/* bytes available at next *\/$/;"	m	struct:__anon2	file:	access:public
__anon2::name	src/examples/gzappend.c	/^    char *name;                 \/* file name for error messages *\/$/;"	m	struct:__anon2	file:	access:public
__anon2::next	src/examples/gzappend.c	/^    z_const unsigned char *next;    \/* next byte in buffer *\/$/;"	m	struct:__anon2	file:	access:public
__anon2::size	src/examples/gzappend.c	/^    int size;                   \/* 1 << size is bytes in buf *\/$/;"	m	struct:__anon2	file:	access:public
__anon3::buf	src/examples/gzjoin.c	/^    unsigned char *buf;     \/* allocated buffer of length CHUNK *\/$/;"	m	struct:__anon3	file:	access:public
__anon3::fd	src/examples/gzjoin.c	/^    int fd;                 \/* file descriptor *\/$/;"	m	struct:__anon3	file:	access:public
__anon3::left	src/examples/gzjoin.c	/^    unsigned left;          \/* bytes remaining at next *\/$/;"	m	struct:__anon3	file:	access:public
__anon3::name	src/examples/gzjoin.c	/^    char *name;             \/* name of file for error messages *\/$/;"	m	struct:__anon3	file:	access:public
__anon3::next	src/examples/gzjoin.c	/^    unsigned char *next;    \/* next byte to read *\/$/;"	m	struct:__anon3	file:	access:public
__anon6::dosDate	src/contrib/minizip/zip.h	/^    uLong       dosDate;       \/* if dos_date == 0, tmu_date is used      *\/$/;"	m	struct:__anon6	access:public
__anon6::external_fa	src/contrib/minizip/zip.h	/^    uLong       external_fa;    \/* external file attributes        4 bytes *\/$/;"	m	struct:__anon6	access:public
__anon6::internal_fa	src/contrib/minizip/zip.h	/^    uLong       internal_fa;    \/* internal file attributes        2 bytes *\/$/;"	m	struct:__anon6	access:public
__anon6::tmz_date	src/contrib/minizip/zip.h	/^    tm_zip      tmz_date;       \/* date in understandable format           *\/$/;"	m	struct:__anon6	access:public
__anon7::bstream	src/contrib/minizip/unzip.c	/^    bz_stream bstream;          \/* bzLib stream structure for bziped *\/$/;"	m	struct:__anon7	file:	access:public
__anon7::byte_before_the_zipfile	src/contrib/minizip/unzip.c	/^    ZPOS64_T byte_before_the_zipfile;\/* byte before the zipfile, (>0 for sfx)*\/$/;"	m	struct:__anon7	file:	access:public
__anon7::compression_method	src/contrib/minizip/unzip.c	/^    uLong compression_method;   \/* compression method (0==store) *\/$/;"	m	struct:__anon7	file:	access:public
__anon7::crc32	src/contrib/minizip/unzip.c	/^    uLong crc32;                \/* crc32 of all data uncompressed *\/$/;"	m	struct:__anon7	file:	access:public
__anon7::crc32_wait	src/contrib/minizip/unzip.c	/^    uLong crc32_wait;           \/* crc32 we must obtain after decompress all *\/$/;"	m	struct:__anon7	file:	access:public
__anon7::filestream	src/contrib/minizip/unzip.c	/^    voidpf filestream;        \/* io structore of the zipfile *\/$/;"	m	struct:__anon7	file:	access:public
__anon7::offset_local_extrafield	src/contrib/minizip/unzip.c	/^    ZPOS64_T offset_local_extrafield;\/* offset of the local extra field *\/$/;"	m	struct:__anon7	file:	access:public
__anon7::pos_in_zipfile	src/contrib/minizip/unzip.c	/^    ZPOS64_T pos_in_zipfile;       \/* position in byte on the zipfile, for fseek*\/$/;"	m	struct:__anon7	file:	access:public
__anon7::pos_local_extrafield	src/contrib/minizip/unzip.c	/^    ZPOS64_T pos_local_extrafield;   \/* position in the local extra field in read*\/$/;"	m	struct:__anon7	file:	access:public
__anon7::raw	src/contrib/minizip/unzip.c	/^    int   raw;$/;"	m	struct:__anon7	file:	access:public
__anon7::read_buffer	src/contrib/minizip/unzip.c	/^    char  *read_buffer;         \/* internal buffer for compressed data *\/$/;"	m	struct:__anon7	file:	access:public
__anon7::rest_read_compressed	src/contrib/minizip/unzip.c	/^    ZPOS64_T rest_read_compressed; \/* number of byte to be decompressed *\/$/;"	m	struct:__anon7	file:	access:public
__anon7::rest_read_uncompressed	src/contrib/minizip/unzip.c	/^    ZPOS64_T rest_read_uncompressed;\/*number of byte to be obtained after decomp*\/$/;"	m	struct:__anon7	file:	access:public
__anon7::size_local_extrafield	src/contrib/minizip/unzip.c	/^    uInt  size_local_extrafield;\/* size of the local extra field *\/$/;"	m	struct:__anon7	file:	access:public
__anon7::stream	src/contrib/minizip/unzip.c	/^    z_stream stream;            \/* zLib stream structure for inflate *\/$/;"	m	struct:__anon7	file:	access:public
__anon7::stream_initialised	src/contrib/minizip/unzip.c	/^    uLong stream_initialised;   \/* flag set if stream structure is initialised*\/$/;"	m	struct:__anon7	file:	access:public
__anon7::total_out_64	src/contrib/minizip/unzip.c	/^    ZPOS64_T total_out_64;$/;"	m	struct:__anon7	file:	access:public
__anon7::z_filefunc	src/contrib/minizip/unzip.c	/^    zlib_filefunc64_32_def z_filefunc;$/;"	m	struct:__anon7	file:	access:public
__anon8::byte_before_the_zipfile	src/contrib/minizip/unzip.c	/^    ZPOS64_T byte_before_the_zipfile;\/* byte before the zipfile, (>0 for sfx)*\/$/;"	m	struct:__anon8	file:	access:public
__anon8::central_pos	src/contrib/minizip/unzip.c	/^    ZPOS64_T central_pos;          \/* position of the beginning of the central dir*\/$/;"	m	struct:__anon8	file:	access:public
__anon8::cur_file_info	src/contrib/minizip/unzip.c	/^    unz_file_info64 cur_file_info; \/* public info about the current file in zip*\/$/;"	m	struct:__anon8	file:	access:public
__anon8::cur_file_info_internal	src/contrib/minizip/unzip.c	/^    unz_file_info64_internal cur_file_info_internal; \/* private info about it*\/$/;"	m	struct:__anon8	file:	access:public
__anon8::current_file_ok	src/contrib/minizip/unzip.c	/^    ZPOS64_T current_file_ok;      \/* flag about the usability of the current file*\/$/;"	m	struct:__anon8	file:	access:public
__anon8::encrypted	src/contrib/minizip/unzip.c	/^    int encrypted;$/;"	m	struct:__anon8	file:	access:public
__anon8::filestream	src/contrib/minizip/unzip.c	/^    voidpf filestream;        \/* io structore of the zipfile *\/$/;"	m	struct:__anon8	file:	access:public
__anon8::gi	src/contrib/minizip/unzip.c	/^    unz_global_info64 gi;       \/* public global information *\/$/;"	m	struct:__anon8	file:	access:public
__anon8::is64bitOpenFunction	src/contrib/minizip/unzip.c	/^    int is64bitOpenFunction;$/;"	m	struct:__anon8	file:	access:public
__anon8::isZip64	src/contrib/minizip/unzip.c	/^    int isZip64;$/;"	m	struct:__anon8	file:	access:public
__anon8::keys	src/contrib/minizip/unzip.c	/^    unsigned long keys[3];     \/* keys defining the pseudo-random sequence *\/$/;"	m	struct:__anon8	file:	access:public
__anon8::num_file	src/contrib/minizip/unzip.c	/^    ZPOS64_T num_file;             \/* number of the current file in the zipfile*\/$/;"	m	struct:__anon8	file:	access:public
__anon8::offset_central_dir	src/contrib/minizip/unzip.c	/^    ZPOS64_T offset_central_dir;   \/* offset of start of central directory with$/;"	m	struct:__anon8	file:	access:public
__anon8::pcrc_32_tab	src/contrib/minizip/unzip.c	/^    const z_crc_t* pcrc_32_tab;$/;"	m	struct:__anon8	file:	access:public
__anon8::pfile_in_zip_read	src/contrib/minizip/unzip.c	/^    file_in_zip64_read_info_s* pfile_in_zip_read; \/* structure about the current$/;"	m	struct:__anon8	file:	access:public
__anon8::pos_in_central_dir	src/contrib/minizip/unzip.c	/^    ZPOS64_T pos_in_central_dir;   \/* pos of the current file in the central dir*\/$/;"	m	struct:__anon8	file:	access:public
__anon8::size_central_dir	src/contrib/minizip/unzip.c	/^    ZPOS64_T size_central_dir;     \/* size of the central directory  *\/$/;"	m	struct:__anon8	file:	access:public
__anon8::z_filefunc	src/contrib/minizip/unzip.c	/^    zlib_filefunc64_32_def z_filefunc;$/;"	m	struct:__anon8	file:	access:public
__anon9::bstream	src/contrib/minizip/zip.c	/^    bz_stream bstream;          \/* bzLib stream structure for bziped *\/$/;"	m	struct:__anon9	file:	access:public
__anon9::buffered_data	src/contrib/minizip/zip.c	/^    Byte buffered_data[Z_BUFSIZE];\/* buffer contain compressed data to be writ*\/$/;"	m	struct:__anon9	file:	access:public
__anon9::central_header	src/contrib/minizip/zip.c	/^    char* central_header;       \/* central header data for the current file *\/$/;"	m	struct:__anon9	file:	access:public
__anon9::crc32	src/contrib/minizip/zip.c	/^    uLong crc32;$/;"	m	struct:__anon9	file:	access:public
__anon9::crypt_header_size	src/contrib/minizip/zip.c	/^    int crypt_header_size;$/;"	m	struct:__anon9	file:	access:public
__anon9::dosDate	src/contrib/minizip/zip.c	/^    uLong dosDate;$/;"	m	struct:__anon9	file:	access:public
__anon9::encrypt	src/contrib/minizip/zip.c	/^    int  encrypt;$/;"	m	struct:__anon9	file:	access:public
__anon9::flag	src/contrib/minizip/zip.c	/^    uLong flag;                 \/* flag of the file currently writing *\/$/;"	m	struct:__anon9	file:	access:public
__anon9::keys	src/contrib/minizip/zip.c	/^    unsigned long keys[3];     \/* keys defining the pseudo-random sequence *\/$/;"	m	struct:__anon9	file:	access:public
__anon9::method	src/contrib/minizip/zip.c	/^    int  method;                \/* compression method of file currenty wr.*\/$/;"	m	struct:__anon9	file:	access:public
__anon9::pcrc_32_tab	src/contrib/minizip/zip.c	/^    const z_crc_t* pcrc_32_tab;$/;"	m	struct:__anon9	file:	access:public
__anon9::pos_in_buffered_data	src/contrib/minizip/zip.c	/^    uInt pos_in_buffered_data;  \/* last written byte in buffered_data *\/$/;"	m	struct:__anon9	file:	access:public
__anon9::pos_local_header	src/contrib/minizip/zip.c	/^    ZPOS64_T pos_local_header;     \/* offset of the local header of the file$/;"	m	struct:__anon9	file:	access:public
__anon9::pos_zip64extrainfo	src/contrib/minizip/zip.c	/^    ZPOS64_T pos_zip64extrainfo;$/;"	m	struct:__anon9	file:	access:public
__anon9::raw	src/contrib/minizip/zip.c	/^    int  raw;                   \/* 1 for directly writing raw data *\/$/;"	m	struct:__anon9	file:	access:public
__anon9::size_centralExtra	src/contrib/minizip/zip.c	/^    uLong size_centralExtra;$/;"	m	struct:__anon9	file:	access:public
__anon9::size_centralExtraFree	src/contrib/minizip/zip.c	/^    uLong size_centralExtraFree; \/* Extra bytes allocated to the centralheader but that are not used *\/$/;"	m	struct:__anon9	file:	access:public
__anon9::size_centralheader	src/contrib/minizip/zip.c	/^    uLong size_centralheader;   \/* size of the central header for cur file *\/$/;"	m	struct:__anon9	file:	access:public
__anon9::stream	src/contrib/minizip/zip.c	/^    z_stream stream;            \/* zLib stream structure for inflate *\/$/;"	m	struct:__anon9	file:	access:public
__anon9::stream_initialised	src/contrib/minizip/zip.c	/^    int  stream_initialised;    \/* 1 is stream is initialised *\/$/;"	m	struct:__anon9	file:	access:public
__anon9::totalCompressedData	src/contrib/minizip/zip.c	/^    ZPOS64_T totalCompressedData;$/;"	m	struct:__anon9	file:	access:public
__anon9::totalUncompressedData	src/contrib/minizip/zip.c	/^    ZPOS64_T totalUncompressedData;$/;"	m	struct:__anon9	file:	access:public
__anon9::zip64	src/contrib/minizip/zip.c	/^    int  zip64;               \/* Add ZIP64 extened information in the extra field *\/$/;"	m	struct:__anon9	file:	access:public
__rdtsc	src/contrib/testzlib/testzlib.c	/^unsigned __int64 __rdtsc(void);$/;"	p	file:	signature:(void)
_buffer	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        private byte[] _buffer;$/;"	f	class:DotZLib.CircularBuffer	file:	access:private
_capacity	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        private int _capacity;$/;"	f	class:DotZLib.CircularBuffer	file:	access:private
_chainlenwmask	src/contrib/amd64/amd64-match.S	/^#define _chainlenwmask	( 8-LocalVarsSize)(%rsp)$/;"	d
_checksum	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        private uint _checksum = 0;$/;"	f	class:DotZLib.CodecBase	file:	access:private
_current	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        protected uint _current;$/;"	f	class:DotZLib.ChecksumGeneratorBase	access:protected
_dist_code	src/trees.c	/^uch _dist_code[DIST_CODE_LEN];$/;"	v
_dist_code	src/trees.h	/^const uch ZLIB_INTERNAL _dist_code[DIST_CODE_LEN] = {$/;"	v
_dist_code	src/zconf.h	21;"	d
_dist_code	zconf.h	21;"	d
_flags	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        private uint _flags;$/;"	f	class:DotZLib.Info	file:	access:private
_free	src/contrib/delphi/ZLib.pas	/^procedure _free(Block: Pointer); cdecl;$/;"	p
_free	src/contrib/pascal/zlibpas.pas	/^procedure _free(Block: Pointer); cdecl;$/;"	p
_gzFile	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private IntPtr _gzFile;$/;"	f	class:DotZLib.GZipStream	file:	access:private
_hInput	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        private GCHandle _hInput;$/;"	f	class:DotZLib.CodecBase	file:	access:private
_hOutput	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        private GCHandle _hOutput;$/;"	f	class:DotZLib.CodecBase	file:	access:private
_halloc	src/zutil.c	275;"	d	file:
_head	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        private int _head;$/;"	f	class:DotZLib.CircularBuffer	file:	access:private
_hfree	src/zutil.c	276;"	d	file:
_inBuffer	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        private byte[] _inBuffer = new byte[kBufferSize];$/;"	f	class:DotZLib.CodecBase	file:	access:private
_inflate_fast	src/contrib/masmx86/inffas32.asm	/^_inflate_fast proc near$/;"	l
_isDisposed	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        protected bool _isDisposed = false;$/;"	f	class:DotZLib.CodecBase	access:protected
_isDisposed	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private bool _isDisposed = false;$/;"	f	class:DotZLib.GZipStream	file:	access:private
_isWriting	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private bool _isWriting;$/;"	f	class:DotZLib.GZipStream	file:	access:private
_length_code	src/trees.c	/^uch _length_code[MAX_MATCH-MIN_MATCH+1];$/;"	v
_length_code	src/trees.h	/^const uch ZLIB_INTERNAL _length_code[MAX_MATCH-MIN_MATCH+1]= {$/;"	v
_length_code	src/zconf.h	22;"	d
_length_code	zconf.h	22;"	d
_longest_match	src/contrib/masmx86/match686.asm	/^    _longest_match      proc near$/;"	l
_malloc	src/contrib/delphi/ZLib.pas	/^function _malloc(Size: Integer): Pointer; cdecl;$/;"	f
_malloc	src/contrib/pascal/zlibpas.pas	/^function _malloc(Size: Integer): Pointer; cdecl;$/;"	f
_match_init	src/contrib/masmx86/match686.asm	/^    _match_init     proc near$/;"	l
_memcpy	src/contrib/delphi/ZLib.pas	/^procedure _memcpy(dest, source: Pointer; count: Integer); cdecl;$/;"	p
_memcpy	src/contrib/pascal/zlibpas.pas	/^procedure _memcpy(dest, source: Pointer; count: Integer); cdecl;$/;"	p
_memset	src/contrib/delphi/ZLib.pas	/^procedure _memset(P: Pointer; B: Byte; count: Integer); cdecl;$/;"	p
_memset	src/contrib/pascal/zlibpas.pas	/^procedure _memset(P: Pointer; B: Byte; count: Integer); cdecl;$/;"	p
_outBuffer	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        private byte[] _outBuffer = new byte[kBufferSize];$/;"	f	class:DotZLib.CodecBase	file:	access:private
_size	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        private int _size;$/;"	f	class:DotZLib.CircularBuffer	file:	access:private
_tail	src/contrib/dotzlib/DotZLib/CircularBuffer.cs	/^        private int _tail;$/;"	f	class:DotZLib.CircularBuffer	file:	access:private
_tr_align	src/deflate.h	/^void ZLIB_INTERNAL _tr_align OF((deflate_state *s));$/;"	p	signature:(deflate_state *s)
_tr_align	src/trees.c	/^void ZLIB_INTERNAL _tr_align(s)$/;"	f
_tr_align	src/zconf.h	23;"	d
_tr_align	zconf.h	23;"	d
_tr_flush_bits	src/deflate.h	/^void ZLIB_INTERNAL _tr_flush_bits OF((deflate_state *s));$/;"	p	signature:(deflate_state *s)
_tr_flush_bits	src/trees.c	/^void ZLIB_INTERNAL _tr_flush_bits(s)$/;"	f
_tr_flush_bits	src/zconf.h	24;"	d
_tr_flush_bits	zconf.h	24;"	d
_tr_flush_block	src/deflate.h	/^void ZLIB_INTERNAL _tr_flush_block OF((deflate_state *s, charf *buf,$/;"	p	signature:(deflate_state *s, charf *buf, ulg stored_len, int last)
_tr_flush_block	src/trees.c	/^void ZLIB_INTERNAL _tr_flush_block(s, buf, stored_len, last)$/;"	f
_tr_flush_block	src/zconf.h	25;"	d
_tr_flush_block	zconf.h	25;"	d
_tr_init	src/deflate.h	/^void ZLIB_INTERNAL _tr_init OF((deflate_state *s));$/;"	p	signature:(deflate_state *s)
_tr_init	src/trees.c	/^void ZLIB_INTERNAL _tr_init(s)$/;"	f
_tr_init	src/zconf.h	26;"	d
_tr_init	zconf.h	26;"	d
_tr_stored_block	src/deflate.h	/^void ZLIB_INTERNAL _tr_stored_block OF((deflate_state *s, charf *buf,$/;"	p	signature:(deflate_state *s, charf *buf, ulg stored_len, int last)
_tr_stored_block	src/trees.c	/^void ZLIB_INTERNAL _tr_stored_block(s, buf, stored_len, last)$/;"	f
_tr_stored_block	src/zconf.h	27;"	d
_tr_stored_block	zconf.h	27;"	d
_tr_tally	src/deflate.h	/^int ZLIB_INTERNAL _tr_tally OF((deflate_state *s, unsigned dist, unsigned lc));$/;"	p	signature:(deflate_state *s, unsigned dist, unsigned lc)
_tr_tally	src/trees.c	/^int ZLIB_INTERNAL _tr_tally (s, dist, lc)$/;"	f
_tr_tally	src/zconf.h	28;"	d
_tr_tally	zconf.h	28;"	d
_tr_tally_dist	src/deflate.h	330;"	d
_tr_tally_dist	src/deflate.h	342;"	d
_tr_tally_lit	src/deflate.h	323;"	d
_tr_tally_lit	src/deflate.h	341;"	d
_unz64_H	src/contrib/minizip/unzip.h	44;"	d
_windowbestlen	src/contrib/amd64/amd64-match.S	/^#define _windowbestlen	(16-LocalVarsSize)(%rsp)$/;"	d
_zip12_H	src/contrib/minizip/zip.h	41;"	d
_zip_tools_H	src/contrib/minizip/mztools.h	8;"	d
_ztream	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        internal ZStream _ztream = new ZStream();$/;"	f	class:DotZLib.CodecBase	file:	access:private
access	src/contrib/untgz/untgz.c	31;"	d	file:
access	src/examples/zran.c	/^struct access {$/;"	s	file:
access::have	src/examples/zran.c	/^    int have;           \/* number of list entries filled in *\/$/;"	m	struct:access	file:	access:public
access::list	src/examples/zran.c	/^    struct point *list; \/* allocated list *\/$/;"	m	struct:access	typeref:struct:access::point	file:	access:public
access::size	src/examples/zran.c	/^    int size;           \/* number of list entries allocated *\/$/;"	m	struct:access	file:	access:public
add_data_in_datablock	src/contrib/minizip/zip.c	/^local int add_data_in_datablock(linkedlist_data* ll, const void* buf, uLong len)$/;"	f	signature:(linkedlist_data* ll, const void* buf, uLong len)
add_position_when_writting_offset	src/contrib/minizip/zip.c	/^    ZPOS64_T add_position_when_writting_offset;$/;"	m	struct:__anon10	file:	access:public
addpoint	src/examples/zran.c	/^local struct access *addpoint(struct access *index, int bits,$/;"	f	signature:(struct access *index, int bits, off_t in, off_t out, unsigned left, unsigned char *window)
adler	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public uint adler;$/;"	f	struct:DotZLib.ZStream	access:public
adler	src/zlib.h	/^    uLong   adler;      \/* adler32 value of the uncompressed data *\/$/;"	m	struct:z_stream_s	access:public
adler	zlib.h	/^    uLong   adler;      \/* adler32 value of the uncompressed data *\/$/;"	m	struct:z_stream_s	access:public
adler1	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        private uint adler1;$/;"	f	class:DotZLibTests.DeflateInflateTests	file:	access:private
adler2	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        private uint adler2;$/;"	f	class:DotZLibTests.DeflateInflateTests	file:	access:private
adler32	src/adler32.c	/^uLong ZEXPORT adler32(adler, buf, len)$/;"	f
adler32	src/contrib/delphi/ZLib.pas	/^procedure adler32; external;$/;"	p
adler32	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        private static extern uint adler32(uint adler, int data, uint length);$/;"	m	class:DotZLib.AdlerChecksum	file:	access:private	signature:(uint adler, int data, uint length)
adler32	src/contrib/pascal/zlibpas.pas	/^function adler32(adler: LongInt; const buf: PChar; len: Integer): LongInt;$/;"	f
adler32	src/contrib/pascal/zlibpas.pas	/^function adler32; external;$/;"	f
adler32	src/zconf.h	29;"	d
adler32	src/zlib.h	/^ZEXTERN uLong ZEXPORT adler32 OF((uLong adler, const Bytef *buf, uInt len));$/;"	p	signature:(uLong adler, const Bytef *buf, uInt len)
adler32	zconf.h	29;"	d
adler32	zlib.h	/^ZEXTERN uLong ZEXPORT adler32 OF((uLong adler, const Bytef *buf, uInt len));$/;"	p	signature:(uLong adler, const Bytef *buf, uInt len)
adler32_combine	src/adler32.c	/^uLong ZEXPORT adler32_combine(adler1, adler2, len2)$/;"	f
adler32_combine	src/contrib/pascal/zlibpas.pas	/^function adler32_combine(adler1, adler2, len2: LongInt): LongInt;$/;"	f
adler32_combine	src/contrib/pascal/zlibpas.pas	/^function adler32_combine; external;$/;"	f
adler32_combine	src/zconf.h	30;"	d
adler32_combine	src/zlib.h	/^   ZEXTERN uLong ZEXPORT adler32_combine OF((uLong, uLong, z_off_t));$/;"	p	signature:(uLong, uLong, z_off_t)
adler32_combine	src/zlib.h	1713;"	d
adler32_combine	zconf.h	30;"	d
adler32_combine	zlib.h	/^   ZEXTERN uLong ZEXPORT adler32_combine OF((uLong, uLong, z_off_t));$/;"	p	signature:(uLong, uLong, z_off_t)
adler32_combine	zlib.h	1713;"	d
adler32_combine64	src/adler32.c	/^uLong ZEXPORT adler32_combine64(adler1, adler2, len2)$/;"	f
adler32_combine64	src/zconf.h	31;"	d
adler32_combine64	src/zlib.h	/^     ZEXTERN uLong ZEXPORT adler32_combine64 OF((uLong, uLong, z_off_t));$/;"	p	signature:(uLong, uLong, z_off_t)
adler32_combine64	src/zlib.h	/^   ZEXTERN uLong ZEXPORT adler32_combine64 OF((uLong, uLong, z_off64_t));$/;"	p	signature:(uLong, uLong, z_off64_t)
adler32_combine64	src/zutil.h	/^    ZEXTERN uLong ZEXPORT adler32_combine64 OF((uLong, uLong, z_off_t));$/;"	p	signature:(uLong, uLong, z_off_t)
adler32_combine64	zconf.h	31;"	d
adler32_combine64	zlib.h	/^     ZEXTERN uLong ZEXPORT adler32_combine64 OF((uLong, uLong, z_off_t));$/;"	p	signature:(uLong, uLong, z_off_t)
adler32_combine64	zlib.h	/^   ZEXTERN uLong ZEXPORT adler32_combine64 OF((uLong, uLong, z_off64_t));$/;"	p	signature:(uLong, uLong, z_off64_t)
adler32_combine64	zutil.h	/^    ZEXTERN uLong ZEXPORT adler32_combine64 OF((uLong, uLong, z_off_t));$/;"	p	signature:(uLong, uLong, z_off_t)
adler32_combine_	src/adler32.c	/^local uLong adler32_combine_ OF((uLong adler1, uLong adler2, z_off64_t len2));$/;"	p	file:	signature:(uLong adler1, uLong adler2, z_off64_t len2)
adler32_combine_	src/adler32.c	/^local uLong adler32_combine_(adler1, adler2, len2)$/;"	f
adrret	src/contrib/masmx86/match686.asm	/^    adrret          equ     dword ptr[esp+NbStack-8]$/;"	d
alloc_func	src/zconf.h	130;"	d
alloc_func	src/zlib.h	/^typedef voidpf (*alloc_func) OF((voidpf opaque, uInt items, uInt size));$/;"	t
alloc_func	zconf.h	130;"	d
alloc_func	zlib.h	/^typedef voidpf (*alloc_func) OF((voidpf opaque, uInt items, uInt size));$/;"	t
allocate_new_datablock	src/contrib/minizip/zip.c	/^local linkedlist_datablock_internal* allocate_new_datablock()$/;"	f
attach	src/contrib/iostream/zfstream.cpp	/^gzfilebuf *gzfilebuf::attach( int file_descriptor,$/;"	f	class:gzfilebuf	signature:( int file_descriptor, int io_mode )
attach	src/contrib/iostream/zfstream.cpp	/^void gzfilestream_common::attach( int fd, int io_mode ) {$/;"	f	class:gzfilestream_common	signature:( int fd, int io_mode )
attach	src/contrib/iostream/zfstream.h	/^  gzfilebuf *attach( int file_descriptor, int io_mode );$/;"	p	class:gzfilebuf	access:public	signature:( int file_descriptor, int io_mode )
attach	src/contrib/iostream/zfstream.h	/^  void attach( int fd, int io_mode );$/;"	p	class:gzfilestream_common	access:public	signature:( int fd, int io_mode )
attach	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::attach(int fd,$/;"	f	class:gzfilebuf	signature:(int fd, std::ios_base::openmode mode)
attach	src/contrib/iostream3/zfstream.cc	/^gzifstream::attach(int fd,$/;"	f	class:gzifstream	signature:(int fd, std::ios_base::openmode mode)
attach	src/contrib/iostream3/zfstream.cc	/^gzofstream::attach(int fd,$/;"	f	class:gzofstream	signature:(int fd, std::ios_base::openmode mode)
attach	src/contrib/iostream3/zfstream.h	/^  attach(int fd,$/;"	p	class:gzfilebuf	access:public	signature:(int fd, std::ios_base::openmode mode)
attach	src/contrib/iostream3/zfstream.h	/^  attach(int fd,$/;"	p	class:gzifstream	access:public	signature:(int fd, std::ios_base::openmode mode = std::ios_base::in)
attach	src/contrib/iostream3/zfstream.h	/^  attach(int fd,$/;"	p	class:gzofstream	access:public	signature:(int fd, std::ios_base::openmode mode = std::ios_base::out)
attr_item	src/contrib/untgz/untgz.c	/^struct attr_item$/;"	s	file:
attr_item::fname	src/contrib/untgz/untgz.c	/^  char              *fname;$/;"	m	struct:attr_item	file:	access:public
attr_item::mode	src/contrib/untgz/untgz.c	/^  int                mode;$/;"	m	struct:attr_item	file:	access:public
attr_item::next	src/contrib/untgz/untgz.c	/^  struct attr_item  *next;$/;"	m	struct:attr_item	typeref:struct:attr_item::attr_item	file:	access:public
attr_item::time	src/contrib/untgz/untgz.c	/^  time_t             time;$/;"	m	struct:attr_item	file:	access:public
avail_in	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public uint avail_in;$/;"	f	struct:DotZLib.ZStream	access:public
avail_in	src/zlib.h	/^    uInt     avail_in;  \/* number of bytes available at next_in *\/$/;"	m	struct:z_stream_s	access:public
avail_in	zlib.h	/^    uInt     avail_in;  \/* number of bytes available at next_in *\/$/;"	m	struct:z_stream_s	access:public
avail_in_strm	src/contrib/inflate86/inffast.S	/^#define avail_in_strm  4   \/* strm->avail_in *\/$/;"	d
avail_in_this_block	src/contrib/minizip/zip.c	/^  uLong  avail_in_this_block;$/;"	m	struct:linkedlist_datablock_internal_s	file:	access:public
avail_out	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public uint avail_out;$/;"	f	struct:DotZLib.ZStream	access:public
avail_out	src/zlib.h	/^    uInt     avail_out; \/* remaining free space at next_out *\/$/;"	m	struct:z_stream_s	access:public
avail_out	zlib.h	/^    uInt     avail_out; \/* remaining free space at next_out *\/$/;"	m	struct:z_stream_s	access:public
avail_out_strm	src/contrib/inflate86/inffast.S	/^#define avail_out_strm 16  \/* strm->avail_out *\/$/;"	d
back	src/examples/gzlog.c	/^    int back;       \/* location of first block id in bits back from first *\/$/;"	m	struct:log	file:	access:public
back	src/inflate.h	/^    int back;                   \/* bits back of last unprocessed length\/lit *\/$/;"	m	struct:inflate_state	access:public
bail	src/examples/gzjoin.c	/^local int bail(char *why1, char *why2)$/;"	f	signature:(char *why1, char *why2)
base_dist	src/trees.c	/^local int base_dist[D_CODES];$/;"	v
base_dist	src/trees.h	/^local const int base_dist[D_CODES] = {$/;"	v
base_length	src/trees.c	/^local int base_length[LENGTH_CODES];$/;"	v
base_length	src/trees.h	/^local const int base_length[LENGTH_CODES] = {$/;"	v
bclose	src/examples/gzjoin.c	/^local void bclose(bin *in)$/;"	f	signature:(bin *in)
beenhere	src/examples/enough.c	/^local int beenhere(int syms, int len, int left, int mem, int rem)$/;"	f	signature:(int syms, int len, int left, int mem, int rem)
beg	src/contrib/inflate86/inffast.S	/^#define beg            40  \/* unsigned char* *\/$/;"	d
beg	src/contrib/masmx64/inffas8664.c	/^\/* 40   20 *\/ unsigned char FAR *beg;   \/*          inflate()'s init next_out *\/$/;"	m	struct:inffast_ar	file:	access:public
begin_pos	src/contrib/minizip/zip.c	/^    ZPOS64_T begin_pos;            \/* position of the beginning of the zipfile *\/$/;"	m	struct:__anon10	file:	access:public
best_len	src/contrib/masmx86/match686.asm	/^    best_len        equ     dword ptr [esp+NbStack-36]$/;"	d
bestlen	src/contrib/amd64/amd64-match.S	/^#define	bestlen		r11$/;"	d
bestlen	src/contrib/asm686/match.S	/^#define	bestlen			28	\/* size of best match so far	*\/$/;"	d
bestlen	src/contrib/masmx86/match686.asm	/^bestlen     equ  esp + 28   ; size of best match so far$/;"	d
bestlend	src/contrib/amd64/amd64-match.S	/^#define	bestlend	r11d$/;"	d
bget	src/examples/gzjoin.c	140;"	d	file:
bget4	src/examples/gzjoin.c	/^local unsigned long bget4(bin *in)$/;"	f	signature:(bin *in)
bi_buf	src/deflate.h	/^    ush bi_buf;$/;"	m	struct:internal_state	access:public
bi_flush	src/trees.c	/^local void bi_flush       OF((deflate_state *s));$/;"	p	file:	signature:(deflate_state *s)
bi_flush	src/trees.c	/^local void bi_flush(s)$/;"	f
bi_reverse	src/trees.c	/^local unsigned bi_reverse OF((unsigned value, int length));$/;"	p	file:	signature:(unsigned value, int length)
bi_reverse	src/trees.c	/^local unsigned bi_reverse(code, len)$/;"	f
bi_valid	src/deflate.h	/^    int bi_valid;$/;"	m	struct:internal_state	access:public
bi_windup	src/trees.c	/^local void bi_windup      OF((deflate_state *s));$/;"	p	file:	signature:(deflate_state *s)
bi_windup	src/trees.c	/^local void bi_windup(s)$/;"	f
big_t	src/examples/enough.c	/^typedef unsigned long long big_t;   \/* type for code counting *\/$/;"	t	file:
bin	src/examples/gzjoin.c	/^} bin;$/;"	t	typeref:struct:__anon3	file:
bitSize	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        private static int bitSize(uint bits)$/;"	m	class:DotZLib.Info	file:	access:private	signature:(uint bits)
bitbuf	src/contrib/blast/blast.c	/^    int bitbuf;                 \/* bit buffer *\/$/;"	m	struct:state	file:	access:public
bitbuf	src/contrib/puff/puff.c	/^    int bitbuf;                 \/* bit buffer *\/$/;"	m	struct:state	file:	access:public
bitcnt	src/contrib/blast/blast.c	/^    int bitcnt;                 \/* number of bits in bit buffer *\/$/;"	m	struct:state	file:	access:public
bitcnt	src/contrib/puff/puff.c	/^    int bitcnt;                 \/* number of bits in bit buffer *\/$/;"	m	struct:state	file:	access:public
bits	src/contrib/blast/blast.c	/^local int bits(struct state *s, int need)$/;"	f	signature:(struct state *s, int need)
bits	src/contrib/infback9/inftree9.h	/^    unsigned char bits;         \/* bits in this part of the code *\/$/;"	m	struct:__anon12	access:public
bits	src/contrib/masmx64/inffas8664.c	/^\/* 88   44 *\/ unsigned bits;            \/* ebx rbx  local strm->bits *\/$/;"	m	struct:inffast_ar	file:	access:public
bits	src/contrib/puff/puff.c	/^local int bits(struct state *s, int need)$/;"	f	signature:(struct state *s, int need)
bits	src/examples/zran.c	/^    int bits;           \/* number of bits (1-7) from byte at in - 1, or 0 *\/$/;"	m	struct:point	file:	access:public
bits	src/inflate.h	/^    unsigned bits;              \/* number of bits in "in" *\/$/;"	m	struct:inflate_state	access:public
bits	src/inftrees.h	/^    unsigned char bits;         \/* bits in this part of the code *\/$/;"	m	struct:__anon16	access:public
bits_r	src/contrib/inflate86/inffast.S	/^#define bits_r     %bl$/;"	d
bits_sent	src/deflate.h	/^    ulg bits_sent;      \/* bit length of compressed data sent mod 2^32 *\/$/;"	m	struct:internal_state	access:public
bits_state	src/contrib/inflate86/inffast.S	/^#define bits_state     52  \/* state->bits *\/$/;"	d
bits_state	src/contrib/masmx86/inffas32.asm	/^bits_state	 equ	(48+4+zlib1222sup)	;\/* state->bits	*\/$/;"	d
bitslong_r	src/contrib/inflate86/inffast.S	/^#define bitslong_r %ebp$/;"	d
bitslong_r	src/contrib/inflate86/inffast.S	/^#define bitslong_r %ebx$/;"	d
bl_count	src/deflate.h	/^    ush bl_count[MAX_BITS+1];$/;"	m	struct:internal_state	access:public
bl_desc	src/deflate.h	/^    struct tree_desc_s bl_desc;              \/* desc. for bit length tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s	access:public
bl_order	src/trees.c	/^local const uch bl_order[BL_CODES]$/;"	v
bl_tree	src/deflate.h	/^    struct ct_data_s bl_tree[2*BL_CODES+1];  \/* Huffman tree for bit lengths *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s	access:public
blast	src/contrib/blast/blast.c	/^int blast(blast_in infun, void *inhow, blast_out outfun, void *outhow)$/;"	f	signature:(blast_in infun, void *inhow, blast_out outfun, void *outhow)
blast	src/contrib/blast/blast.h	/^int blast(blast_in infun, void *inhow, blast_out outfun, void *outhow);$/;"	p	signature:(blast_in infun, void *inhow, blast_out outfun, void *outhow)
blast_in	src/contrib/blast/blast.h	/^typedef unsigned (*blast_in)(void *how, unsigned char **buf);$/;"	t
blast_out	src/contrib/blast/blast.h	/^typedef int (*blast_out)(void *how, unsigned char *buf, unsigned len);$/;"	t
bload	src/examples/gzjoin.c	/^local int bload(bin *in)$/;"	f	signature:(bin *in)
block_done	src/deflate.c	/^    block_done,     \/* block flush performed *\/$/;"	e	enum:__anon18	file:
block_start	src/deflate.h	/^    long block_start;$/;"	m	struct:internal_state	access:public
block_state	src/deflate.c	/^} block_state;$/;"	t	typeref:enum:__anon18	file:
bopen	src/examples/gzjoin.c	/^local bin *bopen(char *name)$/;"	f	signature:(char *name)
bskip	src/examples/gzjoin.c	/^local void bskip(bin *in, unsigned skip)$/;"	f	signature:(bin *in, unsigned skip)
bstream	src/contrib/minizip/unzip.c	/^    bz_stream bstream;          \/* bzLib stream structure for bziped *\/$/;"	m	struct:__anon7	file:	access:public
bstream	src/contrib/minizip/zip.c	/^    bz_stream bstream;          \/* bzLib stream structure for bziped *\/$/;"	m	struct:__anon9	file:	access:public
buf	src/contrib/inflate86/inffast.S	/^#define buf            28  \/* char[ 12 ] *\/$/;"	d
buf	src/examples/gzappend.c	/^    unsigned char *buf;         \/* buffer *\/$/;"	m	struct:__anon2	file:	access:public
buf	src/examples/gzjoin.c	/^    unsigned char *buf;     \/* allocated buffer of length CHUNK *\/$/;"	m	struct:__anon3	file:	access:public
buffer	src/contrib/iostream/zfstream.h	/^  gzfilebuf buffer;$/;"	m	class:gzfilestream_common	access:private
buffer	src/contrib/iostream3/zfstream.h	/^  char_type* buffer;$/;"	m	class:gzfilebuf	access:private
buffer	src/contrib/untgz/untgz.c	/^  char               buffer[BLOCKSIZE];$/;"	m	union:tar_buffer	file:	access:public
buffer_size	src/contrib/iostream3/zfstream.h	/^  std::streamsize buffer_size;$/;"	m	class:gzfilebuf	access:private
buffered_data	src/contrib/minizip/zip.c	/^    Byte buffered_data[Z_BUFSIZE];\/* buffer contain compressed data to be writ*\/$/;"	m	struct:__anon9	file:	access:public
build_bl_tree	src/trees.c	/^local int  build_bl_tree  OF((deflate_state *s));$/;"	p	file:	signature:(deflate_state *s)
build_bl_tree	src/trees.c	/^local int build_bl_tree(s)$/;"	f
build_index	src/examples/zran.c	/^local int build_index(FILE *in, off_t span, struct access **built)$/;"	f	signature:(FILE *in, off_t span, struct access **built)
build_tree	src/trees.c	/^local void build_tree     OF((deflate_state *s, tree_desc *desc));$/;"	p	file:	signature:(deflate_state *s, tree_desc *desc)
build_tree	src/trees.c	/^local void build_tree(s, desc)$/;"	f
bye	src/examples/gzappend.c	/^local void bye(char *msg1, char *msg2)$/;"	f	signature:(char *msg1, char *msg2)
byte	src/contrib/iostream2/zstream.h	/^    struct Val { unsigned char byte; size_t word; } val;$/;"	m	struct:zstringlen::Val	access:public
byteArrEqual	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        public static bool byteArrEqual( byte[] lhs, byte[] rhs )$/;"	m	class:DotZLibTests.Utils	access:public	signature:( byte[] lhs, byte[] rhs )
byte_before_the_zipfile	src/contrib/minizip/unzip.c	/^    ZPOS64_T byte_before_the_zipfile;\/* byte before the zipfile, (>0 for sfx)*\/$/;"	m	struct:__anon7	file:	access:public
byte_before_the_zipfile	src/contrib/minizip/unzip.c	/^    ZPOS64_T byte_before_the_zipfile;\/* byte before the zipfile, (>0 for sfx)*\/$/;"	m	struct:__anon8	file:	access:public
bythirds	src/contrib/puff/pufftest.c	/^local size_t bythirds(size_t size)$/;"	f	signature:(size_t size)
call_zopen64	src/contrib/minizip/ioapi.c	/^voidpf call_zopen64 (const zlib_filefunc64_32_def* pfilefunc,const void*filename,int mode)$/;"	f	signature:(const zlib_filefunc64_32_def* pfilefunc,const void*filename,int mode)
call_zopen64	src/contrib/minizip/ioapi.h	/^voidpf call_zopen64 OF((const zlib_filefunc64_32_def* pfilefunc,const void*filename,int mode));$/;"	p	signature:(const zlib_filefunc64_32_def* pfilefunc,const void*filename,int mode)
call_zseek64	src/contrib/minizip/ioapi.c	/^long call_zseek64 (const zlib_filefunc64_32_def* pfilefunc,voidpf filestream, ZPOS64_T offset, int origin)$/;"	f	signature:(const zlib_filefunc64_32_def* pfilefunc,voidpf filestream, ZPOS64_T offset, int origin)
call_zseek64	src/contrib/minizip/ioapi.h	/^long    call_zseek64 OF((const zlib_filefunc64_32_def* pfilefunc,voidpf filestream, ZPOS64_T offset, int origin));$/;"	p	signature:(const zlib_filefunc64_32_def* pfilefunc,voidpf filestream, ZPOS64_T offset, int origin)
call_ztell64	src/contrib/minizip/ioapi.c	/^ZPOS64_T call_ztell64 (const zlib_filefunc64_32_def* pfilefunc,voidpf filestream)$/;"	f	signature:(const zlib_filefunc64_32_def* pfilefunc,voidpf filestream)
call_ztell64	src/contrib/minizip/ioapi.h	/^ZPOS64_T call_ztell64 OF((const zlib_filefunc64_32_def* pfilefunc,voidpf filestream));$/;"	p	signature:(const zlib_filefunc64_32_def* pfilefunc,voidpf filestream)
calloc	src/zutil.c	/^extern voidp  calloc OF((uInt items, uInt size));$/;"	p	file:	signature:(uInt items, uInt size)
ccrc	src/examples/gzlog.c	/^    ulong ccrc;     \/* crc of compressed data *\/$/;"	m	struct:log	file:	access:public
central_dir	src/contrib/minizip/zip.c	/^    linkedlist_data central_dir;\/* datablock with central dir in construction*\/$/;"	m	struct:__anon10	file:	access:public
central_header	src/contrib/minizip/zip.c	/^    char* central_header;       \/* central header data for the current file *\/$/;"	m	struct:__anon9	file:	access:public
central_pos	src/contrib/minizip/unzip.c	/^    ZPOS64_T central_pos;          \/* position of the beginning of the central dir*\/$/;"	m	struct:__anon8	file:	access:public
chain_length	src/contrib/masmx86/match686.asm	/^    chain_length    equ     dword ptr [esp+NbStack-28]$/;"	d
chainlenwmask	src/contrib/amd64/amd64-match.S	/^#define	chainlenwmask	edx \/* high word: current chain len low word: s->wmask *\/$/;"	d
chainlenwmask	src/contrib/asm686/match.S	/^#define	chainlenwmask		0	\/* high word: current chain len	*\/$/;"	d
chainlenwmask	src/contrib/gcc_gvmat64/gvmat64.S	/^#define chainlenwmask     (rsp + 8 - LocalVarsSize)$/;"	d
chainlenwmask	src/contrib/masmx64/gvmat64.asm	/^ chainlenwmask   equ  rsp + 8 - LocalVarsSize    ; high word: current chain len$/;"	d
chainlenwmask	src/contrib/masmx86/match686.asm	/^chainlenwmask   equ  esp + 0    ; high word: current chain len$/;"	d
change_file_date	src/contrib/minizip/miniunz.c	/^void change_file_date(filename,dosdate,tmu_date)$/;"	f
charf	src/zconf.h	/^typedef char  FAR charf;$/;"	t
charf	src/zconf.h	131;"	d
charf	zconf.h	/^typedef char  FAR charf;$/;"	t
charf	zconf.h	131;"	d
check	src/examples/gun.c	/^    int check;                  \/* true if checking crc and total *\/$/;"	m	struct:outd	file:	access:public
check	src/inflate.h	/^    unsigned long check;        \/* protected copy of check value *\/$/;"	m	struct:inflate_state	access:public
check_exist_file	src/contrib/minizip/minizip.c	/^int check_exist_file(filename)$/;"	f
check_match	src/deflate.c	/^local  void check_match OF((deflate_state *s, IPos start, IPos match,$/;"	p	file:	signature:(deflate_state *s, IPos start, IPos match, int length)
check_match	src/deflate.c	/^local void check_match(s, start, match, length)$/;"	f
check_match	src/deflate.c	1377;"	d	file:
chksum	src/contrib/untgz/untgz.c	/^  char chksum[8];               \/* 148 *\/$/;"	m	struct:tar_header	file:	access:public
chmod	src/contrib/untgz/untgz.c	32;"	d	file:
ci	src/contrib/minizip/zip.c	/^    curfile64_info ci;            \/* info on the file curretly writing *\/$/;"	m	struct:__anon10	file:	access:public
cleanUp	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private void cleanUp(bool isDisposing)$/;"	m	class:DotZLib.GZipStream	file:	access:private	signature:(bool isDisposing)
cleanup	src/examples/enough.c	/^local void cleanup(void)$/;"	f	signature:(void)
clen	src/examples/gzlog.c	/^    ulong clen;     \/* length (modulo 2^32) of compressed data *\/$/;"	m	struct:log	file:	access:public
close	src/contrib/iostream/zfstream.cpp	/^gzfilebuf *gzfilebuf::close() {$/;"	f	class:gzfilebuf	signature:()
close	src/contrib/iostream/zfstream.cpp	/^void gzfilestream_common::close() {$/;"	f	class:gzfilestream_common	signature:()
close	src/contrib/iostream/zfstream.h	/^  gzfilebuf *close();$/;"	p	class:gzfilebuf	access:public	signature:()
close	src/contrib/iostream/zfstream.h	/^  void close();$/;"	p	class:gzfilestream_common	access:public	signature:()
close	src/contrib/iostream2/zstream.h	/^        int close() {$/;"	f	class:izstream	access:public	signature:()
close	src/contrib/iostream2/zstream.h	/^        int close() {$/;"	f	class:ozstream	access:public	signature:()
close	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::close()$/;"	f	class:gzfilebuf	signature:()
close	src/contrib/iostream3/zfstream.cc	/^gzifstream::close()$/;"	f	class:gzifstream	signature:()
close	src/contrib/iostream3/zfstream.cc	/^gzofstream::close()$/;"	f	class:gzofstream	signature:()
close	src/contrib/iostream3/zfstream.h	/^  close();$/;"	p	class:gzfilebuf	access:public	signature:()
close	src/contrib/iostream3/zfstream.h	/^  close();$/;"	p	class:gzifstream	access:public	signature:()
close	src/contrib/iostream3/zfstream.h	/^  close();$/;"	p	class:gzofstream	access:public	signature:()
close	src/gzguts.h	42;"	d
close_file_func	src/contrib/minizip/ioapi.h	/^typedef int      (ZCALLBACK *close_file_func)     OF((voidpf opaque, voidpf stream));$/;"	t
code	src/contrib/infback9/inftree9.h	/^} code;$/;"	t	typeref:struct:__anon12
code	src/deflate.h	/^        ush  code;       \/* bit string *\/$/;"	m	union:ct_data_s::__anon4	access:public
code	src/examples/enough.c	/^local int *code;        \/* number of symbols assigned to each bit length *\/$/;"	v
code	src/inftrees.h	/^} code;$/;"	t	typeref:struct:__anon16
code_t	src/examples/enough.c	/^typedef unsigned long long code_t;  \/* type for bit pattern counting *\/$/;"	t	file:
codes	src/contrib/infback9/inflate9.h	/^    code codes[ENOUGH];         \/* space for code tables *\/$/;"	m	struct:inflate_state	access:public
codes	src/contrib/puff/puff.c	/^local int codes(struct state *s,$/;"	f	signature:(struct state *s, const struct huffman *lencode, const struct huffman *distcode)
codes	src/inflate.h	/^    code codes[ENOUGH];         \/* space for code tables *\/$/;"	m	struct:inflate_state	access:public
codetype	src/contrib/infback9/inftree9.h	/^} codetype;$/;"	t	typeref:enum:__anon13
codetype	src/inftrees.h	/^} codetype;$/;"	t	typeref:enum:__anon17
comm_max	src/zlib.h	/^    uInt    comm_max;   \/* space at comment (only when reading header) *\/$/;"	m	struct:gz_header_s	access:public
comm_max	zlib.h	/^    uInt    comm_max;   \/* space at comment (only when reading header) *\/$/;"	m	struct:gz_header_s	access:public
comment	src/zlib.h	/^    Bytef   *comment;   \/* pointer to zero-terminated comment or Z_NULL *\/$/;"	m	struct:gz_header_s	access:public
comment	zlib.h	/^    Bytef   *comment;   \/* pointer to zero-terminated comment or Z_NULL *\/$/;"	m	struct:gz_header_s	access:public
compress	src/compress.c	/^int ZEXPORT compress (dest, destLen, source, sourceLen)$/;"	f
compress	src/contrib/pascal/zlibpas.pas	/^function compress(dest: PChar; var destLen: LongInt;$/;"	f
compress	src/contrib/pascal/zlibpas.pas	/^function compress; external;$/;"	f
compress	src/zconf.h	33;"	d
compress	src/zlib.h	/^ZEXTERN int ZEXPORT compress OF((Bytef *dest,   uLongf *destLen,$/;"	p	signature:(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
compress	zconf.h	33;"	d
compress	zlib.h	/^ZEXTERN int ZEXPORT compress OF((Bytef *dest,   uLongf *destLen,$/;"	p	signature:(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
compress2	src/compress.c	/^int ZEXPORT compress2 (dest, destLen, source, sourceLen, level)$/;"	f
compress2	src/contrib/pascal/zlibpas.pas	/^function compress2(dest: PChar; var destLen: LongInt;$/;"	f
compress2	src/contrib/pascal/zlibpas.pas	/^function compress2; external;$/;"	f
compress2	src/zconf.h	34;"	d
compress2	src/zlib.h	/^ZEXTERN int ZEXPORT compress2 OF((Bytef *dest,   uLongf *destLen,$/;"	p	signature:(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen, int level)
compress2	zconf.h	34;"	d
compress2	zlib.h	/^ZEXTERN int ZEXPORT compress2 OF((Bytef *dest,   uLongf *destLen,$/;"	p	signature:(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen, int level)
compressBound	src/compress.c	/^uLong ZEXPORT compressBound (sourceLen)$/;"	f
compressBound	src/contrib/delphi/ZLib.pas	/^procedure compressBound; external;$/;"	p
compressBound	src/contrib/pascal/zlibpas.pas	/^function compressBound(sourceLen: LongInt): LongInt;$/;"	f
compressBound	src/contrib/pascal/zlibpas.pas	/^function compressBound; external;$/;"	f
compressBound	src/zconf.h	35;"	d
compressBound	src/zlib.h	/^ZEXTERN uLong ZEXPORT compressBound OF((uLong sourceLen));$/;"	p	signature:(uLong sourceLen)
compressBound	zconf.h	35;"	d
compressBound	zlib.h	/^ZEXTERN uLong ZEXPORT compressBound OF((uLong sourceLen));$/;"	p	signature:(uLong sourceLen)
compress_block	src/trees.c	/^local void compress_block OF((deflate_state *s, const ct_data *ltree,$/;"	p	file:	signature:(deflate_state *s, const ct_data *ltree, const ct_data *dtree)
compress_block	src/trees.c	/^local void compress_block(s, ltree, dtree)$/;"	f
compress_func	src/deflate.c	/^typedef block_state (*compress_func) OF((deflate_state *s, int flush));$/;"	t	file:
compressedData	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        private ArrayList compressedData = new ArrayList();$/;"	f	class:DotZLibTests.DeflateInflateTests	file:	access:private
compressed_len	src/deflate.h	/^    ulg compressed_len; \/* total bit length of compressed file mod 2^32 *\/$/;"	m	struct:internal_state	access:public
compressed_size	src/contrib/minizip/unzip.h	/^    ZPOS64_T compressed_size;   \/* compressed size                 8 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
compressed_size	src/contrib/minizip/unzip.h	/^    uLong compressed_size;      \/* compressed size                 4 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
compression_method	src/contrib/minizip/unzip.c	/^    uLong compression_method;   \/* compression method (0==store) *\/$/;"	m	struct:__anon7	file:	access:public
compression_method	src/contrib/minizip/unzip.h	/^    uLong compression_method;   \/* compression method              2 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
compression_method	src/contrib/minizip/unzip.h	/^    uLong compression_method;   \/* compression method              2 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
config	src/deflate.c	/^} config;$/;"	t	typeref:struct:config_s	file:
config_s	src/deflate.c	/^typedef struct config_s {$/;"	s	file:
config_s::func	src/deflate.c	/^   compress_func func;$/;"	m	struct:config_s	file:	access:public
config_s::good_length	src/deflate.c	/^   ush good_length; \/* reduce lazy search above this match length *\/$/;"	m	struct:config_s	file:	access:public
config_s::max_chain	src/deflate.c	/^   ush max_chain;$/;"	m	struct:config_s	file:	access:public
config_s::max_lazy	src/deflate.c	/^   ush max_lazy;    \/* do not perform lazy search above this match length *\/$/;"	m	struct:config_s	file:	access:public
config_s::nice_length	src/deflate.c	/^   ush nice_length; \/* quit search above this match length *\/$/;"	m	struct:config_s	file:	access:public
configuration_table	src/deflate.c	/^local const config configuration_table[10] = {$/;"	v
configuration_table	src/deflate.c	/^local const config configuration_table[2] = {$/;"	v
const	src/zconf.h	217;"	d
const	zconf.h	217;"	d
construct	src/contrib/blast/blast.c	/^local int construct(struct huffman *h, const unsigned char *rep, int n)$/;"	f	signature:(struct huffman *h, const unsigned char *rep, int n)
construct	src/contrib/puff/puff.c	/^local int construct(struct huffman *h, const short *length, int n)$/;"	f	signature:(struct huffman *h, const short *length, int n)
copyInput	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        protected void copyInput(byte[] data, int startIndex, int count)$/;"	m	class:DotZLib.CodecBase	access:protected	signature:(byte[] data, int startIndex, int count)
copy_block	src/trees.c	/^local void copy_block     OF((deflate_state *s, charf *buf, unsigned len,$/;"	p	file:	signature:(deflate_state *s, charf *buf, unsigned len, int header)
copy_block	src/trees.c	/^local void copy_block(s, buf, len, header)$/;"	f
copymeta	src/examples/gun.c	/^local void copymeta(char *from, char *to)$/;"	f	signature:(char *from, char *to)
count	src/contrib/blast/blast.c	/^    short *count;       \/* number of symbols of each length *\/$/;"	m	struct:huffman	file:	access:public
count	src/contrib/puff/puff.c	/^    short *count;       \/* number of symbols of each length *\/$/;"	m	struct:huffman	file:	access:public
count	src/examples/enough.c	/^local big_t count(int syms, int len, int left)$/;"	f	signature:(int syms, int len, int left)
cover_back	src/test/infcover.c	/^local void cover_back(void)$/;"	f	signature:(void)
cover_fast	src/test/infcover.c	/^local void cover_fast(void)$/;"	f	signature:(void)
cover_inflate	src/test/infcover.c	/^local void cover_inflate(void)$/;"	f	signature:(void)
cover_support	src/test/infcover.c	/^local void cover_support(void)$/;"	f	signature:(void)
cover_trees	src/test/infcover.c	/^local void cover_trees(void)$/;"	f	signature:(void)
cover_wrap	src/test/infcover.c	/^local void cover_wrap(void)$/;"	f	signature:(void)
crc	src/contrib/minizip/unzip.h	/^    uLong crc;                  \/* crc-32                          4 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
crc	src/contrib/minizip/unzip.h	/^    uLong crc;                  \/* crc-32                          4 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
crc	src/examples/gun.c	/^    unsigned long crc;$/;"	m	struct:outd	file:	access:public
crc32	src/contrib/delphi/ZLib.pas	/^procedure crc32; external;$/;"	p
crc32	src/contrib/dotzlib/DotZLib/ChecksumImpl.cs	/^        private static extern uint crc32(uint crc, int data, uint length);$/;"	m	class:DotZLib.CRC32Checksum	file:	access:private	signature:(uint crc, int data, uint length)
crc32	src/contrib/minizip/unzip.c	/^    uLong crc32;                \/* crc32 of all data uncompressed *\/$/;"	m	struct:__anon7	file:	access:public
crc32	src/contrib/minizip/zip.c	/^    uLong crc32;$/;"	m	struct:__anon9	file:	access:public
crc32	src/contrib/pascal/zlibpas.pas	/^function crc32(crc: LongInt; const buf: PChar; len: Integer): LongInt;$/;"	f
crc32	src/contrib/pascal/zlibpas.pas	/^function crc32; external;$/;"	f
crc32	src/crc32.c	/^unsigned long ZEXPORT crc32(crc, buf, len)$/;"	f
crc32	src/zconf.h	37;"	d
crc32	src/zlib.h	/^ZEXTERN uLong ZEXPORT crc32   OF((uLong crc, const Bytef *buf, uInt len));$/;"	p	signature:(uLong crc, const Bytef *buf, uInt len)
crc32	zconf.h	37;"	d
crc32	zlib.h	/^ZEXTERN uLong ZEXPORT crc32   OF((uLong crc, const Bytef *buf, uInt len));$/;"	p	signature:(uLong crc, const Bytef *buf, uInt len)
crc32_big	src/crc32.c	/^   local unsigned long crc32_big OF((unsigned long,$/;"	p	file:	signature:(unsigned long, const unsigned char FAR *, unsigned)
crc32_big	src/crc32.c	/^local unsigned long crc32_big(crc, buf, len)$/;"	f
crc32_combine	src/contrib/pascal/zlibpas.pas	/^function crc32_combine(crc1, crc2, len2: LongInt): LongInt;$/;"	f
crc32_combine	src/contrib/pascal/zlibpas.pas	/^function crc32_combine; external;$/;"	f
crc32_combine	src/crc32.c	/^uLong ZEXPORT crc32_combine(crc1, crc2, len2)$/;"	f
crc32_combine	src/zconf.h	38;"	d
crc32_combine	src/zlib.h	/^   ZEXTERN uLong ZEXPORT crc32_combine OF((uLong, uLong, z_off_t));$/;"	p	signature:(uLong, uLong, z_off_t)
crc32_combine	src/zlib.h	1714;"	d
crc32_combine	zconf.h	38;"	d
crc32_combine	zlib.h	/^   ZEXTERN uLong ZEXPORT crc32_combine OF((uLong, uLong, z_off_t));$/;"	p	signature:(uLong, uLong, z_off_t)
crc32_combine	zlib.h	1714;"	d
crc32_combine64	src/crc32.c	/^uLong ZEXPORT crc32_combine64(crc1, crc2, len2)$/;"	f
crc32_combine64	src/zconf.h	39;"	d
crc32_combine64	src/zlib.h	/^     ZEXTERN uLong ZEXPORT crc32_combine64 OF((uLong, uLong, z_off_t));$/;"	p	signature:(uLong, uLong, z_off_t)
crc32_combine64	src/zlib.h	/^   ZEXTERN uLong ZEXPORT crc32_combine64 OF((uLong, uLong, z_off64_t));$/;"	p	signature:(uLong, uLong, z_off64_t)
crc32_combine64	src/zutil.h	/^    ZEXTERN uLong ZEXPORT crc32_combine64 OF((uLong, uLong, z_off_t));$/;"	p	signature:(uLong, uLong, z_off_t)
crc32_combine64	zconf.h	39;"	d
crc32_combine64	zlib.h	/^     ZEXTERN uLong ZEXPORT crc32_combine64 OF((uLong, uLong, z_off_t));$/;"	p	signature:(uLong, uLong, z_off_t)
crc32_combine64	zlib.h	/^   ZEXTERN uLong ZEXPORT crc32_combine64 OF((uLong, uLong, z_off64_t));$/;"	p	signature:(uLong, uLong, z_off64_t)
crc32_combine64	zutil.h	/^    ZEXTERN uLong ZEXPORT crc32_combine64 OF((uLong, uLong, z_off_t));$/;"	p	signature:(uLong, uLong, z_off_t)
crc32_combine_	src/crc32.c	/^local uLong crc32_combine_ OF((uLong crc1, uLong crc2, z_off64_t len2));$/;"	p	file:	signature:(uLong crc1, uLong crc2, z_off64_t len2)
crc32_combine_	src/crc32.c	/^local uLong crc32_combine_(crc1, crc2, len2)$/;"	f
crc32_little	src/crc32.c	/^   local unsigned long crc32_little OF((unsigned long,$/;"	p	file:	signature:(unsigned long, const unsigned char FAR *, unsigned)
crc32_little	src/crc32.c	/^local unsigned long crc32_little(crc, buf, len)$/;"	f
crc32_wait	src/contrib/minizip/unzip.c	/^    uLong crc32_wait;           \/* crc32 we must obtain after decompress all *\/$/;"	m	struct:__anon7	file:	access:public
crc_table	src/crc32.c	/^local z_crc_t FAR crc_table[TBLS][256];$/;"	v
crc_table	src/crc32.h	/^local const z_crc_t FAR crc_table[TBLS][256] =$/;"	v
crc_table_empty	src/crc32.c	/^local volatile int crc_table_empty = 1;$/;"	v
crypt_header_size	src/contrib/minizip/zip.c	/^    int crypt_header_size;$/;"	m	struct:__anon9	file:	access:public
crypthead	src/contrib/minizip/crypt.h	/^static int crypthead(const char* passwd,      \/* password string *\/$/;"	f	signature:(const char* passwd, unsigned char* buf, int bufSize, unsigned long* pkeys, const z_crc_t* pcrc_32_tab, unsigned long crcForCrypting)
ct_data	src/deflate.h	/^} FAR ct_data;$/;"	t	typeref:struct:ct_data_s
ct_data_s	src/deflate.h	/^typedef struct ct_data_s {$/;"	s
ct_data_s::__anon4::code	src/deflate.h	/^        ush  code;       \/* bit string *\/$/;"	m	union:ct_data_s::__anon4	access:public
ct_data_s::__anon4::freq	src/deflate.h	/^        ush  freq;       \/* frequency count *\/$/;"	m	union:ct_data_s::__anon4	access:public
ct_data_s::__anon5::dad	src/deflate.h	/^        ush  dad;        \/* father node in Huffman tree *\/$/;"	m	union:ct_data_s::__anon5	access:public
ct_data_s::__anon5::len	src/deflate.h	/^        ush  len;        \/* length of bit string *\/$/;"	m	union:ct_data_s::__anon5	access:public
ct_data_s::dl	src/deflate.h	/^    } dl;$/;"	m	struct:ct_data_s	typeref:union:ct_data_s::__anon5	access:public
ct_data_s::fc	src/deflate.h	/^    } fc;$/;"	m	struct:ct_data_s	typeref:union:ct_data_s::__anon4	access:public
cur_file_info	src/contrib/minizip/unzip.c	/^    unz_file_info64 cur_file_info; \/* public info about the current file in zip*\/$/;"	m	struct:__anon8	file:	access:public
cur_file_info_internal	src/contrib/minizip/unzip.c	/^    unz_file_info64_internal cur_file_info_internal; \/* private info about it*\/$/;"	m	struct:__anon8	file:	access:public
cur_match	src/contrib/masmx86/match686.asm	/^    cur_match       equ     dword ptr[esp+NbStack-0]$/;"	d
curfile64_info	src/contrib/minizip/zip.c	/^} curfile64_info;$/;"	t	typeref:struct:__anon9	file:
curmatch	src/contrib/amd64/amd64-match.S	/^#define	curmatch	rsi$/;"	d
curmatch	src/contrib/asm686/match.S	/^#define	curmatch		60$/;"	d
curmatch	src/contrib/masmx86/match686.asm	/^curmatch    equ  esp + 60$/;"	d
curmatchd	src/contrib/amd64/amd64-match.S	/^#define	curmatchd	esi$/;"	d
current_file_ok	src/contrib/minizip/unzip.c	/^    ZPOS64_T current_file_ok;      \/* flag about the usability of the current file*\/$/;"	m	struct:__anon8	file:	access:public
d_buf	src/deflate.h	/^    ushf *d_buf;$/;"	m	struct:internal_state	access:public
d_code	src/deflate.h	305;"	d
d_desc	src/deflate.h	/^    struct tree_desc_s d_desc;               \/* desc. for distance tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s	access:public
dad	src/deflate.h	/^        ush  dad;        \/* father node in Huffman tree *\/$/;"	m	union:ct_data_s::__anon5	access:public
data	src/contrib/minizip/zip.c	/^  unsigned char data[SIZEDATA_INDATABLOCK];$/;"	m	struct:linkedlist_datablock_internal_s	file:	access:public
data_type	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        int data_type;$/;"	f	struct:DotZLib.ZStream	access:public
data_type	src/zlib.h	/^    int     data_type;  \/* best guess about the data type: binary or text *\/$/;"	m	struct:z_stream_s	access:public
data_type	zlib.h	/^    int     data_type;  \/* best guess about the data type: binary or text *\/$/;"	m	struct:z_stream_s	access:public
dcode	src/contrib/inflate86/inffast.S	/^#define dcode          12  \/* code* *\/$/;"	d
dcode	src/contrib/masmx64/inffas8664.c	/^\/* 72   36 *\/ code const FAR *dcode;    \/*     r11  local strm->distcode *\/$/;"	m	struct:inffast_ar	file:	access:public
dd	src/contrib/masmx86/inffas32.asm	/^dd	0$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	1$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	1023$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	1048575$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	1073741823$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	127$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	131071$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	134217727$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	15$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	16383$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	16777215$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	2047$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	2097151$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	2147483647$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	255$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	262143$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	268435455$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	3$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	31$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	32767$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	33554431$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	4095$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	4194303$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	4294967295$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	511$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	524287$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	536870911$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	63$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	65535$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	67108863$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	7$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	8191$/;"	l
dd	src/contrib/masmx86/inffas32.asm	/^dd	8388607$/;"	l
decode	src/contrib/blast/blast.c	/^local int decode(struct state *s, struct huffman *h)$/;"	f	signature:(struct state *s, struct huffman *h)
decode	src/contrib/puff/puff.c	/^local int decode(struct state *s, const struct huffman *h)$/;"	f	signature:(struct state *s, const struct huffman *h)
decomp	src/contrib/blast/blast.c	/^local int decomp(struct state *s)$/;"	f	signature:(struct state *s)
decrypt_byte	src/contrib/minizip/crypt.h	/^static int decrypt_byte(unsigned long* pkeys, const z_crc_t* pcrc_32_tab)$/;"	f	signature:(unsigned long* pkeys, const z_crc_t* pcrc_32_tab)
def	src/examples/zpipe.c	/^int def(FILE *source, FILE *dest, int level)$/;"	f	signature:(FILE *source, FILE *dest, int level)
deflate	src/contrib/delphi/ZLib.pas	/^function deflate(var strm: TZStreamRec; flush: Integer): Integer; external;$/;"	f
deflate	src/contrib/dotzlib/DotZLib/Deflater.cs	/^        private static extern int deflate(ref ZStream sz, int flush);$/;"	m	class:DotZLib.Deflater	file:	access:private	signature:(ref ZStream sz, int flush)
deflate	src/contrib/pascal/zlibpas.pas	/^function deflate(var strm: z_stream; flush: Integer): Integer;$/;"	f
deflate	src/contrib/pascal/zlibpas.pas	/^function deflate; external;$/;"	f
deflate	src/deflate.c	/^int ZEXPORT deflate (strm, flush)$/;"	f
deflate	src/zconf.h	40;"	d
deflate	src/zlib.h	/^ZEXTERN int ZEXPORT deflate OF((z_streamp strm, int flush));$/;"	p	signature:(z_streamp strm, int flush)
deflate	zconf.h	40;"	d
deflate	zlib.h	/^ZEXTERN int ZEXPORT deflate OF((z_streamp strm, int flush));$/;"	p	signature:(z_streamp strm, int flush)
deflateBound	src/contrib/pascal/zlibpas.pas	/^function deflateBound(var strm: z_stream; sourceLen: LongInt): LongInt;$/;"	f
deflateBound	src/contrib/pascal/zlibpas.pas	/^function deflateBound; external;$/;"	f
deflateBound	src/deflate.c	/^uLong ZEXPORT deflateBound(strm, sourceLen)$/;"	f
deflateBound	src/zconf.h	41;"	d
deflateBound	src/zlib.h	/^ZEXTERN uLong ZEXPORT deflateBound OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, uLong sourceLen)
deflateBound	zconf.h	41;"	d
deflateBound	zlib.h	/^ZEXTERN uLong ZEXPORT deflateBound OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, uLong sourceLen)
deflateCopy	src/contrib/pascal/zlibpas.pas	/^function deflateCopy(var dest, source: z_stream): Integer;$/;"	f
deflateCopy	src/contrib/pascal/zlibpas.pas	/^function deflateCopy; external;$/;"	f
deflateCopy	src/deflate.c	/^int ZEXPORT deflateCopy (dest, source)$/;"	f
deflateCopy	src/zconf.h	42;"	d
deflateCopy	src/zlib.h	/^ZEXTERN int ZEXPORT deflateCopy OF((z_streamp dest,$/;"	p	signature:(z_streamp dest, z_streamp source)
deflateCopy	zconf.h	42;"	d
deflateCopy	zlib.h	/^ZEXTERN int ZEXPORT deflateCopy OF((z_streamp dest,$/;"	p	signature:(z_streamp dest, z_streamp source)
deflateEnd	src/contrib/delphi/ZLib.pas	/^function deflateEnd(var strm: TZStreamRec): Integer; external;$/;"	f
deflateEnd	src/contrib/dotzlib/DotZLib/Deflater.cs	/^        private static extern int deflateEnd(ref ZStream sz);$/;"	m	class:DotZLib.Deflater	file:	access:private	signature:(ref ZStream sz)
deflateEnd	src/contrib/pascal/zlibpas.pas	/^function deflateEnd(var strm: z_stream): Integer;$/;"	f
deflateEnd	src/contrib/pascal/zlibpas.pas	/^function deflateEnd; external;$/;"	f
deflateEnd	src/deflate.c	/^int ZEXPORT deflateEnd (strm)$/;"	f
deflateEnd	src/zconf.h	43;"	d
deflateEnd	src/zlib.h	/^ZEXTERN int ZEXPORT deflateEnd OF((z_streamp strm));$/;"	p	signature:(z_streamp strm)
deflateEnd	zconf.h	43;"	d
deflateEnd	zlib.h	/^ZEXTERN int ZEXPORT deflateEnd OF((z_streamp strm));$/;"	p	signature:(z_streamp strm)
deflateInit	src/contrib/pascal/zlibpas.pas	/^function deflateInit(var strm: z_stream; level: Integer): Integer;$/;"	f
deflateInit	src/zlib.h	1647;"	d
deflateInit	zlib.h	1647;"	d
deflateInit2	src/contrib/pascal/zlibpas.pas	/^function deflateInit2(var strm: z_stream; level, method, windowBits, memLevel,$/;"	f
deflateInit2	src/contrib/pascal/zlibpas.pas	/^function deflateInit2(var strm: z_stream; level, method, windowBits,$/;"	f
deflateInit2	src/zlib.h	1651;"	d
deflateInit2	zlib.h	1651;"	d
deflateInit2_	src/contrib/delphi/ZLib.pas	/^procedure deflateInit2_; external;$/;"	p
deflateInit2_	src/contrib/pascal/zlibpas.pas	/^function deflateInit2_(var strm: z_stream;$/;"	f
deflateInit2_	src/contrib/pascal/zlibpas.pas	/^function deflateInit2_; external;$/;"	f
deflateInit2_	src/deflate.c	/^int ZEXPORT deflateInit2_(strm, level, method, windowBits, memLevel, strategy,$/;"	f
deflateInit2_	src/zconf.h	44;"	d
deflateInit2_	src/zlib.h	/^ZEXTERN int ZEXPORT deflateInit2_ OF((z_streamp strm, int  level, int  method,$/;"	p	signature:(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
deflateInit2_	zconf.h	44;"	d
deflateInit2_	zlib.h	/^ZEXTERN int ZEXPORT deflateInit2_ OF((z_streamp strm, int  level, int  method,$/;"	p	signature:(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
deflateInit_	src/contrib/delphi/ZLib.pas	/^function deflateInit_(var strm: TZStreamRec; level: Integer; version: PChar;$/;"	f
deflateInit_	src/contrib/dotzlib/DotZLib/Deflater.cs	/^        private static extern int deflateInit_(ref ZStream sz, int level, string vs, int size);$/;"	m	class:DotZLib.Deflater	file:	access:private	signature:(ref ZStream sz, int level, string vs, int size)
deflateInit_	src/contrib/pascal/zlibpas.pas	/^function deflateInit_(var strm: z_stream; level: Integer;$/;"	f
deflateInit_	src/contrib/pascal/zlibpas.pas	/^function deflateInit_; external;$/;"	f
deflateInit_	src/deflate.c	/^int ZEXPORT deflateInit_(strm, level, version, stream_size)$/;"	f
deflateInit_	src/zconf.h	45;"	d
deflateInit_	src/zlib.h	/^ZEXTERN int ZEXPORT deflateInit_ OF((z_streamp strm, int level,$/;"	p	signature:(z_streamp strm, int level, const char *version, int stream_size)
deflateInit_	zconf.h	45;"	d
deflateInit_	zlib.h	/^ZEXTERN int ZEXPORT deflateInit_ OF((z_streamp strm, int level,$/;"	p	signature:(z_streamp strm, int level, const char *version, int stream_size)
deflateParams	src/contrib/delphi/ZLib.pas	/^procedure deflateParams; external;$/;"	p
deflateParams	src/contrib/pascal/zlibpas.pas	/^function deflateParams(var strm: z_stream; level, strategy: Integer): Integer;$/;"	f
deflateParams	src/contrib/pascal/zlibpas.pas	/^function deflateParams; external;$/;"	f
deflateParams	src/deflate.c	/^int ZEXPORT deflateParams(strm, level, strategy)$/;"	f
deflateParams	src/zconf.h	46;"	d
deflateParams	src/zlib.h	/^ZEXTERN int ZEXPORT deflateParams OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, int level, int strategy)
deflateParams	zconf.h	46;"	d
deflateParams	zlib.h	/^ZEXTERN int ZEXPORT deflateParams OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, int level, int strategy)
deflatePending	src/contrib/pascal/zlibpas.pas	/^function deflatePending(var strm: z_stream; var pending: Integer; var bits: Integer): Integer;$/;"	f
deflatePending	src/contrib/pascal/zlibpas.pas	/^function deflatePending; external;$/;"	f
deflatePending	src/deflate.c	/^int ZEXPORT deflatePending (strm, pending, bits)$/;"	f
deflatePending	src/zconf.h	47;"	d
deflatePending	src/zlib.h	/^ZEXTERN int ZEXPORT deflatePending OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, unsigned *pending, int *bits)
deflatePending	zconf.h	47;"	d
deflatePending	zlib.h	/^ZEXTERN int ZEXPORT deflatePending OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, unsigned *pending, int *bits)
deflatePrime	src/contrib/pascal/zlibpas.pas	/^function deflatePrime(var strm: z_stream; bits, value: Integer): Integer;$/;"	f
deflatePrime	src/contrib/pascal/zlibpas.pas	/^function deflatePrime; external;$/;"	f
deflatePrime	src/deflate.c	/^int ZEXPORT deflatePrime (strm, bits, value)$/;"	f
deflatePrime	src/zconf.h	48;"	d
deflatePrime	src/zlib.h	/^ZEXTERN int ZEXPORT deflatePrime OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, int bits, int value)
deflatePrime	zconf.h	48;"	d
deflatePrime	zlib.h	/^ZEXTERN int ZEXPORT deflatePrime OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, int bits, int value)
deflateReset	src/contrib/dotzlib/DotZLib/Deflater.cs	/^        private static extern int deflateReset(ref ZStream sz);$/;"	m	class:DotZLib.Deflater	file:	access:private	signature:(ref ZStream sz)
deflateReset	src/contrib/pascal/zlibpas.pas	/^function deflateReset(var strm: z_stream): Integer;$/;"	f
deflateReset	src/contrib/pascal/zlibpas.pas	/^function deflateReset; external;$/;"	f
deflateReset	src/deflate.c	/^int ZEXPORT deflateReset (strm)$/;"	f
deflateReset	src/zconf.h	49;"	d
deflateReset	src/zlib.h	/^ZEXTERN int ZEXPORT deflateReset OF((z_streamp strm));$/;"	p	signature:(z_streamp strm)
deflateReset	zconf.h	49;"	d
deflateReset	zlib.h	/^ZEXTERN int ZEXPORT deflateReset OF((z_streamp strm));$/;"	p	signature:(z_streamp strm)
deflateResetKeep	src/deflate.c	/^int ZEXPORT deflateResetKeep (strm)$/;"	f
deflateResetKeep	src/zconf.h	50;"	d
deflateResetKeep	src/zlib.h	/^ZEXTERN int            ZEXPORT deflateResetKeep OF((z_streamp));$/;"	p	signature:(z_streamp)
deflateResetKeep	zconf.h	50;"	d
deflateResetKeep	zlib.h	/^ZEXTERN int            ZEXPORT deflateResetKeep OF((z_streamp));$/;"	p	signature:(z_streamp)
deflateSetDictionary	src/contrib/pascal/zlibpas.pas	/^function deflateSetDictionary(var strm: z_stream; const dictionary: PChar;$/;"	f
deflateSetDictionary	src/contrib/pascal/zlibpas.pas	/^function deflateSetDictionary; external;$/;"	f
deflateSetDictionary	src/deflate.c	/^int ZEXPORT deflateSetDictionary (strm, dictionary, dictLength)$/;"	f
deflateSetDictionary	src/zconf.h	51;"	d
deflateSetDictionary	src/zlib.h	/^ZEXTERN int ZEXPORT deflateSetDictionary OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, const Bytef *dictionary, uInt dictLength)
deflateSetDictionary	zconf.h	51;"	d
deflateSetDictionary	zlib.h	/^ZEXTERN int ZEXPORT deflateSetDictionary OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, const Bytef *dictionary, uInt dictLength)
deflateSetHeader	src/contrib/pascal/zlibpas.pas	/^function deflateSetHeader(var strm: z_stream; head: gz_header): Integer;$/;"	f
deflateSetHeader	src/contrib/pascal/zlibpas.pas	/^function deflateSetHeader; external;$/;"	f
deflateSetHeader	src/deflate.c	/^int ZEXPORT deflateSetHeader (strm, head)$/;"	f
deflateSetHeader	src/zconf.h	52;"	d
deflateSetHeader	src/zlib.h	/^ZEXTERN int ZEXPORT deflateSetHeader OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, gz_headerp head)
deflateSetHeader	zconf.h	52;"	d
deflateSetHeader	zlib.h	/^ZEXTERN int ZEXPORT deflateSetHeader OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, gz_headerp head)
deflateTune	src/contrib/pascal/zlibpas.pas	/^function deflateTune(var strm: z_stream; good_length, max_lazy, nice_length, max_chain: Integer): Integer;$/;"	f
deflateTune	src/contrib/pascal/zlibpas.pas	/^function deflateTune; external;$/;"	f
deflateTune	src/deflate.c	/^int ZEXPORT deflateTune(strm, good_length, max_lazy, nice_length, max_chain)$/;"	f
deflateTune	src/zconf.h	53;"	d
deflateTune	src/zlib.h	/^ZEXTERN int ZEXPORT deflateTune OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, int good_length, int max_lazy, int nice_length, int max_chain)
deflateTune	zconf.h	53;"	d
deflateTune	zlib.h	/^ZEXTERN int ZEXPORT deflateTune OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, int good_length, int max_lazy, int nice_length, int max_chain)
deflate_copyright	src/deflate.c	/^const char deflate_copyright[] =$/;"	v
deflate_copyright	src/zconf.h	54;"	d
deflate_copyright	zconf.h	54;"	d
deflate_fast	src/deflate.c	/^local block_state deflate_fast   OF((deflate_state *s, int flush));$/;"	p	file:	signature:(deflate_state *s, int flush)
deflate_fast	src/deflate.c	/^local block_state deflate_fast(s, flush)$/;"	f
deflate_huff	src/deflate.c	/^local block_state deflate_huff   OF((deflate_state *s, int flush));$/;"	p	file:	signature:(deflate_state *s, int flush)
deflate_huff	src/deflate.c	/^local block_state deflate_huff(s, flush)$/;"	f
deflate_rle	src/deflate.c	/^local block_state deflate_rle    OF((deflate_state *s, int flush));$/;"	p	file:	signature:(deflate_state *s, int flush)
deflate_rle	src/deflate.c	/^local block_state deflate_rle(s, flush)$/;"	f
deflate_slow	src/deflate.c	/^local block_state deflate_slow   OF((deflate_state *s, int flush));$/;"	p	file:	signature:(deflate_state *s, int flush)
deflate_slow	src/deflate.c	/^local block_state deflate_slow(s, flush)$/;"	f
deflate_state	src/deflate.h	/^} FAR deflate_state;$/;"	t	typeref:struct:internal_state
deflate_stored	src/deflate.c	/^local block_state deflate_stored OF((deflate_state *s, int flush));$/;"	p	file:	signature:(deflate_state *s, int flush)
deflate_stored	src/deflate.c	/^local block_state deflate_stored(s, flush)$/;"	f
deflatestate	src/contrib/asm686/match.S	/^#define	deflatestate		56	\/* the function arguments	*\/$/;"	d
deflatestate	src/contrib/masmx86/match686.asm	/^deflatestate    equ  esp + 56   ; the function arguments$/;"	d
dep_chain_length	src/contrib/masmx86/match686.asm	/^    dep_chain_length    equ     74h+zlib1222add$/;"	d
dep_good_match	src/contrib/masmx86/match686.asm	/^    dep_good_match      equ     84h+zlib1222add$/;"	d
dep_lookahead	src/contrib/masmx86/match686.asm	/^    dep_lookahead       equ     6ch+zlib1222add$/;"	d
dep_match_start	src/contrib/masmx86/match686.asm	/^    dep_match_start     equ     68h+zlib1222add$/;"	d
dep_nice_match	src/contrib/masmx86/match686.asm	/^    dep_nice_match      equ     88h+zlib1222add$/;"	d
dep_prev	src/contrib/masmx86/match686.asm	/^    dep_prev            equ     38h+zlib1222add$/;"	d
dep_prev_length	src/contrib/masmx86/match686.asm	/^    dep_prev_length     equ     70h+zlib1222add$/;"	d
dep_strstart	src/contrib/masmx86/match686.asm	/^    dep_strstart        equ     64h+zlib1222add$/;"	d
dep_w_mask	src/contrib/masmx86/match686.asm	/^    dep_w_mask          equ     2ch+zlib1222add$/;"	d
dep_w_size	src/contrib/masmx86/match686.asm	/^    dep_w_size          equ     24h+zlib1222add$/;"	d
dep_window	src/contrib/masmx86/match686.asm	/^    dep_window          equ     30h+zlib1222add$/;"	d
depth	src/deflate.h	/^    uch depth[2*L_CODES+1];$/;"	m	struct:internal_state	access:public
detect_data_type	src/trees.c	/^local int  detect_data_type OF((deflate_state *s));$/;"	p	file:	signature:(deflate_state *s)
detect_data_type	src/trees.c	/^local int detect_data_type(s)$/;"	f
devmajor	src/contrib/untgz/untgz.c	/^  char devmajor[8];             \/* 329 *\/$/;"	m	struct:tar_header	file:	access:public
devminor	src/contrib/untgz/untgz.c	/^  char devminor[8];             \/* 337 *\/$/;"	m	struct:tar_header	file:	access:public
dictId	src/test/example.c	/^uLong dictId; \/* Adler32 value of the dictionary *\/$/;"	v
dictionary	src/test/example.c	/^const char dictionary[] = "hello";$/;"	v
direct	src/gzguts.h	/^    int direct;             \/* 0 if processing gzip, 1 if transparent *\/$/;"	m	struct:__anon1	access:public
disable_buffer	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::disable_buffer()$/;"	f	class:gzfilebuf	signature:()
disable_buffer	src/contrib/iostream3/zfstream.h	/^  disable_buffer();$/;"	p	class:gzfilebuf	access:private	signature:()
disk_num_start	src/contrib/minizip/unzip.h	/^    uLong disk_num_start;       \/* disk number start               2 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
disk_num_start	src/contrib/minizip/unzip.h	/^    uLong disk_num_start;       \/* disk number start               2 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
dist	src/contrib/masmx64/inffas8664.c	/^\/*112   68 *\/ unsigned dist;            \/*     r15  match distance *\/$/;"	m	struct:inffast_ar	file:	access:public
dist_r	src/contrib/inflate86/inffast.S	/^#define dist_r %ebx$/;"	d
dist_r	src/contrib/inflate86/inffast.S	/^#define dist_r %edx$/;"	d
distbits	src/inflate.h	/^    unsigned distbits;          \/* index bits for distcode *\/$/;"	m	struct:inflate_state	access:public
distbits_state	src/contrib/inflate86/inffast.S	/^#define distbits_state 80  \/* state->distbits *\/$/;"	d
distbits_state	src/contrib/masmx86/inffas32.asm	/^distbits_state	 equ	(76+4+zlib1222sup)	;\/* state->distbits *\/$/;"	d
distcode	src/inflate.h	/^    code const FAR *distcode;   \/* starting table for distance codes *\/$/;"	m	struct:inflate_state	access:public
distcode_state	src/contrib/inflate86/inffast.S	/^#define distcode_state 72  \/* state->distcode *\/$/;"	d
distcode_state	src/contrib/masmx86/inffas32.asm	/^distcode_state	 equ	(68+4+zlib1222sup)	;\/* state->distcode *\/$/;"	d
distfix	src/contrib/infback9/inffix9.h	/^    static const code distfix[32] = {$/;"	v
distfix	src/inffixed.h	/^    static const code distfix[32] = {$/;"	v
dl	src/deflate.h	/^    } dl;$/;"	m	struct:ct_data_s	typeref:union:ct_data_s::__anon5	access:public
dmask	src/contrib/inflate86/inffast.S	/^#define dmask           4  \/* unsigned int *\/$/;"	d
dmask	src/contrib/masmx64/inffas8664.c	/^\/*104   60 *\/ unsigned dmask;           \/*     r13  mask for dcode *\/$/;"	m	struct:inffast_ar	file:	access:public
dmask2_mm	src/contrib/inflate86/inffast.S	/^#define dmask2_mm %mm2$/;"	d
dmask_mm	src/contrib/inflate86/inffast.S	/^#define dmask_mm  %mm5$/;"	d
dmax	src/inflate.h	/^    unsigned dmax;              \/* zlib header max distance (INFLATE_STRICT) *\/$/;"	m	struct:inflate_state	access:public
do_banner	src/contrib/minizip/miniunz.c	/^void do_banner()$/;"	f
do_banner	src/contrib/minizip/minizip.c	/^void do_banner()$/;"	f
do_extract	src/contrib/minizip/miniunz.c	/^int do_extract(uf,opt_extract_without_path,opt_overwrite,password)$/;"	f
do_extract_currentfile	src/contrib/minizip/miniunz.c	/^int do_extract_currentfile(uf,popt_extract_without_path,popt_overwrite,password)$/;"	f
do_extract_onefile	src/contrib/minizip/miniunz.c	/^int do_extract_onefile(uf,filename,opt_extract_without_path,opt_overwrite,password)$/;"	f
do_help	src/contrib/minizip/miniunz.c	/^void do_help()$/;"	f
do_help	src/contrib/minizip/minizip.c	/^void do_help()$/;"	f
do_list	src/contrib/minizip/miniunz.c	/^int do_list(uf)$/;"	f
done	src/examples/enough.c	/^local struct tab *done; \/* states already evaluated array *\/$/;"	v	typeref:struct:tab
done	src/zlib.h	/^    int     done;       \/* true when done reading gzip header (not used$/;"	m	struct:gz_header_s	access:public
done	zlib.h	/^    int     done;       \/* true when done reading gzip header (not used$/;"	m	struct:gz_header_s	access:public
dosDate	src/contrib/minizip/unzip.h	/^    uLong dosDate;              \/* last mod file date in Dos fmt   4 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
dosDate	src/contrib/minizip/unzip.h	/^    uLong dosDate;              \/* last mod file date in Dos fmt   4 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
dosDate	src/contrib/minizip/zip.c	/^    uLong dosDate;$/;"	m	struct:__anon9	file:	access:public
dosDate	src/contrib/minizip/zip.h	/^    uLong       dosDate;       \/* if dos_date == 0, tmu_date is used      *\/$/;"	m	struct:__anon6	access:public
dsGoodMatch	src/contrib/amd64/amd64-match.S	/^#define dsGoodMatch	(180 + STRUCT_OFFSET)(%rdi)$/;"	d
dsGoodMatch	src/contrib/amd64/amd64-match.S	/^#define dsGoodMatch	(188)(%rdi)$/;"	d
dsGoodMatch	src/contrib/asm686/match.S	/^#define	dsGoodMatch		(132+zlib1222add)$/;"	d
dsGoodMatch	src/contrib/gcc_gvmat64/gvmat64.S	/^#define dsGoodMatch      188$/;"	d
dsGoodMatch	src/contrib/masmx64/gvmat64.asm	/^dsGoodMatch     equ 172+zlib1222add$/;"	d
dsGoodMatch	src/contrib/masmx86/match686.asm	/^dsGoodMatch equ 132+zlib1222add$/;"	d
dsLookahead	src/contrib/amd64/amd64-match.S	/^#define dsLookahead	(156 + STRUCT_OFFSET)(%rdi)$/;"	d
dsLookahead	src/contrib/amd64/amd64-match.S	/^#define dsLookahead	(164)(%rdi)$/;"	d
dsLookahead	src/contrib/asm686/match.S	/^#define	dsLookahead		(108+zlib1222add)$/;"	d
dsLookahead	src/contrib/gcc_gvmat64/gvmat64.S	/^#define dsLookahead      164$/;"	d
dsLookahead	src/contrib/masmx64/gvmat64.asm	/^dsLookahead     equ 148+zlib1222add$/;"	d
dsLookahead	src/contrib/masmx86/match686.asm	/^dsLookahead equ 108+zlib1222add$/;"	d
dsMatchLen	src/contrib/amd64/amd64-match.S	/^#define dsMatchLen	(136 + STRUCT_OFFSET)(%rdi)$/;"	d
dsMatchLen	src/contrib/amd64/amd64-match.S	/^#define dsMatchLen	(144)(%rdi)$/;"	d
dsMatchLen	src/contrib/asm686/match.S	/^#define	dsMatchLen		(88+zlib1222add)$/;"	d
dsMatchLen	src/contrib/gcc_gvmat64/gvmat64.S	/^#define dsMatchLen       144$/;"	d
dsMatchLen	src/contrib/masmx64/gvmat64.asm	/^dsMatchLen      equ 128+zlib1222add$/;"	d
dsMatchLen	src/contrib/masmx86/match686.asm	/^dsMatchLen  equ 88+zlib1222add$/;"	d
dsMatchStart	src/contrib/amd64/amd64-match.S	/^#define dsMatchStart	(152 + STRUCT_OFFSET)(%rdi)$/;"	d
dsMatchStart	src/contrib/amd64/amd64-match.S	/^#define dsMatchStart	(160)(%rdi)$/;"	d
dsMatchStart	src/contrib/asm686/match.S	/^#define	dsMatchStart		(104+zlib1222add)$/;"	d
dsMatchStart	src/contrib/gcc_gvmat64/gvmat64.S	/^#define dsMatchStart     160$/;"	d
dsMatchStart	src/contrib/masmx64/gvmat64.asm	/^dsMatchStart    equ 144+zlib1222add$/;"	d
dsMatchStart	src/contrib/masmx86/match686.asm	/^dsMatchStart    equ 104+zlib1222add$/;"	d
dsMaxChainLen	src/contrib/amd64/amd64-match.S	/^#define dsMaxChainLen	(164 + STRUCT_OFFSET)(%rdi)$/;"	d
dsMaxChainLen	src/contrib/amd64/amd64-match.S	/^#define dsMaxChainLen	(172)(%rdi)$/;"	d
dsMaxChainLen	src/contrib/asm686/match.S	/^#define	dsMaxChainLen		(116+zlib1222add)$/;"	d
dsMaxChainLen	src/contrib/gcc_gvmat64/gvmat64.S	/^#define dsMaxChainLen    172$/;"	d
dsMaxChainLen	src/contrib/masmx64/gvmat64.asm	/^dsMaxChainLen   equ 156+zlib1222add$/;"	d
dsMaxChainLen	src/contrib/masmx86/match686.asm	/^dsMaxChainLen   equ 116+zlib1222add$/;"	d
dsNiceMatch	src/contrib/amd64/amd64-match.S	/^#define dsNiceMatch	(184 + STRUCT_OFFSET)(%rdi)$/;"	d
dsNiceMatch	src/contrib/amd64/amd64-match.S	/^#define dsNiceMatch	(192)(%rdi)$/;"	d
dsNiceMatch	src/contrib/asm686/match.S	/^#define	dsNiceMatch		(136+zlib1222add)$/;"	d
dsNiceMatch	src/contrib/gcc_gvmat64/gvmat64.S	/^#define dsNiceMatch      192$/;"	d
dsNiceMatch	src/contrib/masmx64/gvmat64.asm	/^dsNiceMatch     equ 176+zlib1222add$/;"	d
dsNiceMatch	src/contrib/masmx86/match686.asm	/^dsNiceMatch equ 136+zlib1222add$/;"	d
dsPrev	src/contrib/amd64/amd64-match.S	/^#define dsPrev		( 88 + STRUCT_OFFSET)(%rdi)$/;"	d
dsPrev	src/contrib/amd64/amd64-match.S	/^#define dsPrev		( 96)(%rdi)$/;"	d
dsPrev	src/contrib/asm686/match.S	/^#define	dsPrev			(56+zlib1222add)$/;"	d
dsPrev	src/contrib/gcc_gvmat64/gvmat64.S	/^#define dsPrev           96$/;"	d
dsPrev	src/contrib/masmx64/gvmat64.asm	/^dsPrev          equ 88+zlib1222add$/;"	d
dsPrev	src/contrib/masmx86/match686.asm	/^dsPrev      equ 56+zlib1222add$/;"	d
dsPrevLen	src/contrib/amd64/amd64-match.S	/^#define dsPrevLen	(160 + STRUCT_OFFSET)(%rdi)$/;"	d
dsPrevLen	src/contrib/amd64/amd64-match.S	/^#define dsPrevLen	(168)(%rdi)$/;"	d
dsPrevLen	src/contrib/asm686/match.S	/^#define	dsPrevLen		(112+zlib1222add)$/;"	d
dsPrevLen	src/contrib/gcc_gvmat64/gvmat64.S	/^#define dsPrevLen        168$/;"	d
dsPrevLen	src/contrib/masmx64/gvmat64.asm	/^dsPrevLen       equ 152+zlib1222add$/;"	d
dsPrevLen	src/contrib/masmx86/match686.asm	/^dsPrevLen   equ 112+zlib1222add$/;"	d
dsPrevMatch	src/contrib/amd64/amd64-match.S	/^#define dsPrevMatch	(140 + STRUCT_OFFSET)(%rdi)$/;"	d
dsPrevMatch	src/contrib/amd64/amd64-match.S	/^#define dsPrevMatch	(148)(%rdi)$/;"	d
dsPrevMatch	src/contrib/asm686/match.S	/^#define	dsPrevMatch		(92+zlib1222add)$/;"	d
dsPrevMatch	src/contrib/gcc_gvmat64/gvmat64.S	/^#define dsPrevMatch      148$/;"	d
dsPrevMatch	src/contrib/masmx64/gvmat64.asm	/^dsPrevMatch     equ 132+zlib1222add$/;"	d
dsPrevMatch	src/contrib/masmx86/match686.asm	/^dsPrevMatch equ 92+zlib1222add$/;"	d
dsStrStart	src/contrib/amd64/amd64-match.S	/^#define dsStrStart	(148 + STRUCT_OFFSET)(%rdi)$/;"	d
dsStrStart	src/contrib/amd64/amd64-match.S	/^#define dsStrStart	(156)(%rdi)$/;"	d
dsStrStart	src/contrib/asm686/match.S	/^#define	dsStrStart		(100+zlib1222add)$/;"	d
dsStrStart	src/contrib/gcc_gvmat64/gvmat64.S	/^#define dsStrStart       156$/;"	d
dsStrStart	src/contrib/masmx64/gvmat64.asm	/^dsStrStart      equ 140+zlib1222add$/;"	d
dsStrStart	src/contrib/masmx86/match686.asm	/^dsStrStart  equ 100+zlib1222add$/;"	d
dsWMask	src/contrib/amd64/amd64-match.S	/^#define dsWMask		( 64 + STRUCT_OFFSET)(%rdi)$/;"	d
dsWMask	src/contrib/amd64/amd64-match.S	/^#define dsWMask		( 76)(%rdi)$/;"	d
dsWMask	src/contrib/asm686/match.S	/^#define	dsWMask			(44+zlib1222add)$/;"	d
dsWMask	src/contrib/gcc_gvmat64/gvmat64.S	/^#define dsWMask          76$/;"	d
dsWMask	src/contrib/masmx64/gvmat64.asm	/^dsWMask         equ 64+zlib1222add+(zlib1222add\/2)$/;"	d
dsWMask	src/contrib/masmx86/match686.asm	/^dsWMask     equ 44+zlib1222add$/;"	d
dsWSize	src/contrib/amd64/amd64-match.S	/^#define dsWSize		( 56 + STRUCT_OFFSET)(%rdi)$/;"	d
dsWSize	src/contrib/amd64/amd64-match.S	/^#define dsWSize		( 68)(%rdi)$/;"	d
dsWSize	src/contrib/asm686/match.S	/^#define	dsWSize			(36+zlib1222add)$/;"	d
dsWSize	src/contrib/gcc_gvmat64/gvmat64.S	/^#define dsWSize          68$/;"	d
dsWSize	src/contrib/masmx64/gvmat64.asm	/^dsWSize         equ 56+zlib1222add+(zlib1222add\/2)$/;"	d
dsWSize	src/contrib/masmx86/match686.asm	/^dsWSize     equ 36+zlib1222add$/;"	d
dsWindow	src/contrib/amd64/amd64-match.S	/^#define dsWindow	( 72 + STRUCT_OFFSET)(%rdi)$/;"	d
dsWindow	src/contrib/amd64/amd64-match.S	/^#define dsWindow	( 80)(%rdi)$/;"	d
dsWindow	src/contrib/asm686/match.S	/^#define	dsWindow		(48+zlib1222add)$/;"	d
dsWindow	src/contrib/gcc_gvmat64/gvmat64.S	/^#define dsWindow         80$/;"	d
dsWindow	src/contrib/masmx64/gvmat64.asm	/^dsWindow        equ 72+zlib1222add$/;"	d
dsWindow	src/contrib/masmx86/match686.asm	/^dsWindow    equ 48+zlib1222add$/;"	d
dummy	src/deflate.c	/^struct static_tree_desc_s {int dummy;}; \/* for buggy compilers *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
dummy	src/zlib.h	/^    struct internal_state {int dummy;};$/;"	m	struct:internal_state	access:public
dummy	src/zutil.c	/^struct internal_state      {int dummy;}; \/* for buggy compilers *\/$/;"	m	struct:internal_state	file:	access:public
dummy	zlib.h	/^    struct internal_state {int dummy;};$/;"	m	struct:internal_state	access:public
dyn_dtree	src/deflate.h	/^    struct ct_data_s dyn_dtree[2*D_CODES+1]; \/* distance tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s	access:public
dyn_ltree	src/deflate.h	/^    struct ct_data_s dyn_ltree[HEAP_SIZE];   \/* literal and length tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s	access:public
dyn_tree	src/deflate.h	/^    ct_data *dyn_tree;           \/* the dynamic tree *\/$/;"	m	struct:tree_desc_s	access:public
dynamic	src/contrib/puff/puff.c	/^local int dynamic(struct state *s)$/;"	f	signature:(struct state *s)
ebp	src/contrib/masmx64/inffas8664.c	/^\/*  8    4 *\/ void *ebp;                \/* ebp save *\/$/;"	m	struct:inffast_ar	file:	access:public
elems	src/trees.c	/^    int     elems;               \/* max number of elements in the tree *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
enable_buffer	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::enable_buffer()$/;"	f	class:gzfilebuf	signature:()
enable_buffer	src/contrib/iostream3/zfstream.h	/^  enable_buffer();$/;"	p	class:gzfilebuf	access:private	signature:()
encrypt	src/contrib/minizip/zip.c	/^    int  encrypt;$/;"	m	struct:__anon9	file:	access:public
encrypted	src/contrib/minizip/unzip.c	/^    int encrypted;$/;"	m	struct:__anon8	file:	access:public
end	src/contrib/inflate86/inffast.S	/^#define end            16  \/* unsigned char* *\/$/;"	d
end	src/contrib/masmx64/inffas8664.c	/^\/* 48   24 *\/ unsigned char FAR *end;   \/*     r10  while out < end *\/$/;"	m	struct:inffast_ar	file:	access:public
end	src/examples/gzlog.c	/^    char *end;      \/* end of path, for appending suffices such as ".gz" *\/$/;"	m	struct:log	file:	access:public
end_r	src/contrib/inflate86/inffast.S	/^#define end_r %ebx$/;"	d
enough	src/examples/enough.c	/^local void enough(int syms)$/;"	f	signature:(int syms)
env	src/contrib/blast/blast.c	/^    jmp_buf env;$/;"	m	struct:state	file:	access:public
env	src/contrib/puff/puff.c	/^    jmp_buf env;$/;"	m	struct:state	file:	access:public
eof	src/gzguts.h	/^    int eof;                \/* true if end of input file reached *\/$/;"	m	struct:__anon1	access:public
err	src/gzguts.h	/^    int err;                \/* error code *\/$/;"	m	struct:__anon1	access:public
err	src/test/minigzip.c	/^    int err;$/;"	m	struct:gzFile_s	file:	access:public
errno	src/zutil.c	/^    int errno = 0;$/;"	v
error	src/contrib/iostream2/zstream.h	/^        const char* error(int* errnum) {$/;"	f	class:izstream	access:public	signature:(int* errnum)
error	src/contrib/iostream2/zstream.h	/^        const char* error(int* errnum) {$/;"	f	class:ozstream	access:public	signature:(int* errnum)
error	src/contrib/minizip/iowin32.c	/^    int error;$/;"	m	struct:__anon11	file:	access:public
error	src/contrib/untgz/untgz.c	/^void error              OF((const char *));$/;"	p	file:	signature:(const char *)
error	src/contrib/untgz/untgz.c	/^void error(const char *msg)$/;"	f	signature:(const char *msg)
error	src/test/minigzip.c	/^void error            OF((const char *msg));$/;"	p	file:	signature:(const char *msg)
error	src/test/minigzip.c	/^void error(msg)$/;"	f
esp	src/contrib/masmx64/inffas8664.c	/^\/*  0    0 *\/ void *esp;                \/* esp save *\/$/;"	m	struct:inffast_ar	file:	access:public
examine	src/examples/enough.c	/^local void examine(int syms, int len, int left, int mem, int rem)$/;"	f	signature:(int syms, int len, int left, int mem, int rem)
external_fa	src/contrib/minizip/unzip.h	/^    uLong external_fa;          \/* external file attributes        4 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
external_fa	src/contrib/minizip/unzip.h	/^    uLong external_fa;          \/* external file attributes        4 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
external_fa	src/contrib/minizip/zip.h	/^    uLong       external_fa;    \/* external file attributes        4 bytes *\/$/;"	m	struct:__anon6	access:public
extra	src/inflate.h	/^    unsigned extra;             \/* extra bits needed *\/$/;"	m	struct:inflate_state	access:public
extra	src/zlib.h	/^    Bytef   *extra;     \/* pointer to extra field or Z_NULL if none *\/$/;"	m	struct:gz_header_s	access:public
extra	zlib.h	/^    Bytef   *extra;     \/* pointer to extra field or Z_NULL if none *\/$/;"	m	struct:gz_header_s	access:public
extra_base	src/trees.c	/^    int     extra_base;          \/* base index for extra_bits *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
extra_bits	src/trees.c	/^    const intf *extra_bits;      \/* extra bits for each code or NULL *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
extra_blbits	src/trees.c	/^local const int extra_blbits[BL_CODES]\/* extra bits for each bit length code *\/$/;"	v
extra_dbits	src/trees.c	/^local const int extra_dbits[D_CODES] \/* extra bits for each distance code *\/$/;"	v
extra_lbits	src/trees.c	/^local const int extra_lbits[LENGTH_CODES] \/* extra bits for each length code *\/$/;"	v
extra_len	src/zlib.h	/^    uInt    extra_len;  \/* extra field length (valid if extra != Z_NULL) *\/$/;"	m	struct:gz_header_s	access:public
extra_len	zlib.h	/^    uInt    extra_len;  \/* extra field length (valid if extra != Z_NULL) *\/$/;"	m	struct:gz_header_s	access:public
extra_max	src/zlib.h	/^    uInt    extra_max;  \/* space at extra (only when reading header) *\/$/;"	m	struct:gz_header_s	access:public
extra_max	zlib.h	/^    uInt    extra_max;  \/* space at extra (only when reading header) *\/$/;"	m	struct:gz_header_s	access:public
extract	src/examples/zran.c	/^local int extract(FILE *in, struct access *index, off_t offset,$/;"	f	signature:(FILE *in, struct access *index, off_t offset, unsigned char *buf, int len)
f	src/contrib/iostream/zfstream.h	/^  gzomanip(gzofstream &(*f)(gzofstream &, T), T v) : func(f), val(v) { }$/;"	p	class:gzomanip	access:public	signature:(gzofstream &, T)
f	src/contrib/iostream3/zfstream.h	/^    gzomanip2(gzofstream& (*f)(gzofstream&, T1, T2),$/;"	p	class:gzomanip2	access:public	signature:(gzofstream&, T1, T2)
f	src/contrib/iostream3/zfstream.h	/^  gzomanip2<T1,T2>::gzomanip2(gzofstream &(*f)(gzofstream &, T1, T2),$/;"	p	class:gzomanip2	signature:(gzofstream &, T1, T2)
farfree	src/zutil.h	/^         void _Cdecl farfree( void *block );$/;"	p	signature:( void *block )
farfree	zutil.h	/^         void _Cdecl farfree( void *block );$/;"	p	signature:( void *block )
farmalloc	src/zutil.h	/^         void *_Cdecl farmalloc( unsigned long nbytes );$/;"	p	signature:( unsigned long nbytes )
farmalloc	zutil.h	/^         void *_Cdecl farmalloc( unsigned long nbytes );$/;"	p	signature:( unsigned long nbytes )
fc	src/deflate.h	/^    } fc;$/;"	m	struct:ct_data_s	typeref:union:ct_data_s::__anon4	access:public
fclose_file_func	src/contrib/minizip/ioapi.c	/^static int     ZCALLBACK fclose_file_func OF((voidpf opaque, voidpf stream));$/;"	p	file:	signature:(voidpf opaque, voidpf stream)
fclose_file_func	src/contrib/minizip/ioapi.c	/^static int ZCALLBACK fclose_file_func (voidpf opaque, voidpf stream)$/;"	f	file:	signature:(voidpf opaque, voidpf stream)
fd	src/examples/gzappend.c	/^    int fd;                     \/* file descriptor *\/$/;"	m	struct:__anon2	file:	access:public
fd	src/examples/gzjoin.c	/^    int fd;                 \/* file descriptor *\/$/;"	m	struct:__anon3	file:	access:public
fd	src/examples/gzlog.c	/^    int fd;         \/* file descriptor for .gz file, opened read\/write *\/$/;"	m	struct:log	file:	access:public
fd	src/gzguts.h	/^    int fd;                 \/* file descriptor *\/$/;"	m	struct:__anon1	access:public
fdopen	src/zutil.h	128;"	d
fdopen	src/zutil.h	149;"	d
fdopen	src/zutil.h	154;"	d
fdopen	src/zutil.h	160;"	d
fdopen	zutil.h	128;"	d
fdopen	zutil.h	149;"	d
fdopen	zutil.h	154;"	d
fdopen	zutil.h	160;"	d
ferror_file_func	src/contrib/minizip/ioapi.c	/^static int     ZCALLBACK ferror_file_func OF((voidpf opaque, voidpf stream));$/;"	p	file:	signature:(voidpf opaque, voidpf stream)
ferror_file_func	src/contrib/minizip/ioapi.c	/^static int ZCALLBACK ferror_file_func (voidpf opaque, voidpf stream)$/;"	f	file:	signature:(voidpf opaque, voidpf stream)
file	src/contrib/iostream/zfstream.h	/^  gzFile file;$/;"	m	class:gzfilebuf	access:private
file	src/contrib/iostream3/zfstream.h	/^  gzFile file;$/;"	m	class:gzfilebuf	access:private
file	src/examples/gzappend.c	/^} file;$/;"	t	typeref:struct:__anon2	file:
file	src/test/minigzip.c	/^    FILE *file;$/;"	m	struct:gzFile_s	file:	access:public
file_compress	src/test/minigzip.c	/^void file_compress    OF((char  *file, char *mode));$/;"	p	file:	signature:(char *file, char *mode)
file_compress	src/test/minigzip.c	/^void file_compress(file, mode)$/;"	f
file_in_zip64_read_info_s	src/contrib/minizip/unzip.c	/^} file_in_zip64_read_info_s;$/;"	t	typeref:struct:__anon7	file:
file_uncompress	src/test/minigzip.c	/^void file_uncompress  OF((char  *file));$/;"	p	file:	signature:(char *file)
file_uncompress	src/test/minigzip.c	/^void file_uncompress(file)$/;"	f
fileno	src/test/minigzip.c	54;"	d	file:
filestream	src/contrib/minizip/unzip.c	/^    voidpf filestream;        \/* io structore of the zipfile *\/$/;"	m	struct:__anon7	file:	access:public
filestream	src/contrib/minizip/unzip.c	/^    voidpf filestream;        \/* io structore of the zipfile *\/$/;"	m	struct:__anon8	file:	access:public
filestream	src/contrib/minizip/zip.c	/^    voidpf filestream;        \/* io structore of the zipfile *\/$/;"	m	struct:__anon10	file:	access:public
filetime	src/contrib/minizip/minizip.c	/^uLong filetime(f, tmzip, dt)$/;"	f
fill_fopen64_filefunc	src/contrib/minizip/ioapi.c	/^void fill_fopen64_filefunc (zlib_filefunc64_def*  pzlib_filefunc_def)$/;"	f	signature:(zlib_filefunc64_def* pzlib_filefunc_def)
fill_fopen64_filefunc	src/contrib/minizip/ioapi.h	/^void fill_fopen64_filefunc OF((zlib_filefunc64_def* pzlib_filefunc_def));$/;"	p	signature:(zlib_filefunc64_def* pzlib_filefunc_def)
fill_fopen_filefunc	src/contrib/minizip/ioapi.c	/^void fill_fopen_filefunc (pzlib_filefunc_def)$/;"	f
fill_fopen_filefunc	src/contrib/minizip/ioapi.h	/^void fill_fopen_filefunc OF((zlib_filefunc_def* pzlib_filefunc_def));$/;"	p	signature:(zlib_filefunc_def* pzlib_filefunc_def)
fill_win32_filefunc	src/contrib/minizip/iowin32.c	/^void fill_win32_filefunc (zlib_filefunc_def* pzlib_filefunc_def)$/;"	f	signature:(zlib_filefunc_def* pzlib_filefunc_def)
fill_win32_filefunc	src/contrib/minizip/iowin32.h	/^void fill_win32_filefunc OF((zlib_filefunc_def* pzlib_filefunc_def));$/;"	p	signature:(zlib_filefunc_def* pzlib_filefunc_def)
fill_win32_filefunc64	src/contrib/minizip/iowin32.c	/^void fill_win32_filefunc64(zlib_filefunc64_def* pzlib_filefunc_def)$/;"	f	signature:(zlib_filefunc64_def* pzlib_filefunc_def)
fill_win32_filefunc64	src/contrib/minizip/iowin32.h	/^void fill_win32_filefunc64 OF((zlib_filefunc64_def* pzlib_filefunc_def));$/;"	p	signature:(zlib_filefunc64_def* pzlib_filefunc_def)
fill_win32_filefunc64A	src/contrib/minizip/iowin32.c	/^void fill_win32_filefunc64A(zlib_filefunc64_def* pzlib_filefunc_def)$/;"	f	signature:(zlib_filefunc64_def* pzlib_filefunc_def)
fill_win32_filefunc64A	src/contrib/minizip/iowin32.h	/^void fill_win32_filefunc64A OF((zlib_filefunc64_def* pzlib_filefunc_def));$/;"	p	signature:(zlib_filefunc64_def* pzlib_filefunc_def)
fill_win32_filefunc64W	src/contrib/minizip/iowin32.c	/^void fill_win32_filefunc64W(zlib_filefunc64_def* pzlib_filefunc_def)$/;"	f	signature:(zlib_filefunc64_def* pzlib_filefunc_def)
fill_win32_filefunc64W	src/contrib/minizip/iowin32.h	/^void fill_win32_filefunc64W OF((zlib_filefunc64_def* pzlib_filefunc_def));$/;"	p	signature:(zlib_filefunc64_def* pzlib_filefunc_def)
fill_window	src/deflate.c	/^local void fill_window    OF((deflate_state *s));$/;"	p	file:	signature:(deflate_state *s)
fill_window	src/deflate.c	/^local void fill_window(s)$/;"	f
fill_zlib_filefunc64_32_def_from_filefunc32	src/contrib/minizip/ioapi.c	/^void fill_zlib_filefunc64_32_def_from_filefunc32(zlib_filefunc64_32_def* p_filefunc64_32,const zlib_filefunc_def* p_filefunc32)$/;"	f	signature:(zlib_filefunc64_32_def* p_filefunc64_32,const zlib_filefunc_def* p_filefunc32)
fill_zlib_filefunc64_32_def_from_filefunc32	src/contrib/minizip/ioapi.h	/^void    fill_zlib_filefunc64_32_def_from_filefunc32(zlib_filefunc64_32_def* p_filefunc64_32,const zlib_filefunc_def* p_filefunc32);$/;"	p	signature:(zlib_filefunc64_32_def* p_filefunc64_32,const zlib_filefunc_def* p_filefunc32)
fillbuf	src/contrib/iostream/zfstream.cpp	/^int gzfilebuf::fillbuf() {$/;"	f	class:gzfilebuf	signature:()
fillbuf	src/contrib/iostream/zfstream.h	/^  int fillbuf();$/;"	p	class:gzfilebuf	access:private	signature:()
filled_in_this_block	src/contrib/minizip/zip.c	/^  uLong  filled_in_this_block;$/;"	m	struct:linkedlist_datablock_internal_s	file:	access:public
finish_done	src/deflate.c	/^    finish_done     \/* finish done, accept no more input or output *\/$/;"	e	enum:__anon18	file:
finish_started	src/deflate.c	/^    finish_started, \/* finish started, need only more output at next deflate *\/$/;"	e	enum:__anon18	file:
first	src/contrib/blast/blast.c	/^    int first;                  \/* true to check distances (for first 4K) *\/$/;"	m	struct:state	file:	access:public
first	src/examples/gzlog.c	/^    off_t first;    \/* offset of first stored block first length byte *\/$/;"	m	struct:log	file:	access:public
first	src/test/infcover.c	/^    struct mem_item *first;     \/* pointer to first item in list, or NULL *\/$/;"	m	struct:mem_zone	typeref:struct:mem_zone::mem_item	file:	access:public
first_block	src/contrib/minizip/zip.c	/^    linkedlist_datablock_internal* first_block;$/;"	m	struct:linkedlist_data_s	file:	access:public
fixed	src/contrib/puff/puff.c	/^local int fixed(struct state *s)$/;"	f	signature:(struct state *s)
fixedtables	src/infback.c	/^local void fixedtables OF((struct inflate_state FAR *state));$/;"	p	file:	signature:(struct inflate_state FAR *state)
fixedtables	src/infback.c	/^local void fixedtables(state)$/;"	f
fixedtables	src/inflate.c	/^local void fixedtables OF((struct inflate_state FAR *state));$/;"	p	file:	signature:(struct inflate_state FAR *state)
fixedtables	src/inflate.c	/^local void fixedtables(state)$/;"	f
flag	src/contrib/minizip/unzip.h	/^    uLong flag;                 \/* general purpose bit flag        2 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
flag	src/contrib/minizip/unzip.h	/^    uLong flag;                 \/* general purpose bit flag        2 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
flag	src/contrib/minizip/zip.c	/^    uLong flag;                 \/* flag of the file currently writing *\/$/;"	m	struct:__anon9	file:	access:public
flags	src/inflate.h	/^    int flags;                  \/* gzip header method and flags (0 if zlib) *\/$/;"	m	struct:inflate_state	access:public
flush	src/contrib/iostream2/zstream.h	/^        int flush(int _flush) {$/;"	f	class:ozstream	access:public	signature:(int _flush)
flush_pending	src/deflate.c	/^local void flush_pending  OF((z_streamp strm));$/;"	p	file:	signature:(z_streamp strm)
flush_pending	src/deflate.c	/^local void flush_pending(strm)$/;"	f
flushbuf	src/contrib/iostream/zfstream.cpp	/^int gzfilebuf::flushbuf() {$/;"	f	class:gzfilebuf	signature:()
flushbuf	src/contrib/iostream/zfstream.h	/^  int flushbuf();$/;"	p	class:gzfilebuf	access:private	signature:()
fname	src/contrib/untgz/untgz.c	/^  char              *fname;$/;"	m	struct:attr_item	file:	access:public
fopen64	src/contrib/minizip/ioapi.h	49;"	d
fopen64	src/contrib/minizip/ioapi.h	54;"	d
fopen64	src/contrib/minizip/ioapi.h	59;"	d
fopen64_file_func	src/contrib/minizip/ioapi.c	/^static voidpf ZCALLBACK fopen64_file_func (voidpf opaque, const void* filename, int mode)$/;"	f	file:	signature:(voidpf opaque, const void* filename, int mode)
fopen_file_func	src/contrib/minizip/ioapi.c	/^static voidpf  ZCALLBACK fopen_file_func OF((voidpf opaque, const char* filename, int mode));$/;"	p	file:	signature:(voidpf opaque, const char* filename, int mode)
fopen_file_func	src/contrib/minizip/ioapi.c	/^static voidpf ZCALLBACK fopen_file_func (voidpf opaque, const char* filename, int mode)$/;"	f	file:	signature:(voidpf opaque, const char* filename, int mode)
fp	src/contrib/iostream2/zstream.h	/^        gzFile fp() { return m_fp; }$/;"	f	class:izstream	access:public	signature:()
fp	src/contrib/iostream2/zstream.h	/^        gzFile fp() { return m_fp; }$/;"	f	class:ozstream	access:public	signature:()
fread_file_func	src/contrib/minizip/ioapi.c	/^static uLong   ZCALLBACK fread_file_func OF((voidpf opaque, voidpf stream, void* buf, uLong size));$/;"	p	file:	signature:(voidpf opaque, voidpf stream, void* buf, uLong size)
fread_file_func	src/contrib/minizip/ioapi.c	/^static uLong ZCALLBACK fread_file_func (voidpf opaque, voidpf stream, void* buf, uLong size)$/;"	f	file:	signature:(voidpf opaque, voidpf stream, void* buf, uLong size)
free	src/gzguts.h	/^  extern void   free   OF((voidpf ptr));$/;"	p	signature:(voidpf ptr)
free	src/zutil.c	/^extern void   free   OF((voidpf ptr));$/;"	p	file:	signature:(voidpf ptr)
free_datablock	src/contrib/minizip/zip.c	/^local void free_datablock(linkedlist_datablock_internal* ldi)$/;"	f	signature:(linkedlist_datablock_internal* ldi)
free_func	src/zconf.h	132;"	d
free_func	src/zlib.h	/^typedef void   (*free_func)  OF((voidpf opaque, voidpf address));$/;"	t
free_func	zconf.h	132;"	d
free_func	zlib.h	/^typedef void   (*free_func)  OF((voidpf opaque, voidpf address));$/;"	t
free_index	src/examples/zran.c	/^local void free_index(struct access *index)$/;"	f	signature:(struct access *index)
free_linkedlist	src/contrib/minizip/zip.c	/^local void free_linkedlist(linkedlist_data* ll)$/;"	f	signature:(linkedlist_data* ll)
freq	src/deflate.h	/^        ush  freq;       \/* frequency count *\/$/;"	m	union:ct_data_s::__anon4	access:public
from_r	src/contrib/inflate86/inffast.S	/^#define from_r     %esi$/;"	d
fseek64_file_func	src/contrib/minizip/ioapi.c	/^static long    ZCALLBACK fseek64_file_func OF((voidpf opaque, voidpf stream, ZPOS64_T offset, int origin));$/;"	p	file:	signature:(voidpf opaque, voidpf stream, ZPOS64_T offset, int origin)
fseek64_file_func	src/contrib/minizip/ioapi.c	/^static long ZCALLBACK fseek64_file_func (voidpf  opaque, voidpf stream, ZPOS64_T offset, int origin)$/;"	f	file:	signature:(voidpf opaque, voidpf stream, ZPOS64_T offset, int origin)
fseek_file_func	src/contrib/minizip/ioapi.c	/^static long ZCALLBACK fseek_file_func (voidpf  opaque, voidpf stream, uLong offset, int origin)$/;"	f	file:	signature:(voidpf opaque, voidpf stream, uLong offset, int origin)
fseeko64	src/contrib/minizip/ioapi.h	51;"	d
fseeko64	src/contrib/minizip/ioapi.h	56;"	d
fseeko64	src/contrib/minizip/ioapi.h	62;"	d
fseeko64	src/contrib/minizip/ioapi.h	65;"	d
ftell64_file_func	src/contrib/minizip/ioapi.c	/^static ZPOS64_T ZCALLBACK ftell64_file_func (voidpf opaque, voidpf stream)$/;"	f	file:	signature:(voidpf opaque, voidpf stream)
ftell64_file_func	src/contrib/minizip/ioapi.c	/^static ZPOS64_T ZCALLBACK ftell64_file_func OF((voidpf opaque, voidpf stream));$/;"	p	file:	signature:(voidpf opaque, voidpf stream)
ftell_file_func	src/contrib/minizip/ioapi.c	/^static long ZCALLBACK ftell_file_func (voidpf opaque, voidpf stream)$/;"	f	file:	signature:(voidpf opaque, voidpf stream)
ftello64	src/contrib/minizip/ioapi.h	50;"	d
ftello64	src/contrib/minizip/ioapi.h	55;"	d
ftello64	src/contrib/minizip/ioapi.h	61;"	d
ftello64	src/contrib/minizip/ioapi.h	64;"	d
func	src/contrib/iostream/zfstream.h	/^  gzofstream &(*func)(gzofstream &, T);$/;"	m	class:gzomanip	access:private
func	src/contrib/iostream/zfstream.h	/^  gzomanip(gzofstream &(*f)(gzofstream &, T), T v) : func(f), val(v) { }$/;"	p	class:gzomanip	access:public	signature:(f)
func	src/contrib/iostream3/zfstream.h	/^    (*func)(gzofstream&, T1, T2);$/;"	m	class:gzomanip2	access:private
func	src/contrib/iostream3/zfstream.h	/^  : func(f), val1(v1), val2(v2)$/;"	p	signature:(f)
func	src/deflate.c	/^   compress_func func;$/;"	m	struct:config_s	file:	access:public
fwrite_file_func	src/contrib/minizip/ioapi.c	/^static uLong   ZCALLBACK fwrite_file_func OF((voidpf opaque, voidpf stream, const void* buf,uLong size));$/;"	p	file:	signature:(voidpf opaque, voidpf stream, const void* buf,uLong size)
fwrite_file_func	src/contrib/minizip/ioapi.c	/^static uLong ZCALLBACK fwrite_file_func (voidpf opaque, voidpf stream, const void* buf, uLong size)$/;"	f	file:	signature:(voidpf opaque, voidpf stream, const void* buf, uLong size)
gcd	src/examples/gzappend.c	/^local unsigned gcd(unsigned a, unsigned b)$/;"	f	signature:(unsigned a, unsigned b)
gen_bitlen	src/trees.c	/^local void gen_bitlen     OF((deflate_state *s, tree_desc *desc));$/;"	p	file:	signature:(deflate_state *s, tree_desc *desc)
gen_bitlen	src/trees.c	/^local void gen_bitlen(s, desc)$/;"	f
gen_codes	src/trees.c	/^local void gen_codes      OF((ct_data *tree, int max_code, ushf *bl_count));$/;"	p	file:	signature:(ct_data *tree, int max_code, ushf *bl_count)
gen_codes	src/trees.c	/^local void gen_codes (tree, max_code, bl_count)$/;"	f
gen_trees_header	src/trees.c	/^local void gen_trees_header OF((void));$/;"	p	file:	signature:(void)
gen_trees_header	src/trees.c	/^void gen_trees_header()$/;"	f
getFileCrc	src/contrib/minizip/minizip.c	/^int getFileCrc(const char* filenameinzip,void*buf,unsigned long size_buf,unsigned long* result_crc)$/;"	f	signature:(const char* filenameinzip,void*buf,unsigned long size_buf,unsigned long* result_crc)
get_crc_table	src/crc32.c	/^const z_crc_t FAR * ZEXPORT get_crc_table()$/;"	f
get_crc_table	src/zconf.h	55;"	d
get_crc_table	src/zlib.h	/^ZEXTERN const z_crc_t FAR * ZEXPORT get_crc_table    OF((void));$/;"	p	signature:(void)
get_crc_table	zconf.h	55;"	d
get_crc_table	zlib.h	/^ZEXTERN const z_crc_t FAR * ZEXPORT get_crc_table    OF((void));$/;"	p	signature:(void)
getoct	src/contrib/untgz/untgz.c	/^int getoct              OF((char *, int));$/;"	p	file:	signature:(char *, int)
getoct	src/contrib/untgz/untgz.c	/^int getoct (char *p,int width)$/;"	f	signature:(char *p,int width)
gf2_matrix_square	src/crc32.c	/^local void gf2_matrix_square OF((unsigned long *square, unsigned long *mat));$/;"	p	file:	signature:(unsigned long *square, unsigned long *mat)
gf2_matrix_square	src/crc32.c	/^local void gf2_matrix_square(square, mat)$/;"	f
gf2_matrix_times	src/crc32.c	/^local unsigned long gf2_matrix_times OF((unsigned long *mat,$/;"	p	file:	signature:(unsigned long *mat, unsigned long vec)
gf2_matrix_times	src/crc32.c	/^local unsigned long gf2_matrix_times(mat, vec)$/;"	f
gi	src/contrib/minizip/unzip.c	/^    unz_global_info64 gi;       \/* public global information *\/$/;"	m	struct:__anon8	file:	access:public
gid	src/contrib/untgz/untgz.c	/^  char gid[8];                  \/* 116 *\/$/;"	m	struct:tar_header	file:	access:public
globalcomment	src/contrib/minizip/zip.c	/^    char *globalcomment;$/;"	m	struct:__anon10	file:	access:public
gname	src/contrib/untgz/untgz.c	/^  char gname[32];               \/* 297 *\/$/;"	m	struct:tar_header	file:	access:public
good_length	src/deflate.c	/^   ush good_length; \/* reduce lazy search above this match length *\/$/;"	m	struct:config_s	file:	access:public
good_match	src/contrib/gcc_gvmat64/gvmat64.S	/^#define good_match       [ rcx + dsGoodMatch]$/;"	d
good_match	src/contrib/masmx64/gvmat64.asm	/^good_match      equ [ rcx + dsGoodMatch]$/;"	d
good_match	src/deflate.h	/^    uInt good_match;$/;"	m	struct:internal_state	access:public
gunpipe	src/examples/gun.c	/^local int gunpipe(z_stream *strm, int infile, int outfile)$/;"	f	signature:(z_stream *strm, int infile, int outfile)
gunzip	src/examples/gun.c	/^local int gunzip(z_stream *strm, char *inname, char *outname, int test)$/;"	f	signature:(z_stream *strm, char *inname, char *outname, int test)
gzFile	src/test/minigzip.c	/^} *gzFile;$/;"	t	typeref:struct:gzFile_s	file:
gzFile	src/zconf.h	134;"	d
gzFile	src/zlib.h	/^typedef struct gzFile_s *gzFile;    \/* semi-opaque gzip file descriptor *\/$/;"	t	typeref:struct:gzFile_s
gzFile	zconf.h	134;"	d
gzFile	zlib.h	/^typedef struct gzFile_s *gzFile;    \/* semi-opaque gzip file descriptor *\/$/;"	t	typeref:struct:gzFile_s
gzFile_s	src/test/minigzip.c	/^typedef struct gzFile_s {$/;"	s	file:
gzFile_s	src/zlib.h	/^struct gzFile_s {$/;"	s
gzFile_s	zlib.h	/^struct gzFile_s {$/;"	s
gzFile_s::err	src/test/minigzip.c	/^    int err;$/;"	m	struct:gzFile_s	file:	access:public
gzFile_s::file	src/test/minigzip.c	/^    FILE *file;$/;"	m	struct:gzFile_s	file:	access:public
gzFile_s::have	src/zlib.h	/^    unsigned have;$/;"	m	struct:gzFile_s	access:public
gzFile_s::have	zlib.h	/^    unsigned have;$/;"	m	struct:gzFile_s	access:public
gzFile_s::msg	src/test/minigzip.c	/^    char *msg;$/;"	m	struct:gzFile_s	file:	access:public
gzFile_s::next	src/zlib.h	/^    unsigned char *next;$/;"	m	struct:gzFile_s	access:public
gzFile_s::next	zlib.h	/^    unsigned char *next;$/;"	m	struct:gzFile_s	access:public
gzFile_s::pos	src/zlib.h	/^    z_off64_t pos;$/;"	m	struct:gzFile_s	access:public
gzFile_s::pos	zlib.h	/^    z_off64_t pos;$/;"	m	struct:gzFile_s	access:public
gzFile_s::strm	src/test/minigzip.c	/^    z_stream strm;$/;"	m	struct:gzFile_s	file:	access:public
gzFile_s::write	src/test/minigzip.c	/^    int write;$/;"	m	struct:gzFile_s	file:	access:public
gz_avail	src/gzread.c	/^local int gz_avail OF((gz_statep));$/;"	p	file:	signature:(gz_statep)
gz_avail	src/gzread.c	/^local int gz_avail(state)$/;"	f
gz_comp	src/gzwrite.c	/^local int gz_comp OF((gz_statep, int));$/;"	p	file:	signature:(gz_statep, int)
gz_comp	src/gzwrite.c	/^local int gz_comp(state, flush)$/;"	f
gz_compress	src/test/minigzip.c	/^void gz_compress      OF((FILE   *in, gzFile out));$/;"	p	file:	signature:(FILE *in, gzFile out)
gz_compress	src/test/minigzip.c	/^void gz_compress(in, out)$/;"	f
gz_compress_mmap	src/test/minigzip.c	/^int  gz_compress_mmap OF((FILE   *in, gzFile out));$/;"	p	file:	signature:(FILE *in, gzFile out)
gz_compress_mmap	src/test/minigzip.c	/^int gz_compress_mmap(in, out)$/;"	f
gz_decomp	src/gzread.c	/^local int gz_decomp OF((gz_statep));$/;"	p	file:	signature:(gz_statep)
gz_decomp	src/gzread.c	/^local int gz_decomp(state)$/;"	f
gz_error	src/gzguts.h	/^void ZLIB_INTERNAL gz_error OF((gz_statep, int, const char *));$/;"	p	signature:(gz_statep, int, const char *)
gz_error	src/gzlib.c	/^void ZLIB_INTERNAL gz_error(state, err, msg)$/;"	f
gz_error	src/zconf.h	57;"	d
gz_error	zconf.h	57;"	d
gz_fetch	src/gzread.c	/^local int gz_fetch OF((gz_statep));$/;"	p	file:	signature:(gz_statep)
gz_fetch	src/gzread.c	/^local int gz_fetch(state)$/;"	f
gz_header	src/zconf.h	136;"	d
gz_header	src/zlib.h	/^} gz_header;$/;"	t	typeref:struct:gz_header_s
gz_header	zconf.h	136;"	d
gz_header	zlib.h	/^} gz_header;$/;"	t	typeref:struct:gz_header_s
gz_header_s	src/zconf.h	150;"	d
gz_header_s	src/zlib.h	/^typedef struct gz_header_s {$/;"	s
gz_header_s	zconf.h	150;"	d
gz_header_s	zlib.h	/^typedef struct gz_header_s {$/;"	s
gz_header_s::comm_max	src/zlib.h	/^    uInt    comm_max;   \/* space at comment (only when reading header) *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::comm_max	zlib.h	/^    uInt    comm_max;   \/* space at comment (only when reading header) *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::comment	src/zlib.h	/^    Bytef   *comment;   \/* pointer to zero-terminated comment or Z_NULL *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::comment	zlib.h	/^    Bytef   *comment;   \/* pointer to zero-terminated comment or Z_NULL *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::done	src/zlib.h	/^    int     done;       \/* true when done reading gzip header (not used$/;"	m	struct:gz_header_s	access:public
gz_header_s::done	zlib.h	/^    int     done;       \/* true when done reading gzip header (not used$/;"	m	struct:gz_header_s	access:public
gz_header_s::extra	src/zlib.h	/^    Bytef   *extra;     \/* pointer to extra field or Z_NULL if none *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::extra	zlib.h	/^    Bytef   *extra;     \/* pointer to extra field or Z_NULL if none *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::extra_len	src/zlib.h	/^    uInt    extra_len;  \/* extra field length (valid if extra != Z_NULL) *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::extra_len	zlib.h	/^    uInt    extra_len;  \/* extra field length (valid if extra != Z_NULL) *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::extra_max	src/zlib.h	/^    uInt    extra_max;  \/* space at extra (only when reading header) *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::extra_max	zlib.h	/^    uInt    extra_max;  \/* space at extra (only when reading header) *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::hcrc	src/zlib.h	/^    int     hcrc;       \/* true if there was or will be a header crc *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::hcrc	zlib.h	/^    int     hcrc;       \/* true if there was or will be a header crc *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::name	src/zlib.h	/^    Bytef   *name;      \/* pointer to zero-terminated file name or Z_NULL *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::name	zlib.h	/^    Bytef   *name;      \/* pointer to zero-terminated file name or Z_NULL *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::name_max	src/zlib.h	/^    uInt    name_max;   \/* space at name (only when reading header) *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::name_max	zlib.h	/^    uInt    name_max;   \/* space at name (only when reading header) *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::os	src/zlib.h	/^    int     os;         \/* operating system *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::os	zlib.h	/^    int     os;         \/* operating system *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::text	src/zlib.h	/^    int     text;       \/* true if compressed data believed to be text *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::text	zlib.h	/^    int     text;       \/* true if compressed data believed to be text *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::time	src/zlib.h	/^    uLong   time;       \/* modification time *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::time	zlib.h	/^    uLong   time;       \/* modification time *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::xflags	src/zlib.h	/^    int     xflags;     \/* extra flags (not used when writing a gzip file) *\/$/;"	m	struct:gz_header_s	access:public
gz_header_s::xflags	zlib.h	/^    int     xflags;     \/* extra flags (not used when writing a gzip file) *\/$/;"	m	struct:gz_header_s	access:public
gz_headerp	src/zconf.h	137;"	d
gz_headerp	src/zlib.h	/^typedef gz_header FAR *gz_headerp;$/;"	t
gz_headerp	zconf.h	137;"	d
gz_headerp	zlib.h	/^typedef gz_header FAR *gz_headerp;$/;"	t
gz_init	src/gzwrite.c	/^local int gz_init OF((gz_statep));$/;"	p	file:	signature:(gz_statep)
gz_init	src/gzwrite.c	/^local int gz_init(state)$/;"	f
gz_intmax	src/gzguts.h	/^unsigned ZLIB_INTERNAL gz_intmax OF((void));$/;"	p	signature:(void)
gz_intmax	src/gzlib.c	/^unsigned ZLIB_INTERNAL gz_intmax()$/;"	f
gz_intmax	src/zconf.h	58;"	d
gz_intmax	zconf.h	58;"	d
gz_load	src/gzread.c	/^local int gz_load OF((gz_statep, unsigned char *, unsigned, unsigned *));$/;"	p	file:	signature:(gz_statep, unsigned char *, unsigned, unsigned *)
gz_load	src/gzread.c	/^local int gz_load(state, buf, len, have)$/;"	f
gz_look	src/gzread.c	/^local int gz_look OF((gz_statep));$/;"	p	file:	signature:(gz_statep)
gz_look	src/gzread.c	/^local int gz_look(state)$/;"	f
gz_open	src/gzlib.c	/^local gzFile gz_open OF((const void *, int, const char *));$/;"	p	file:	signature:(const void *, int, const char *)
gz_open	src/gzlib.c	/^local gzFile gz_open(path, fd, mode)$/;"	f
gz_open	src/test/minigzip.c	/^gzFile gz_open OF((const char *, int, const char *));$/;"	p	file:	signature:(const char *, int, const char *)
gz_open	src/test/minigzip.c	/^gzFile gz_open(path, fd, mode)$/;"	f
gz_reset	src/gzlib.c	/^local void gz_reset OF((gz_statep));$/;"	p	file:	signature:(gz_statep)
gz_reset	src/gzlib.c	/^local void gz_reset(state)$/;"	f
gz_skip	src/gzread.c	/^local int gz_skip OF((gz_statep, z_off64_t));$/;"	p	file:	signature:(gz_statep, z_off64_t)
gz_skip	src/gzread.c	/^local int gz_skip(state, len)$/;"	f
gz_state	src/gzguts.h	/^} gz_state;$/;"	t	typeref:struct:__anon1
gz_statep	src/gzguts.h	/^typedef gz_state FAR *gz_statep;$/;"	t
gz_strwinerror	src/gzguts.h	/^char ZLIB_INTERNAL *gz_strwinerror OF((DWORD error));$/;"	p	signature:(DWORD error)
gz_strwinerror	src/gzlib.c	/^char ZLIB_INTERNAL *gz_strwinerror (error)$/;"	f
gz_strwinerror	src/zconf.h	59;"	d
gz_strwinerror	zconf.h	59;"	d
gz_uncompress	src/test/minigzip.c	/^void gz_uncompress    OF((gzFile in, FILE   *out));$/;"	p	file:	signature:(gzFile in, FILE *out)
gz_uncompress	src/test/minigzip.c	/^void gz_uncompress(in, out)$/;"	f
gz_zero	src/gzwrite.c	/^local int gz_zero OF((gz_statep, z_off64_t));$/;"	p	file:	signature:(gz_statep, z_off64_t)
gz_zero	src/gzwrite.c	/^local int gz_zero(state, len)$/;"	f
gzbuffer	src/gzlib.c	/^int ZEXPORT gzbuffer(file, size)$/;"	f
gzbuffer	src/zconf.h	60;"	d
gzbuffer	src/zlib.h	/^ZEXTERN int ZEXPORT gzbuffer OF((gzFile file, unsigned size));$/;"	p	signature:(gzFile file, unsigned size)
gzbuffer	zconf.h	60;"	d
gzbuffer	zlib.h	/^ZEXTERN int ZEXPORT gzbuffer OF((gzFile file, unsigned size));$/;"	p	signature:(gzFile file, unsigned size)
gzclearerr	src/gzlib.c	/^void ZEXPORT gzclearerr(file)$/;"	f
gzclearerr	src/zconf.h	61;"	d
gzclearerr	src/zlib.h	/^ZEXTERN void ZEXPORT gzclearerr OF((gzFile file));$/;"	p	signature:(gzFile file)
gzclearerr	zconf.h	61;"	d
gzclearerr	zlib.h	/^ZEXTERN void ZEXPORT gzclearerr OF((gzFile file));$/;"	p	signature:(gzFile file)
gzclose	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private static extern int gzclose(IntPtr gzFile);$/;"	m	class:DotZLib.GZipStream	file:	access:private	signature:(IntPtr gzFile)
gzclose	src/gzclose.c	/^int ZEXPORT gzclose(file)$/;"	f
gzclose	src/test/minigzip.c	/^int gzclose OF((gzFile));$/;"	p	file:	signature:(gzFile)
gzclose	src/test/minigzip.c	/^int gzclose(gz)$/;"	f
gzclose	src/zconf.h	62;"	d
gzclose	src/zlib.h	/^ZEXTERN int ZEXPORT    gzclose OF((gzFile file));$/;"	p	signature:(gzFile file)
gzclose	zconf.h	62;"	d
gzclose	zlib.h	/^ZEXTERN int ZEXPORT    gzclose OF((gzFile file));$/;"	p	signature:(gzFile file)
gzclose_r	src/gzread.c	/^int ZEXPORT gzclose_r(file)$/;"	f
gzclose_r	src/zconf.h	63;"	d
gzclose_r	src/zlib.h	/^ZEXTERN int ZEXPORT gzclose_r OF((gzFile file));$/;"	p	signature:(gzFile file)
gzclose_r	zconf.h	63;"	d
gzclose_r	zlib.h	/^ZEXTERN int ZEXPORT gzclose_r OF((gzFile file));$/;"	p	signature:(gzFile file)
gzclose_w	src/gzwrite.c	/^int ZEXPORT gzclose_w(file)$/;"	f
gzclose_w	src/zconf.h	64;"	d
gzclose_w	src/zlib.h	/^ZEXTERN int ZEXPORT gzclose_w OF((gzFile file));$/;"	p	signature:(gzFile file)
gzclose_w	zconf.h	64;"	d
gzclose_w	zlib.h	/^ZEXTERN int ZEXPORT gzclose_w OF((gzFile file));$/;"	p	signature:(gzFile file)
gzcopy	src/examples/gzjoin.c	/^local void gzcopy(char *name, int clr, unsigned long *crc, unsigned long *tot,$/;"	f	signature:(char *name, int clr, unsigned long *crc, unsigned long *tot, FILE *out)
gzdirect	src/gzread.c	/^int ZEXPORT gzdirect(file)$/;"	f
gzdirect	src/zconf.h	65;"	d
gzdirect	src/zlib.h	/^ZEXTERN int ZEXPORT gzdirect OF((gzFile file));$/;"	p	signature:(gzFile file)
gzdirect	zconf.h	65;"	d
gzdirect	zlib.h	/^ZEXTERN int ZEXPORT gzdirect OF((gzFile file));$/;"	p	signature:(gzFile file)
gzdopen	src/gzlib.c	/^gzFile ZEXPORT gzdopen(fd, mode)$/;"	f
gzdopen	src/test/minigzip.c	/^gzFile gzdopen OF((int, const char *));$/;"	p	file:	signature:(int, const char *)
gzdopen	src/test/minigzip.c	/^gzFile gzdopen(fd, mode)$/;"	f
gzdopen	src/zconf.h	66;"	d
gzdopen	src/zlib.h	/^ZEXTERN gzFile ZEXPORT gzdopen OF((int fd, const char *mode));$/;"	p	signature:(int fd, const char *mode)
gzdopen	zconf.h	66;"	d
gzdopen	zlib.h	/^ZEXTERN gzFile ZEXPORT gzdopen OF((int fd, const char *mode));$/;"	p	signature:(int fd, const char *mode)
gzeof	src/gzlib.c	/^int ZEXPORT gzeof(file)$/;"	f
gzeof	src/zconf.h	67;"	d
gzeof	src/zlib.h	/^ZEXTERN int ZEXPORT gzeof OF((gzFile file));$/;"	p	signature:(gzFile file)
gzeof	zconf.h	67;"	d
gzeof	zlib.h	/^ZEXTERN int ZEXPORT gzeof OF((gzFile file));$/;"	p	signature:(gzFile file)
gzerror	src/gzlib.c	/^const char * ZEXPORT gzerror(file, errnum)$/;"	f
gzerror	src/test/minigzip.c	/^const char *gzerror OF((gzFile, int *));$/;"	p	file:	signature:(gzFile, int *)
gzerror	src/test/minigzip.c	/^const char *gzerror(gz, err)$/;"	f
gzerror	src/zconf.h	68;"	d
gzerror	src/zlib.h	/^ZEXTERN const char * ZEXPORT gzerror OF((gzFile file, int *errnum));$/;"	p	signature:(gzFile file, int *errnum)
gzerror	zconf.h	68;"	d
gzerror	zlib.h	/^ZEXTERN const char * ZEXPORT gzerror OF((gzFile file, int *errnum));$/;"	p	signature:(gzFile file, int *errnum)
gzfilebuf	src/contrib/iostream/zfstream.cpp	/^gzfilebuf::gzfilebuf() :$/;"	f	class:gzfilebuf	signature:()
gzfilebuf	src/contrib/iostream/zfstream.h	/^  gzfilebuf( );$/;"	p	class:gzfilebuf	access:public	signature:( )
gzfilebuf	src/contrib/iostream/zfstream.h	/^class gzfilebuf : public streambuf {$/;"	c	inherits:streambuf
gzfilebuf	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::gzfilebuf()$/;"	f	class:gzfilebuf	signature:()
gzfilebuf	src/contrib/iostream3/zfstream.h	/^  gzfilebuf();$/;"	p	class:gzfilebuf	access:public	signature:()
gzfilebuf	src/contrib/iostream3/zfstream.h	/^class gzfilebuf : public std::streambuf$/;"	c	inherits:std::streambuf
gzfilebuf::attach	src/contrib/iostream/zfstream.cpp	/^gzfilebuf *gzfilebuf::attach( int file_descriptor,$/;"	f	class:gzfilebuf	signature:( int file_descriptor, int io_mode )
gzfilebuf::attach	src/contrib/iostream/zfstream.h	/^  gzfilebuf *attach( int file_descriptor, int io_mode );$/;"	p	class:gzfilebuf	access:public	signature:( int file_descriptor, int io_mode )
gzfilebuf::attach	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::attach(int fd,$/;"	f	class:gzfilebuf	signature:(int fd, std::ios_base::openmode mode)
gzfilebuf::attach	src/contrib/iostream3/zfstream.h	/^  attach(int fd,$/;"	p	class:gzfilebuf	access:public	signature:(int fd, std::ios_base::openmode mode)
gzfilebuf::buffer	src/contrib/iostream3/zfstream.h	/^  char_type* buffer;$/;"	m	class:gzfilebuf	access:private
gzfilebuf::buffer_size	src/contrib/iostream3/zfstream.h	/^  std::streamsize buffer_size;$/;"	m	class:gzfilebuf	access:private
gzfilebuf::close	src/contrib/iostream/zfstream.cpp	/^gzfilebuf *gzfilebuf::close() {$/;"	f	class:gzfilebuf	signature:()
gzfilebuf::close	src/contrib/iostream/zfstream.h	/^  gzfilebuf *close();$/;"	p	class:gzfilebuf	access:public	signature:()
gzfilebuf::close	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::close()$/;"	f	class:gzfilebuf	signature:()
gzfilebuf::close	src/contrib/iostream3/zfstream.h	/^  close();$/;"	p	class:gzfilebuf	access:public	signature:()
gzfilebuf::disable_buffer	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::disable_buffer()$/;"	f	class:gzfilebuf	signature:()
gzfilebuf::disable_buffer	src/contrib/iostream3/zfstream.h	/^  disable_buffer();$/;"	p	class:gzfilebuf	access:private	signature:()
gzfilebuf::enable_buffer	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::enable_buffer()$/;"	f	class:gzfilebuf	signature:()
gzfilebuf::enable_buffer	src/contrib/iostream3/zfstream.h	/^  enable_buffer();$/;"	p	class:gzfilebuf	access:private	signature:()
gzfilebuf::file	src/contrib/iostream/zfstream.h	/^  gzFile file;$/;"	m	class:gzfilebuf	access:private
gzfilebuf::file	src/contrib/iostream3/zfstream.h	/^  gzFile file;$/;"	m	class:gzfilebuf	access:private
gzfilebuf::fillbuf	src/contrib/iostream/zfstream.cpp	/^int gzfilebuf::fillbuf() {$/;"	f	class:gzfilebuf	signature:()
gzfilebuf::fillbuf	src/contrib/iostream/zfstream.h	/^  int fillbuf();$/;"	p	class:gzfilebuf	access:private	signature:()
gzfilebuf::flushbuf	src/contrib/iostream/zfstream.cpp	/^int gzfilebuf::flushbuf() {$/;"	f	class:gzfilebuf	signature:()
gzfilebuf::flushbuf	src/contrib/iostream/zfstream.h	/^  int flushbuf();$/;"	p	class:gzfilebuf	access:private	signature:()
gzfilebuf::gzfilebuf	src/contrib/iostream/zfstream.cpp	/^gzfilebuf::gzfilebuf() :$/;"	f	class:gzfilebuf	signature:()
gzfilebuf::gzfilebuf	src/contrib/iostream/zfstream.h	/^  gzfilebuf( );$/;"	p	class:gzfilebuf	access:public	signature:( )
gzfilebuf::gzfilebuf	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::gzfilebuf()$/;"	f	class:gzfilebuf	signature:()
gzfilebuf::gzfilebuf	src/contrib/iostream3/zfstream.h	/^  gzfilebuf();$/;"	p	class:gzfilebuf	access:public	signature:()
gzfilebuf::io_mode	src/contrib/iostream3/zfstream.h	/^  std::ios_base::openmode io_mode;$/;"	m	class:gzfilebuf	access:private
gzfilebuf::is_open	src/contrib/iostream/zfstream.h	/^  inline int is_open() const { return (file !=NULL); }$/;"	f	class:gzfilebuf	access:public	signature:() const
gzfilebuf::is_open	src/contrib/iostream3/zfstream.h	/^  is_open() const { return (file != NULL); }$/;"	f	class:gzfilebuf	access:public	signature:() const
gzfilebuf::mode	src/contrib/iostream/zfstream.h	/^  short mode;$/;"	m	class:gzfilebuf	access:private
gzfilebuf::open	src/contrib/iostream/zfstream.cpp	/^gzfilebuf *gzfilebuf::open( const char *name,$/;"	f	class:gzfilebuf	signature:( const char *name, int io_mode )
gzfilebuf::open	src/contrib/iostream/zfstream.h	/^  gzfilebuf *open( const char *name, int io_mode );$/;"	p	class:gzfilebuf	access:public	signature:( const char *name, int io_mode )
gzfilebuf::open	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::open(const char *name,$/;"	f	class:gzfilebuf	signature:(const char *name, std::ios_base::openmode mode)
gzfilebuf::open	src/contrib/iostream3/zfstream.h	/^  open(const char* name,$/;"	p	class:gzfilebuf	access:public	signature:(const char* name, std::ios_base::openmode mode)
gzfilebuf::open_mode	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::open_mode(std::ios_base::openmode mode,$/;"	f	class:gzfilebuf	signature:(std::ios_base::openmode mode, char* c_mode) const
gzfilebuf::open_mode	src/contrib/iostream3/zfstream.h	/^  open_mode(std::ios_base::openmode mode,$/;"	p	class:gzfilebuf	access:protected	signature:(std::ios_base::openmode mode, char* c_mode) const
gzfilebuf::overflow	src/contrib/iostream/zfstream.cpp	/^int gzfilebuf::overflow( int c ) {$/;"	f	class:gzfilebuf	signature:( int c )
gzfilebuf::overflow	src/contrib/iostream/zfstream.h	/^  virtual int overflow( int = EOF );$/;"	p	class:gzfilebuf	access:protected	signature:( int = EOF )
gzfilebuf::overflow	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::overflow(int_type c)$/;"	f	class:gzfilebuf	signature:(int_type c)
gzfilebuf::overflow	src/contrib/iostream3/zfstream.h	/^  overflow(int_type c = traits_type::eof());$/;"	p	class:gzfilebuf	access:protected	signature:(int_type c = traits_type::eof())
gzfilebuf::own_buffer	src/contrib/iostream3/zfstream.h	/^  bool own_buffer;$/;"	m	class:gzfilebuf	access:private
gzfilebuf::own_fd	src/contrib/iostream3/zfstream.h	/^  bool own_fd;$/;"	m	class:gzfilebuf	access:private
gzfilebuf::own_file_descriptor	src/contrib/iostream/zfstream.h	/^  short own_file_descriptor;$/;"	m	class:gzfilebuf	access:private
gzfilebuf::seekoff	src/contrib/iostream/zfstream.cpp	/^streampos gzfilebuf::seekoff( streamoff off, ios::seek_dir dir, int which ) {$/;"	f	class:gzfilebuf	signature:( streamoff off, ios::seek_dir dir, int which )
gzfilebuf::seekoff	src/contrib/iostream/zfstream.h	/^  virtual streampos seekoff( streamoff, ios::seek_dir, int );$/;"	p	class:gzfilebuf	access:public	signature:( streamoff, ios::seek_dir, int )
gzfilebuf::setbuf	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::setbuf(char_type* p,$/;"	f	class:gzfilebuf	signature:(char_type* p, std::streamsize n)
gzfilebuf::setbuf	src/contrib/iostream3/zfstream.h	/^  setbuf(char_type* p,$/;"	p	class:gzfilebuf	access:protected	signature:(char_type* p, std::streamsize n)
gzfilebuf::setcompression	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::setcompression(int comp_level,$/;"	f	class:gzfilebuf	signature:(int comp_level, int comp_strategy)
gzfilebuf::setcompression	src/contrib/iostream3/zfstream.h	/^  setcompression(int comp_level,$/;"	p	class:gzfilebuf	access:public	signature:(int comp_level, int comp_strategy = Z_DEFAULT_STRATEGY)
gzfilebuf::setcompressionlevel	src/contrib/iostream/zfstream.cpp	/^int gzfilebuf::setcompressionlevel( int comp_level ) {$/;"	f	class:gzfilebuf	signature:( int comp_level )
gzfilebuf::setcompressionlevel	src/contrib/iostream/zfstream.h	/^  int setcompressionlevel( int comp_level );$/;"	p	class:gzfilebuf	access:public	signature:( int comp_level )
gzfilebuf::setcompressionstrategy	src/contrib/iostream/zfstream.cpp	/^int gzfilebuf::setcompressionstrategy( int comp_strategy ) {$/;"	f	class:gzfilebuf	signature:( int comp_strategy )
gzfilebuf::setcompressionstrategy	src/contrib/iostream/zfstream.h	/^  int setcompressionstrategy( int comp_strategy );$/;"	p	class:gzfilebuf	access:public	signature:( int comp_strategy )
gzfilebuf::showmanyc	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::showmanyc()$/;"	f	class:gzfilebuf	signature:()
gzfilebuf::showmanyc	src/contrib/iostream3/zfstream.h	/^  showmanyc();$/;"	p	class:gzfilebuf	access:protected	signature:()
gzfilebuf::sync	src/contrib/iostream/zfstream.cpp	/^int gzfilebuf::sync() {$/;"	f	class:gzfilebuf	signature:()
gzfilebuf::sync	src/contrib/iostream/zfstream.h	/^  virtual int sync();$/;"	p	class:gzfilebuf	access:public	signature:()
gzfilebuf::sync	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::sync()$/;"	f	class:gzfilebuf	signature:()
gzfilebuf::sync	src/contrib/iostream3/zfstream.h	/^  sync();$/;"	p	class:gzfilebuf	access:protected	signature:()
gzfilebuf::underflow	src/contrib/iostream/zfstream.cpp	/^int gzfilebuf::underflow() {$/;"	f	class:gzfilebuf	signature:()
gzfilebuf::underflow	src/contrib/iostream/zfstream.h	/^  virtual int underflow();$/;"	p	class:gzfilebuf	access:protected	signature:()
gzfilebuf::underflow	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::underflow()$/;"	f	class:gzfilebuf	signature:()
gzfilebuf::underflow	src/contrib/iostream3/zfstream.h	/^  underflow();$/;"	p	class:gzfilebuf	access:protected	signature:()
gzfilebuf::~gzfilebuf	src/contrib/iostream/zfstream.cpp	/^gzfilebuf::~gzfilebuf() {$/;"	f	class:gzfilebuf	signature:()
gzfilebuf::~gzfilebuf	src/contrib/iostream/zfstream.h	/^  virtual ~gzfilebuf();$/;"	p	class:gzfilebuf	access:public	signature:()
gzfilebuf::~gzfilebuf	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::~gzfilebuf()$/;"	f	class:gzfilebuf	signature:()
gzfilebuf::~gzfilebuf	src/contrib/iostream3/zfstream.h	/^  ~gzfilebuf();$/;"	p	class:gzfilebuf	access:public	signature:()
gzfilestream_common	src/contrib/iostream/zfstream.cpp	/^gzfilestream_common::gzfilestream_common() :$/;"	f	class:gzfilestream_common	signature:()
gzfilestream_common	src/contrib/iostream/zfstream.h	/^  gzfilestream_common();$/;"	p	class:gzfilestream_common	access:protected	signature:()
gzfilestream_common	src/contrib/iostream/zfstream.h	/^class gzfilestream_common : virtual public ios {$/;"	c	inherits:ios
gzfilestream_common::attach	src/contrib/iostream/zfstream.cpp	/^void gzfilestream_common::attach( int fd, int io_mode ) {$/;"	f	class:gzfilestream_common	signature:( int fd, int io_mode )
gzfilestream_common::attach	src/contrib/iostream/zfstream.h	/^  void attach( int fd, int io_mode );$/;"	p	class:gzfilestream_common	access:public	signature:( int fd, int io_mode )
gzfilestream_common::buffer	src/contrib/iostream/zfstream.h	/^  gzfilebuf buffer;$/;"	m	class:gzfilestream_common	access:private
gzfilestream_common::close	src/contrib/iostream/zfstream.cpp	/^void gzfilestream_common::close() {$/;"	f	class:gzfilestream_common	signature:()
gzfilestream_common::close	src/contrib/iostream/zfstream.h	/^  void close();$/;"	p	class:gzfilestream_common	access:public	signature:()
gzfilestream_common::gzfilestream_common	src/contrib/iostream/zfstream.cpp	/^gzfilestream_common::gzfilestream_common() :$/;"	f	class:gzfilestream_common	signature:()
gzfilestream_common::gzfilestream_common	src/contrib/iostream/zfstream.h	/^  gzfilestream_common();$/;"	p	class:gzfilestream_common	access:protected	signature:()
gzfilestream_common::open	src/contrib/iostream/zfstream.cpp	/^void gzfilestream_common::open( const char *name, int io_mode ) {$/;"	f	class:gzfilestream_common	signature:( const char *name, int io_mode )
gzfilestream_common::open	src/contrib/iostream/zfstream.h	/^  void open( const char *name, int io_mode );$/;"	p	class:gzfilestream_common	access:public	signature:( const char *name, int io_mode )
gzfilestream_common::rdbuf	src/contrib/iostream/zfstream.cpp	/^gzfilebuf *gzfilestream_common::rdbuf()$/;"	f	class:gzfilestream_common	signature:()
gzfilestream_common::rdbuf	src/contrib/iostream/zfstream.h	/^  gzfilebuf *rdbuf();$/;"	p	class:gzfilestream_common	access:private	signature:()
gzfilestream_common::setcompressionlevel	src/contrib/iostream/zfstream.h	/^  friend gzofstream &setcompressionlevel( gzofstream &, int );$/;"	p	class:gzfilestream_common	access:friend	signature:( gzofstream &, int )
gzfilestream_common::setcompressionstrategy	src/contrib/iostream/zfstream.h	/^  friend gzofstream &setcompressionstrategy( gzofstream &, int );$/;"	p	class:gzfilestream_common	access:friend	signature:( gzofstream &, int )
gzfilestream_common::~gzfilestream_common	src/contrib/iostream/zfstream.cpp	/^gzfilestream_common::~gzfilestream_common()$/;"	f	class:gzfilestream_common	signature:()
gzfilestream_common::~gzfilestream_common	src/contrib/iostream/zfstream.h	/^  virtual ~gzfilestream_common();$/;"	p	class:gzfilestream_common	access:public	signature:()
gzflush	src/gzwrite.c	/^int ZEXPORT gzflush(file, flush)$/;"	f
gzflush	src/zconf.h	69;"	d
gzflush	src/zlib.h	/^ZEXTERN int ZEXPORT gzflush OF((gzFile file, int flush));$/;"	p	signature:(gzFile file, int flush)
gzflush	zconf.h	69;"	d
gzflush	zlib.h	/^ZEXTERN int ZEXPORT gzflush OF((gzFile file, int flush));$/;"	p	signature:(gzFile file, int flush)
gzgetc	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private static extern int gzgetc(IntPtr gzFile);$/;"	m	class:DotZLib.GZipStream	file:	access:private	signature:(IntPtr gzFile)
gzgetc	src/gzread.c	/^int ZEXPORT gzgetc(file)$/;"	f
gzgetc	src/gzread.c	385;"	d	file:
gzgetc	src/zconf.h	70;"	d
gzgetc	src/zlib.h	/^ZEXTERN int ZEXPORT gzgetc OF((gzFile file));$/;"	p	signature:(gzFile file)
gzgetc	src/zlib.h	1681;"	d
gzgetc	zconf.h	70;"	d
gzgetc	zlib.h	/^ZEXTERN int ZEXPORT gzgetc OF((gzFile file));$/;"	p	signature:(gzFile file)
gzgetc	zlib.h	1681;"	d
gzgetc_	src/gzread.c	/^int ZEXPORT gzgetc_(file)$/;"	f
gzgetc_	src/zconf.h	71;"	d
gzgetc_	src/zlib.h	/^ZEXTERN int ZEXPORT gzgetc_ OF((gzFile file));  \/* backward compatibility *\/$/;"	p	signature:(gzFile file)
gzgetc_	zconf.h	71;"	d
gzgetc_	zlib.h	/^ZEXTERN int ZEXPORT gzgetc_ OF((gzFile file));  \/* backward compatibility *\/$/;"	p	signature:(gzFile file)
gzgets	src/gzread.c	/^char * ZEXPORT gzgets(file, buf, len)$/;"	f
gzgets	src/zconf.h	72;"	d
gzgets	src/zlib.h	/^ZEXTERN char * ZEXPORT gzgets OF((gzFile file, char *buf, int len));$/;"	p	signature:(gzFile file, char *buf, int len)
gzgets	zconf.h	72;"	d
gzgets	zlib.h	/^ZEXTERN char * ZEXPORT gzgets OF((gzFile file, char *buf, int len));$/;"	p	signature:(gzFile file, char *buf, int len)
gzhead	src/deflate.h	/^    gz_headerp  gzhead;  \/* gzip header information to write *\/$/;"	m	struct:internal_state	access:public
gzhead	src/examples/gzjoin.c	/^local void gzhead(bin *in)$/;"	f	signature:(bin *in)
gzheader	src/examples/gzappend.c	/^local void gzheader(file *in)$/;"	f	signature:(file *in)
gzifstream	src/contrib/iostream/zfstream.cpp	/^gzifstream::gzifstream( const char *name, int io_mode ) :$/;"	f	class:gzifstream	signature:( const char *name, int io_mode )
gzifstream	src/contrib/iostream/zfstream.cpp	/^gzifstream::gzifstream( int fd, int io_mode ) :$/;"	f	class:gzifstream	signature:( int fd, int io_mode )
gzifstream	src/contrib/iostream/zfstream.cpp	/^gzifstream::gzifstream() :$/;"	f	class:gzifstream	signature:()
gzifstream	src/contrib/iostream/zfstream.h	/^  gzifstream( const char *name, int io_mode = ios::in );$/;"	p	class:gzifstream	access:public	signature:( const char *name, int io_mode = ios::in )
gzifstream	src/contrib/iostream/zfstream.h	/^  gzifstream( int fd, int io_mode = ios::in );$/;"	p	class:gzifstream	access:public	signature:( int fd, int io_mode = ios::in )
gzifstream	src/contrib/iostream/zfstream.h	/^  gzifstream();$/;"	p	class:gzifstream	access:public	signature:()
gzifstream	src/contrib/iostream/zfstream.h	/^class gzifstream : public gzfilestream_common, public istream {$/;"	c	inherits:gzfilestream_common,istream
gzifstream	src/contrib/iostream3/zfstream.cc	/^gzifstream::gzifstream()$/;"	f	class:gzifstream	signature:()
gzifstream	src/contrib/iostream3/zfstream.cc	/^gzifstream::gzifstream(const char* name,$/;"	f	class:gzifstream	signature:(const char* name, std::ios_base::openmode mode)
gzifstream	src/contrib/iostream3/zfstream.cc	/^gzifstream::gzifstream(int fd,$/;"	f	class:gzifstream	signature:(int fd, std::ios_base::openmode mode)
gzifstream	src/contrib/iostream3/zfstream.h	/^  gzifstream();$/;"	p	class:gzifstream	access:public	signature:()
gzifstream	src/contrib/iostream3/zfstream.h	/^  gzifstream(const char* name,$/;"	p	class:gzifstream	access:public	signature:(const char* name, std::ios_base::openmode mode = std::ios_base::in)
gzifstream	src/contrib/iostream3/zfstream.h	/^  gzifstream(int fd,$/;"	p	class:gzifstream	access:public	signature:(int fd, std::ios_base::openmode mode = std::ios_base::in)
gzifstream	src/contrib/iostream3/zfstream.h	/^class gzifstream : public std::istream$/;"	c	inherits:std::istream
gzifstream::attach	src/contrib/iostream3/zfstream.cc	/^gzifstream::attach(int fd,$/;"	f	class:gzifstream	signature:(int fd, std::ios_base::openmode mode)
gzifstream::attach	src/contrib/iostream3/zfstream.h	/^  attach(int fd,$/;"	p	class:gzifstream	access:public	signature:(int fd, std::ios_base::openmode mode = std::ios_base::in)
gzifstream::close	src/contrib/iostream3/zfstream.cc	/^gzifstream::close()$/;"	f	class:gzifstream	signature:()
gzifstream::close	src/contrib/iostream3/zfstream.h	/^  close();$/;"	p	class:gzifstream	access:public	signature:()
gzifstream::gzifstream	src/contrib/iostream/zfstream.cpp	/^gzifstream::gzifstream( const char *name, int io_mode ) :$/;"	f	class:gzifstream	signature:( const char *name, int io_mode )
gzifstream::gzifstream	src/contrib/iostream/zfstream.cpp	/^gzifstream::gzifstream( int fd, int io_mode ) :$/;"	f	class:gzifstream	signature:( int fd, int io_mode )
gzifstream::gzifstream	src/contrib/iostream/zfstream.cpp	/^gzifstream::gzifstream() :$/;"	f	class:gzifstream	signature:()
gzifstream::gzifstream	src/contrib/iostream/zfstream.h	/^  gzifstream( const char *name, int io_mode = ios::in );$/;"	p	class:gzifstream	access:public	signature:( const char *name, int io_mode = ios::in )
gzifstream::gzifstream	src/contrib/iostream/zfstream.h	/^  gzifstream( int fd, int io_mode = ios::in );$/;"	p	class:gzifstream	access:public	signature:( int fd, int io_mode = ios::in )
gzifstream::gzifstream	src/contrib/iostream/zfstream.h	/^  gzifstream();$/;"	p	class:gzifstream	access:public	signature:()
gzifstream::gzifstream	src/contrib/iostream3/zfstream.cc	/^gzifstream::gzifstream()$/;"	f	class:gzifstream	signature:()
gzifstream::gzifstream	src/contrib/iostream3/zfstream.cc	/^gzifstream::gzifstream(const char* name,$/;"	f	class:gzifstream	signature:(const char* name, std::ios_base::openmode mode)
gzifstream::gzifstream	src/contrib/iostream3/zfstream.cc	/^gzifstream::gzifstream(int fd,$/;"	f	class:gzifstream	signature:(int fd, std::ios_base::openmode mode)
gzifstream::gzifstream	src/contrib/iostream3/zfstream.h	/^  gzifstream();$/;"	p	class:gzifstream	access:public	signature:()
gzifstream::gzifstream	src/contrib/iostream3/zfstream.h	/^  gzifstream(const char* name,$/;"	p	class:gzifstream	access:public	signature:(const char* name, std::ios_base::openmode mode = std::ios_base::in)
gzifstream::gzifstream	src/contrib/iostream3/zfstream.h	/^  gzifstream(int fd,$/;"	p	class:gzifstream	access:public	signature:(int fd, std::ios_base::openmode mode = std::ios_base::in)
gzifstream::is_open	src/contrib/iostream3/zfstream.h	/^  is_open() { return sb.is_open(); }$/;"	f	class:gzifstream	access:public	signature:()
gzifstream::open	src/contrib/iostream3/zfstream.cc	/^gzifstream::open(const char* name,$/;"	f	class:gzifstream	signature:(const char* name, std::ios_base::openmode mode)
gzifstream::open	src/contrib/iostream3/zfstream.h	/^  open(const char* name,$/;"	p	class:gzifstream	access:public	signature:(const char* name, std::ios_base::openmode mode = std::ios_base::in)
gzifstream::rdbuf	src/contrib/iostream3/zfstream.h	/^  rdbuf() const$/;"	f	class:gzifstream	access:public	signature:() const
gzifstream::sb	src/contrib/iostream3/zfstream.h	/^  gzfilebuf sb;$/;"	m	class:gzifstream	access:private
gzifstream::~gzifstream	src/contrib/iostream/zfstream.cpp	/^gzifstream::~gzifstream() { }$/;"	f	class:gzifstream	signature:()
gzifstream::~gzifstream	src/contrib/iostream/zfstream.h	/^  virtual ~gzifstream();$/;"	p	class:gzifstream	access:public	signature:()
gzindex	src/deflate.h	/^    uInt   gzindex;      \/* where in extra, name, or comment *\/$/;"	m	struct:internal_state	access:public
gzinit	src/examples/gzjoin.c	/^local void gzinit(unsigned long *crc, unsigned long *tot, FILE *out)$/;"	f	signature:(unsigned long *crc, unsigned long *tot, FILE *out)
gzlog	src/examples/gzlog.h	/^typedef void gzlog;$/;"	t
gzlog_bail	src/examples/gzlog.c	/^    int gzlog_bail = 0;         \/* which point to bail at (1..8) *\/$/;"	v
gzlog_close	src/examples/gzlog.c	/^int gzlog_close(gzlog *logd)$/;"	f	signature:(gzlog *logd)
gzlog_close	src/examples/gzlog.h	/^int gzlog_close(gzlog *log);$/;"	p	signature:(gzlog *log)
gzlog_compress	src/examples/gzlog.c	/^int gzlog_compress(gzlog *logd)$/;"	f	signature:(gzlog *logd)
gzlog_compress	src/examples/gzlog.h	/^int gzlog_compress(gzlog *log);$/;"	p	signature:(gzlog *log)
gzlog_count	src/examples/gzlog.c	/^    int gzlog_count = -1;       \/* number of times through to wait *\/$/;"	v
gzlog_jump	src/examples/gzlog.c	/^    jmp_buf gzlog_jump;         \/* where to go back to *\/$/;"	v
gzlog_open	src/examples/gzlog.c	/^gzlog *gzlog_open(char *path)$/;"	f	signature:(char *path)
gzlog_open	src/examples/gzlog.h	/^gzlog *gzlog_open(char *path);$/;"	p	signature:(char *path)
gzlog_write	src/examples/gzlog.c	/^int gzlog_write(gzlog *logd, void *data, size_t len)$/;"	f	signature:(gzlog *logd, void *data, size_t len)
gzlog_write	src/examples/gzlog.h	/^int gzlog_write(gzlog *log, void *data, size_t len);$/;"	p	signature:(gzlog *log, void *data, size_t len)
gzoffset	src/gzlib.c	/^z_off_t ZEXPORT gzoffset(file)$/;"	f
gzoffset	src/zconf.h	73;"	d
gzoffset	src/zlib.h	/^   ZEXTERN z_off_t ZEXPORT gzoffset OF((gzFile));$/;"	p	signature:(gzFile)
gzoffset	src/zlib.h	1712;"	d
gzoffset	zconf.h	73;"	d
gzoffset	zlib.h	/^   ZEXTERN z_off_t ZEXPORT gzoffset OF((gzFile));$/;"	p	signature:(gzFile)
gzoffset	zlib.h	1712;"	d
gzoffset64	src/gzguts.h	/^    ZEXTERN z_off64_t ZEXPORT gzoffset64 OF((gzFile));$/;"	p	signature:(gzFile)
gzoffset64	src/gzlib.c	/^z_off64_t ZEXPORT gzoffset64(file)$/;"	f
gzoffset64	src/zconf.h	74;"	d
gzoffset64	src/zlib.h	/^     ZEXTERN z_off_t ZEXPORT gzoffset64 OF((gzFile));$/;"	p	signature:(gzFile)
gzoffset64	src/zlib.h	/^   ZEXTERN z_off64_t ZEXPORT gzoffset64 OF((gzFile));$/;"	p	signature:(gzFile)
gzoffset64	zconf.h	74;"	d
gzoffset64	zlib.h	/^     ZEXTERN z_off_t ZEXPORT gzoffset64 OF((gzFile));$/;"	p	signature:(gzFile)
gzoffset64	zlib.h	/^   ZEXTERN z_off64_t ZEXPORT gzoffset64 OF((gzFile));$/;"	p	signature:(gzFile)
gzofstream	src/contrib/iostream/zfstream.cpp	/^gzofstream::gzofstream( const char *name, int io_mode ) :$/;"	f	class:gzofstream	signature:( const char *name, int io_mode )
gzofstream	src/contrib/iostream/zfstream.cpp	/^gzofstream::gzofstream( int fd, int io_mode ) :$/;"	f	class:gzofstream	signature:( int fd, int io_mode )
gzofstream	src/contrib/iostream/zfstream.cpp	/^gzofstream::gzofstream() :$/;"	f	class:gzofstream	signature:()
gzofstream	src/contrib/iostream/zfstream.h	/^  gzofstream( const char *name, int io_mode = ios::out );$/;"	p	class:gzofstream	access:public	signature:( const char *name, int io_mode = ios::out )
gzofstream	src/contrib/iostream/zfstream.h	/^  gzofstream( int fd, int io_mode = ios::out );$/;"	p	class:gzofstream	access:public	signature:( int fd, int io_mode = ios::out )
gzofstream	src/contrib/iostream/zfstream.h	/^  gzofstream();$/;"	p	class:gzofstream	access:public	signature:()
gzofstream	src/contrib/iostream/zfstream.h	/^class gzofstream : public gzfilestream_common, public ostream {$/;"	c	inherits:gzfilestream_common,ostream
gzofstream	src/contrib/iostream3/zfstream.cc	/^gzofstream::gzofstream()$/;"	f	class:gzofstream	signature:()
gzofstream	src/contrib/iostream3/zfstream.cc	/^gzofstream::gzofstream(const char* name,$/;"	f	class:gzofstream	signature:(const char* name, std::ios_base::openmode mode)
gzofstream	src/contrib/iostream3/zfstream.cc	/^gzofstream::gzofstream(int fd,$/;"	f	class:gzofstream	signature:(int fd, std::ios_base::openmode mode)
gzofstream	src/contrib/iostream3/zfstream.h	/^  gzofstream();$/;"	p	class:gzofstream	access:public	signature:()
gzofstream	src/contrib/iostream3/zfstream.h	/^  gzofstream(const char* name,$/;"	p	class:gzofstream	access:public	signature:(const char* name, std::ios_base::openmode mode = std::ios_base::out)
gzofstream	src/contrib/iostream3/zfstream.h	/^  gzofstream(int fd,$/;"	p	class:gzofstream	access:public	signature:(int fd, std::ios_base::openmode mode = std::ios_base::out)
gzofstream	src/contrib/iostream3/zfstream.h	/^class gzofstream : public std::ostream$/;"	c	inherits:std::ostream
gzofstream::attach	src/contrib/iostream3/zfstream.cc	/^gzofstream::attach(int fd,$/;"	f	class:gzofstream	signature:(int fd, std::ios_base::openmode mode)
gzofstream::attach	src/contrib/iostream3/zfstream.h	/^  attach(int fd,$/;"	p	class:gzofstream	access:public	signature:(int fd, std::ios_base::openmode mode = std::ios_base::out)
gzofstream::close	src/contrib/iostream3/zfstream.cc	/^gzofstream::close()$/;"	f	class:gzofstream	signature:()
gzofstream::close	src/contrib/iostream3/zfstream.h	/^  close();$/;"	p	class:gzofstream	access:public	signature:()
gzofstream::gzofstream	src/contrib/iostream/zfstream.cpp	/^gzofstream::gzofstream( const char *name, int io_mode ) :$/;"	f	class:gzofstream	signature:( const char *name, int io_mode )
gzofstream::gzofstream	src/contrib/iostream/zfstream.cpp	/^gzofstream::gzofstream( int fd, int io_mode ) :$/;"	f	class:gzofstream	signature:( int fd, int io_mode )
gzofstream::gzofstream	src/contrib/iostream/zfstream.cpp	/^gzofstream::gzofstream() :$/;"	f	class:gzofstream	signature:()
gzofstream::gzofstream	src/contrib/iostream/zfstream.h	/^  gzofstream( const char *name, int io_mode = ios::out );$/;"	p	class:gzofstream	access:public	signature:( const char *name, int io_mode = ios::out )
gzofstream::gzofstream	src/contrib/iostream/zfstream.h	/^  gzofstream( int fd, int io_mode = ios::out );$/;"	p	class:gzofstream	access:public	signature:( int fd, int io_mode = ios::out )
gzofstream::gzofstream	src/contrib/iostream/zfstream.h	/^  gzofstream();$/;"	p	class:gzofstream	access:public	signature:()
gzofstream::gzofstream	src/contrib/iostream3/zfstream.cc	/^gzofstream::gzofstream()$/;"	f	class:gzofstream	signature:()
gzofstream::gzofstream	src/contrib/iostream3/zfstream.cc	/^gzofstream::gzofstream(const char* name,$/;"	f	class:gzofstream	signature:(const char* name, std::ios_base::openmode mode)
gzofstream::gzofstream	src/contrib/iostream3/zfstream.cc	/^gzofstream::gzofstream(int fd,$/;"	f	class:gzofstream	signature:(int fd, std::ios_base::openmode mode)
gzofstream::gzofstream	src/contrib/iostream3/zfstream.h	/^  gzofstream();$/;"	p	class:gzofstream	access:public	signature:()
gzofstream::gzofstream	src/contrib/iostream3/zfstream.h	/^  gzofstream(const char* name,$/;"	p	class:gzofstream	access:public	signature:(const char* name, std::ios_base::openmode mode = std::ios_base::out)
gzofstream::gzofstream	src/contrib/iostream3/zfstream.h	/^  gzofstream(int fd,$/;"	p	class:gzofstream	access:public	signature:(int fd, std::ios_base::openmode mode = std::ios_base::out)
gzofstream::is_open	src/contrib/iostream3/zfstream.h	/^  is_open() { return sb.is_open(); }$/;"	f	class:gzofstream	access:public	signature:()
gzofstream::open	src/contrib/iostream3/zfstream.cc	/^gzofstream::open(const char* name,$/;"	f	class:gzofstream	signature:(const char* name, std::ios_base::openmode mode)
gzofstream::open	src/contrib/iostream3/zfstream.h	/^  open(const char* name,$/;"	p	class:gzofstream	access:public	signature:(const char* name, std::ios_base::openmode mode = std::ios_base::out)
gzofstream::rdbuf	src/contrib/iostream3/zfstream.h	/^  rdbuf() const$/;"	f	class:gzofstream	access:public	signature:() const
gzofstream::sb	src/contrib/iostream3/zfstream.h	/^  gzfilebuf sb;$/;"	m	class:gzofstream	access:private
gzofstream::~gzofstream	src/contrib/iostream/zfstream.cpp	/^gzofstream::~gzofstream() { }$/;"	f	class:gzofstream	signature:()
gzofstream::~gzofstream	src/contrib/iostream/zfstream.h	/^  virtual ~gzofstream();$/;"	p	class:gzofstream	access:public	signature:()
gzomanip	src/contrib/iostream/zfstream.h	/^template<class T> class gzomanip {$/;"	c
gzomanip2	src/contrib/iostream3/zfstream.h	/^  class gzomanip2$/;"	c
gzomanip2::f	src/contrib/iostream3/zfstream.h	/^    gzomanip2(gzofstream& (*f)(gzofstream&, T1, T2),$/;"	p	class:gzomanip2	access:public	signature:(gzofstream&, T1, T2)
gzomanip2::f	src/contrib/iostream3/zfstream.h	/^  gzomanip2<T1,T2>::gzomanip2(gzofstream &(*f)(gzofstream &, T1, T2),$/;"	p	class:gzomanip2	signature:(gzofstream &, T1, T2)
gzomanip2::func	src/contrib/iostream3/zfstream.h	/^    (*func)(gzofstream&, T1, T2);$/;"	m	class:gzomanip2	access:private
gzomanip2::operator <<	src/contrib/iostream3/zfstream.h	/^      operator<<(gzofstream&,$/;"	p	class:gzomanip2	access:friend	signature:(gzofstream&, const gzomanip2<Ta,Tb>&)
gzomanip2::v1	src/contrib/iostream3/zfstream.h	/^              T1 v1,$/;"	m	class:gzomanip2	access:public
gzomanip2::v2	src/contrib/iostream3/zfstream.h	/^              T2 v2);$/;"	m	class:gzomanip2	access:public
gzomanip2::val1	src/contrib/iostream3/zfstream.h	/^    T1 val1;$/;"	m	class:gzomanip2	access:private
gzomanip2::val2	src/contrib/iostream3/zfstream.h	/^    T2 val2;$/;"	m	class:gzomanip2	access:private
gzomanip::f	src/contrib/iostream/zfstream.h	/^  gzomanip(gzofstream &(*f)(gzofstream &, T), T v) : func(f), val(v) { }$/;"	p	class:gzomanip	access:public	signature:(gzofstream &, T)
gzomanip::func	src/contrib/iostream/zfstream.h	/^  gzofstream &(*func)(gzofstream &, T);$/;"	m	class:gzomanip	access:private
gzomanip::func	src/contrib/iostream/zfstream.h	/^  gzomanip(gzofstream &(*f)(gzofstream &, T), T v) : func(f), val(v) { }$/;"	p	class:gzomanip	access:public	signature:(f)
gzomanip::operator <<	src/contrib/iostream/zfstream.h	/^  friend gzofstream &operator<<(gzofstream &, const gzomanip<T> &);$/;"	p	class:gzomanip	access:friend	signature:(gzofstream &, const gzomanip<T> &)
gzomanip::val	src/contrib/iostream/zfstream.h	/^  T val;$/;"	m	class:gzomanip	access:private
gzomanip::val	src/contrib/iostream/zfstream.h	/^  gzomanip(gzofstream &(*f)(gzofstream &, T), T v) : func(f), val(v) { }$/;"	f	class:gzomanip	access:public	signature:(v)
gzopen	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private static extern IntPtr gzopen(string name, string mode);$/;"	m	class:DotZLib.GZipStream	file:	access:private	signature:(string name, string mode)
gzopen	src/gzlib.c	/^gzFile ZEXPORT gzopen(path, mode)$/;"	f
gzopen	src/test/minigzip.c	/^gzFile gzopen OF((const char *, const char *));$/;"	p	file:	signature:(const char *, const char *)
gzopen	src/test/minigzip.c	/^gzFile gzopen(path, mode)$/;"	f
gzopen	src/zconf.h	75;"	d
gzopen	src/zlib.h	/^   ZEXTERN gzFile ZEXPORT gzopen OF((const char *, const char *));$/;"	p	signature:(const char *, const char *)
gzopen	src/zlib.h	1709;"	d
gzopen	zconf.h	75;"	d
gzopen	zlib.h	/^   ZEXTERN gzFile ZEXPORT gzopen OF((const char *, const char *));$/;"	p	signature:(const char *, const char *)
gzopen	zlib.h	1709;"	d
gzopen64	src/gzguts.h	/^    ZEXTERN gzFile ZEXPORT gzopen64 OF((const char *, const char *));$/;"	p	signature:(const char *, const char *)
gzopen64	src/gzlib.c	/^gzFile ZEXPORT gzopen64(path, mode)$/;"	f
gzopen64	src/zconf.h	76;"	d
gzopen64	src/zlib.h	/^     ZEXTERN gzFile ZEXPORT gzopen64 OF((const char *, const char *));$/;"	p	signature:(const char *, const char *)
gzopen64	src/zlib.h	/^   ZEXTERN gzFile ZEXPORT gzopen64 OF((const char *, const char *));$/;"	p	signature:(const char *, const char *)
gzopen64	zconf.h	76;"	d
gzopen64	zlib.h	/^     ZEXTERN gzFile ZEXPORT gzopen64 OF((const char *, const char *));$/;"	p	signature:(const char *, const char *)
gzopen64	zlib.h	/^   ZEXTERN gzFile ZEXPORT gzopen64 OF((const char *, const char *));$/;"	p	signature:(const char *, const char *)
gzopen_w	src/gzlib.c	/^gzFile ZEXPORT gzopen_w(path, mode)$/;"	f
gzopen_w	src/zconf.h	78;"	d
gzopen_w	src/zlib.h	/^ZEXTERN gzFile         ZEXPORT gzopen_w OF((const wchar_t *path,$/;"	p	signature:(const wchar_t *path, const char *mode)
gzopen_w	zconf.h	78;"	d
gzopen_w	zlib.h	/^ZEXTERN gzFile         ZEXPORT gzopen_w OF((const wchar_t *path,$/;"	p	signature:(const wchar_t *path, const char *mode)
gzprintf	src/gzwrite.c	/^int ZEXPORTVA gzprintf (file, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10,$/;"	f
gzprintf	src/gzwrite.c	/^int ZEXPORTVA gzprintf(gzFile file, const char *format, ...)$/;"	f	signature:(gzFile file, const char *format, ...)
gzprintf	src/zconf.h	80;"	d
gzprintf	src/zlib.h	/^ZEXTERN int ZEXPORTVA gzprintf Z_ARG((gzFile file, const char *format, ...));$/;"	p	signature:(gzFile file, const char *format, ...)
gzprintf	zconf.h	80;"	d
gzprintf	zlib.h	/^ZEXTERN int ZEXPORTVA gzprintf Z_ARG((gzFile file, const char *format, ...));$/;"	p	signature:(gzFile file, const char *format, ...)
gzputc	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private static extern int gzputc(IntPtr gzFile, int c);$/;"	m	class:DotZLib.GZipStream	file:	access:private	signature:(IntPtr gzFile, int c)
gzputc	src/gzwrite.c	/^int ZEXPORT gzputc(file, c)$/;"	f
gzputc	src/zconf.h	82;"	d
gzputc	src/zlib.h	/^ZEXTERN int ZEXPORT gzputc OF((gzFile file, int c));$/;"	p	signature:(gzFile file, int c)
gzputc	zconf.h	82;"	d
gzputc	zlib.h	/^ZEXTERN int ZEXPORT gzputc OF((gzFile file, int c));$/;"	p	signature:(gzFile file, int c)
gzputs	src/gzwrite.c	/^int ZEXPORT gzputs(file, str)$/;"	f
gzputs	src/zconf.h	83;"	d
gzputs	src/zlib.h	/^ZEXTERN int ZEXPORT gzputs OF((gzFile file, const char *s));$/;"	p	signature:(gzFile file, const char *s)
gzputs	zconf.h	83;"	d
gzputs	zlib.h	/^ZEXTERN int ZEXPORT gzputs OF((gzFile file, const char *s));$/;"	p	signature:(gzFile file, const char *s)
gzread	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private static extern int gzread(IntPtr gzFile, int data, int length);$/;"	m	class:DotZLib.GZipStream	file:	access:private	signature:(IntPtr gzFile, int data, int length)
gzread	src/gzread.c	/^int ZEXPORT gzread(file, buf, len)$/;"	f
gzread	src/test/minigzip.c	/^int gzread OF((gzFile, void *, unsigned));$/;"	p	file:	signature:(gzFile, void *, unsigned)
gzread	src/test/minigzip.c	/^int gzread(gz, buf, len)$/;"	f
gzread	src/zconf.h	84;"	d
gzread	src/zlib.h	/^ZEXTERN int ZEXPORT gzread OF((gzFile file, voidp buf, unsigned len));$/;"	p	signature:(gzFile file, voidp buf, unsigned len)
gzread	zconf.h	84;"	d
gzread	zlib.h	/^ZEXTERN int ZEXPORT gzread OF((gzFile file, voidp buf, unsigned len));$/;"	p	signature:(gzFile file, voidp buf, unsigned len)
gzrewind	src/gzlib.c	/^int ZEXPORT gzrewind(file)$/;"	f
gzrewind	src/zconf.h	85;"	d
gzrewind	src/zlib.h	/^ZEXTERN int ZEXPORT    gzrewind OF((gzFile file));$/;"	p	signature:(gzFile file)
gzrewind	zconf.h	85;"	d
gzrewind	zlib.h	/^ZEXTERN int ZEXPORT    gzrewind OF((gzFile file));$/;"	p	signature:(gzFile file)
gzscan	src/examples/gzappend.c	/^local int gzscan(char *name, z_stream *strm, int level)$/;"	f	signature:(char *name, z_stream *strm, int level)
gzseek	src/gzlib.c	/^z_off_t ZEXPORT gzseek(file, offset, whence)$/;"	f
gzseek	src/zconf.h	86;"	d
gzseek	src/zlib.h	/^   ZEXTERN z_off_t ZEXPORT gzseek OF((gzFile, z_off_t, int));$/;"	p	signature:(gzFile, z_off_t, int)
gzseek	src/zlib.h	1710;"	d
gzseek	zconf.h	86;"	d
gzseek	zlib.h	/^   ZEXTERN z_off_t ZEXPORT gzseek OF((gzFile, z_off_t, int));$/;"	p	signature:(gzFile, z_off_t, int)
gzseek	zlib.h	1710;"	d
gzseek64	src/gzguts.h	/^    ZEXTERN z_off64_t ZEXPORT gzseek64 OF((gzFile, z_off64_t, int));$/;"	p	signature:(gzFile, z_off64_t, int)
gzseek64	src/gzlib.c	/^z_off64_t ZEXPORT gzseek64(file, offset, whence)$/;"	f
gzseek64	src/zconf.h	87;"	d
gzseek64	src/zlib.h	/^     ZEXTERN z_off_t ZEXPORT gzseek64 OF((gzFile, z_off_t, int));$/;"	p	signature:(gzFile, z_off_t, int)
gzseek64	src/zlib.h	/^   ZEXTERN z_off64_t ZEXPORT gzseek64 OF((gzFile, z_off64_t, int));$/;"	p	signature:(gzFile, z_off64_t, int)
gzseek64	zconf.h	87;"	d
gzseek64	zlib.h	/^     ZEXTERN z_off_t ZEXPORT gzseek64 OF((gzFile, z_off_t, int));$/;"	p	signature:(gzFile, z_off_t, int)
gzseek64	zlib.h	/^   ZEXTERN z_off64_t ZEXPORT gzseek64 OF((gzFile, z_off64_t, int));$/;"	p	signature:(gzFile, z_off64_t, int)
gzsetparams	src/gzwrite.c	/^int ZEXPORT gzsetparams(file, level, strategy)$/;"	f
gzsetparams	src/zconf.h	88;"	d
gzsetparams	src/zlib.h	/^ZEXTERN int ZEXPORT gzsetparams OF((gzFile file, int level, int strategy));$/;"	p	signature:(gzFile file, int level, int strategy)
gzsetparams	zconf.h	88;"	d
gzsetparams	zlib.h	/^ZEXTERN int ZEXPORT gzsetparams OF((gzFile file, int level, int strategy));$/;"	p	signature:(gzFile file, int level, int strategy)
gztack	src/examples/gzappend.c	/^local void gztack(char *name, int gd, z_stream *strm, int last)$/;"	f	signature:(char *name, int gd, z_stream *strm, int last)
gztell	src/gzlib.c	/^z_off_t ZEXPORT gztell(file)$/;"	f
gztell	src/zconf.h	89;"	d
gztell	src/zlib.h	/^   ZEXTERN z_off_t ZEXPORT gztell OF((gzFile));$/;"	p	signature:(gzFile)
gztell	src/zlib.h	1711;"	d
gztell	zconf.h	89;"	d
gztell	zlib.h	/^   ZEXTERN z_off_t ZEXPORT gztell OF((gzFile));$/;"	p	signature:(gzFile)
gztell	zlib.h	1711;"	d
gztell64	src/gzguts.h	/^    ZEXTERN z_off64_t ZEXPORT gztell64 OF((gzFile));$/;"	p	signature:(gzFile)
gztell64	src/gzlib.c	/^z_off64_t ZEXPORT gztell64(file)$/;"	f
gztell64	src/zconf.h	90;"	d
gztell64	src/zlib.h	/^     ZEXTERN z_off_t ZEXPORT gztell64 OF((gzFile));$/;"	p	signature:(gzFile)
gztell64	src/zlib.h	/^   ZEXTERN z_off64_t ZEXPORT gztell64 OF((gzFile));$/;"	p	signature:(gzFile)
gztell64	zconf.h	90;"	d
gztell64	zlib.h	/^     ZEXTERN z_off_t ZEXPORT gztell64 OF((gzFile));$/;"	p	signature:(gzFile)
gztell64	zlib.h	/^   ZEXTERN z_off64_t ZEXPORT gztell64 OF((gzFile));$/;"	p	signature:(gzFile)
gzungetc	src/gzread.c	/^int ZEXPORT gzungetc(c, file)$/;"	f
gzungetc	src/zconf.h	91;"	d
gzungetc	src/zlib.h	/^ZEXTERN int ZEXPORT gzungetc OF((int c, gzFile file));$/;"	p	signature:(int c, gzFile file)
gzungetc	zconf.h	91;"	d
gzungetc	zlib.h	/^ZEXTERN int ZEXPORT gzungetc OF((int c, gzFile file));$/;"	p	signature:(int c, gzFile file)
gzvprintf	src/gzwrite.c	/^int ZEXPORTVA gzvprintf(gzFile file, const char *format, va_list va)$/;"	f	signature:(gzFile file, const char *format, va_list va)
gzvprintf	src/zconf.h	81;"	d
gzvprintf	src/zlib.h	/^ZEXTERN int            ZEXPORTVA gzvprintf Z_ARG((gzFile file,$/;"	p	signature:(gzFile file, const char *format, va_list va)
gzvprintf	zconf.h	81;"	d
gzvprintf	zlib.h	/^ZEXTERN int            ZEXPORTVA gzvprintf Z_ARG((gzFile file,$/;"	p	signature:(gzFile file, const char *format, va_list va)
gzwrite	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        private static extern int gzwrite(IntPtr gzFile, int data, int length);$/;"	m	class:DotZLib.GZipStream	file:	access:private	signature:(IntPtr gzFile, int data, int length)
gzwrite	src/gzwrite.c	/^int ZEXPORT gzwrite(file, buf, len)$/;"	f
gzwrite	src/test/minigzip.c	/^int gzwrite OF((gzFile, const void *, unsigned));$/;"	p	file:	signature:(gzFile, const void *, unsigned)
gzwrite	src/test/minigzip.c	/^int gzwrite(gz, buf, len)$/;"	f
gzwrite	src/zconf.h	92;"	d
gzwrite	src/zlib.h	/^ZEXTERN int ZEXPORT gzwrite OF((gzFile file,$/;"	p	signature:(gzFile file, voidpc buf, unsigned len)
gzwrite	zconf.h	92;"	d
gzwrite	zlib.h	/^ZEXTERN int ZEXPORT gzwrite OF((gzFile file,$/;"	p	signature:(gzFile file, voidpc buf, unsigned len)
h2b	src/test/infcover.c	/^local unsigned char *h2b(const char *hex, unsigned *len)$/;"	f	signature:(const char *hex, unsigned *len)
hash_bits	src/deflate.h	/^    uInt  hash_bits;      \/* log2(hash_size) *\/$/;"	m	struct:internal_state	access:public
hash_mask	src/deflate.h	/^    uInt  hash_mask;      \/* hash_size-1 *\/$/;"	m	struct:internal_state	access:public
hash_shift	src/deflate.h	/^    uInt  hash_shift;$/;"	m	struct:internal_state	access:public
hash_size	src/deflate.h	/^    uInt  hash_size;      \/* number of elements in hash table *\/$/;"	m	struct:internal_state	access:public
have	src/contrib/infback9/inflate9.h	/^    unsigned have;              \/* number of code lengths in lens[] *\/$/;"	m	struct:inflate_state	access:public
have	src/examples/zran.c	/^    int have;           \/* number of list entries filled in *\/$/;"	m	struct:access	file:	access:public
have	src/inflate.h	/^    unsigned have;              \/* number of code lengths in lens[] *\/$/;"	m	struct:inflate_state	access:public
have	src/zlib.h	/^    unsigned have;$/;"	m	struct:gzFile_s	access:public
have	zlib.h	/^    unsigned have;$/;"	m	struct:gzFile_s	access:public
havedict	src/inflate.h	/^    int havedict;               \/* true if dictionary provided *\/$/;"	m	struct:inflate_state	access:public
hcrc	src/zlib.h	/^    int     hcrc;       \/* true if there was or will be a header crc *\/$/;"	m	struct:gz_header_s	access:public
hcrc	zlib.h	/^    int     hcrc;       \/* true if there was or will be a header crc *\/$/;"	m	struct:gz_header_s	access:public
head	src/deflate.h	/^    Posf *head; \/* Heads of the hash chains or NIL. *\/$/;"	m	struct:internal_state	access:public
head	src/inflate.h	/^    gz_headerp head;            \/* where to save gzip header information *\/$/;"	m	struct:inflate_state	access:public
header	src/contrib/untgz/untgz.c	/^  struct tar_header  header;$/;"	m	union:tar_buffer	typeref:struct:tar_buffer::tar_header	file:	access:public
heap	src/deflate.h	/^    int heap[2*L_CODES+1];      \/* heap used to build the Huffman trees *\/$/;"	m	struct:internal_state	access:public
heap_len	src/deflate.h	/^    int heap_len;               \/* number of elements in the heap *\/$/;"	m	struct:internal_state	access:public
heap_max	src/deflate.h	/^    int heap_max;               \/* element of largest frequency *\/$/;"	m	struct:internal_state	access:public
hello	src/test/example.c	/^z_const char hello[] = "hello, hello!";$/;"	v
help	src/contrib/untgz/untgz.c	/^void help               OF((int));$/;"	p	file:	signature:(int)
help	src/contrib/untgz/untgz.c	/^void help(int exitval)$/;"	f	signature:(int exitval)
hf	src/contrib/minizip/iowin32.c	/^    HANDLE hf;$/;"	m	struct:__anon11	file:	access:public
high_water	src/deflate.h	/^    ulg high_water;$/;"	m	struct:internal_state	access:public
highwater	src/test/infcover.c	/^    size_t total, highwater;    \/* total allocations, and largest total *\/$/;"	m	struct:mem_zone	file:	access:public
hold	src/contrib/masmx64/inffas8664.c	/^\/* 80   40 *\/ size_t \/*unsigned long *\/hold;       \/* edx rdx  local strm->hold *\/$/;"	m	struct:inffast_ar	file:	access:public
hold	src/inflate.h	/^    unsigned long hold;         \/* input bit accumulator *\/$/;"	m	struct:inflate_state	access:public
hold_mm	src/contrib/inflate86/inffast.S	/^#define hold_mm    %mm0$/;"	d
hold_r	src/contrib/inflate86/inffast.S	/^#define hold_r     %ebp$/;"	d
hold_state	src/contrib/inflate86/inffast.S	/^#define hold_state     48  \/* state->hold *\/$/;"	d
hold_state	src/contrib/masmx86/inffas32.asm	/^hold_state	 equ	(44+4+zlib1222sup)	;\/* state->hold	*\/$/;"	d
how	src/gzguts.h	/^    int how;                \/* 0: get header, 1: copy, 2: decompress *\/$/;"	m	struct:__anon1	access:public
huffman	src/contrib/blast/blast.c	/^struct huffman {$/;"	s	file:
huffman	src/contrib/puff/puff.c	/^struct huffman {$/;"	s	file:
huffman::count	src/contrib/blast/blast.c	/^    short *count;       \/* number of symbols of each length *\/$/;"	m	struct:huffman	file:	access:public
huffman::count	src/contrib/puff/puff.c	/^    short *count;       \/* number of symbols of each length *\/$/;"	m	struct:huffman	file:	access:public
huffman::symbol	src/contrib/blast/blast.c	/^    short *symbol;      \/* canonically ordered symbols *\/$/;"	m	struct:huffman	file:	access:public
huffman::symbol	src/contrib/puff/puff.c	/^    short *symbol;      \/* canonically ordered symbols *\/$/;"	m	struct:huffman	file:	access:public
id	src/examples/gzlog.c	/^    char id[4];     \/* contains LOGID to detect inadvertent overwrites *\/$/;"	m	struct:log	file:	access:public
in	src/contrib/blast/blast.c	/^    unsigned char *in;          \/* next input location *\/$/;"	m	struct:state	file:	access:public
in	src/contrib/inflate86/inffast.S	/^#define in             44  \/* unsigned char* *\/$/;"	d
in	src/contrib/masmx64/inffas8664.c	/^\/* 16    8 *\/ unsigned char FAR *in;    \/* esi rsi  local strm->next_in *\/$/;"	m	struct:inffast_ar	file:	access:public
in	src/contrib/puff/puff.c	/^    const unsigned char *in;    \/* input buffer *\/$/;"	m	struct:state	file:	access:public
in	src/examples/gun.c	/^local unsigned in(void *in_desc, z_const unsigned char **buf)$/;"	f	signature:(void *in_desc, z_const unsigned char **buf)
in	src/examples/zran.c	/^    off_t in;           \/* offset in input file of first full byte *\/$/;"	m	struct:point	file:	access:public
in	src/gzguts.h	/^    unsigned char *in;      \/* input buffer *\/$/;"	m	struct:__anon1	access:public
in_func	src/zconf.h	138;"	d
in_func	src/zlib.h	/^typedef unsigned (*in_func) OF((void FAR *,$/;"	t
in_func	zconf.h	138;"	d
in_func	zlib.h	/^typedef unsigned (*in_func) OF((void FAR *,$/;"	t
in_opened_file_inzip	src/contrib/minizip/zip.c	/^    int  in_opened_file_inzip;  \/* 1 if a file in the zip is currently writ.*\/$/;"	m	struct:__anon10	file:	access:public
in_r	src/contrib/inflate86/inffast.S	/^#define in_r       %esi$/;"	d
in_r	src/contrib/inflate86/inffast.S	/^#define in_r %esi$/;"	d
inbuf	src/examples/gun.c	/^    unsigned char *inbuf;$/;"	m	struct:ind	file:	access:public
inbuf	src/examples/gun.c	/^unsigned char inbuf[SIZE];              \/* input buffer *\/$/;"	v
incnt	src/contrib/puff/puff.c	/^    unsigned long incnt;        \/* bytes read so far *\/$/;"	m	struct:state	file:	access:public
ind	src/examples/gun.c	/^struct ind {$/;"	s	file:
ind::inbuf	src/examples/gun.c	/^    unsigned char *inbuf;$/;"	m	struct:ind	file:	access:public
ind::infile	src/examples/gun.c	/^    int infile;$/;"	m	struct:ind	file:	access:public
inf	src/contrib/blast/blast.c	/^local unsigned inf(void *how, unsigned char **buf)$/;"	f	signature:(void *how, unsigned char **buf)
inf	src/examples/zpipe.c	/^int inf(FILE *source, FILE *dest)$/;"	f	signature:(FILE *source, FILE *dest)
inf	src/test/infcover.c	/^local void inf(char *hex, char *what, unsigned step, int win, unsigned len,$/;"	f	signature:(char *hex, char *what, unsigned step, int win, unsigned len, int err)
inffas8664fnc	src/contrib/masmx64/inffasx64.asm	/^inffas8664fnc PROC$/;"	l
inffast_ar	src/contrib/masmx64/inffas8664.c	/^    typedef struct inffast_ar {$/;"	s	file:
inffast_ar::beg	src/contrib/masmx64/inffas8664.c	/^\/* 40   20 *\/ unsigned char FAR *beg;   \/*          inflate()'s init next_out *\/$/;"	m	struct:inffast_ar	file:	access:public
inffast_ar::bits	src/contrib/masmx64/inffas8664.c	/^\/* 88   44 *\/ unsigned bits;            \/* ebx rbx  local strm->bits *\/$/;"	m	struct:inffast_ar	file:	access:public
inffast_ar::dcode	src/contrib/masmx64/inffas8664.c	/^\/* 72   36 *\/ code const FAR *dcode;    \/*     r11  local strm->distcode *\/$/;"	m	struct:inffast_ar	file:	access:public
inffast_ar::dist	src/contrib/masmx64/inffas8664.c	/^\/*112   68 *\/ unsigned dist;            \/*     r15  match distance *\/$/;"	m	struct:inffast_ar	file:	access:public
inffast_ar::dmask	src/contrib/masmx64/inffas8664.c	/^\/*104   60 *\/ unsigned dmask;           \/*     r13  mask for dcode *\/$/;"	m	struct:inffast_ar	file:	access:public
inffast_ar::ebp	src/contrib/masmx64/inffas8664.c	/^\/*  8    4 *\/ void *ebp;                \/* ebp save *\/$/;"	m	struct:inffast_ar	file:	access:public
inffast_ar::end	src/contrib/masmx64/inffas8664.c	/^\/* 48   24 *\/ unsigned char FAR *end;   \/*     r10  while out < end *\/$/;"	m	struct:inffast_ar	file:	access:public
inffast_ar::esp	src/contrib/masmx64/inffas8664.c	/^\/*  0    0 *\/ void *esp;                \/* esp save *\/$/;"	m	struct:inffast_ar	file:	access:public
inffast_ar::hold	src/contrib/masmx64/inffas8664.c	/^\/* 80   40 *\/ size_t \/*unsigned long *\/hold;       \/* edx rdx  local strm->hold *\/$/;"	m	struct:inffast_ar	file:	access:public
inffast_ar::in	src/contrib/masmx64/inffas8664.c	/^\/* 16    8 *\/ unsigned char FAR *in;    \/* esi rsi  local strm->next_in *\/$/;"	m	struct:inffast_ar	file:	access:public
inffast_ar::last	src/contrib/masmx64/inffas8664.c	/^\/* 24   12 *\/ unsigned char FAR *last;  \/*     r9   while in < last *\/$/;"	m	struct:inffast_ar	file:	access:public
inffast_ar::lcode	src/contrib/masmx64/inffas8664.c	/^\/* 64   32 *\/ code const FAR *lcode;    \/* ebp rbp  local strm->lencode *\/$/;"	m	struct:inffast_ar	file:	access:public
inffast_ar::len	src/contrib/masmx64/inffas8664.c	/^\/*108   64 *\/ unsigned len;             \/*     r14  match length *\/$/;"	m	struct:inffast_ar	file:	access:public
inffast_ar::lmask	src/contrib/masmx64/inffas8664.c	/^\/*100   56 *\/ unsigned lmask;           \/*     r12  mask for lcode *\/$/;"	m	struct:inffast_ar	file:	access:public
inffast_ar::out	src/contrib/masmx64/inffas8664.c	/^\/* 32   16 *\/ unsigned char FAR *out;   \/* edi rdi  local strm->next_out *\/$/;"	m	struct:inffast_ar	file:	access:public
inffast_ar::status	src/contrib/masmx64/inffas8664.c	/^\/*116   72 *\/ unsigned status;          \/*          set when state chng*\/$/;"	m	struct:inffast_ar	file:	access:public
inffast_ar::window	src/contrib/masmx64/inffas8664.c	/^\/* 56   28 *\/ unsigned char FAR *window;\/*          size of window, wsize!=0 *\/$/;"	m	struct:inffast_ar	file:	access:public
inffast_ar::write	src/contrib/masmx64/inffas8664.c	/^\/* 96   52 *\/ unsigned write;           \/*          window write index *\/$/;"	m	struct:inffast_ar	file:	access:public
inffast_ar::wsize	src/contrib/masmx64/inffas8664.c	/^\/* 92   48 *\/ unsigned wsize;           \/*          window size *\/$/;"	m	struct:inffast_ar	file:	access:public
infile	src/examples/gun.c	/^    int infile;$/;"	m	struct:ind	file:	access:public
inflate	src/contrib/delphi/ZLib.pas	/^function inflate(var strm: TZStreamRec; flush: Integer): Integer; external;$/;"	f
inflate	src/contrib/dotzlib/DotZLib/Inflater.cs	/^        private static extern int inflate(ref ZStream sz, int flush);$/;"	m	class:DotZLib.Inflater	file:	access:private	signature:(ref ZStream sz, int flush)
inflate	src/contrib/pascal/zlibpas.pas	/^function inflate(var strm: z_stream; flush: Integer): Integer;$/;"	f
inflate	src/contrib/pascal/zlibpas.pas	/^function inflate; external;$/;"	f
inflate	src/inflate.c	/^int ZEXPORT inflate(strm, flush)$/;"	f
inflate	src/zconf.h	94;"	d
inflate	src/zlib.h	/^ZEXTERN int ZEXPORT inflate OF((z_streamp strm, int flush));$/;"	p	signature:(z_streamp strm, int flush)
inflate	zconf.h	94;"	d
inflate	zlib.h	/^ZEXTERN int ZEXPORT inflate OF((z_streamp strm, int flush));$/;"	p	signature:(z_streamp strm, int flush)
inflate9_copyright	src/contrib/infback9/inftree9.c	/^const char inflate9_copyright[] =$/;"	v
inflateBack	src/contrib/pascal/zlibpas.pas	/^function inflateBack(var strm: z_stream; in_fn: in_func; in_desc: Pointer;$/;"	f
inflateBack	src/contrib/pascal/zlibpas.pas	/^function inflateBack; external;$/;"	f
inflateBack	src/infback.c	/^int ZEXPORT inflateBack(strm, in, in_desc, out, out_desc)$/;"	f
inflateBack	src/zconf.h	95;"	d
inflateBack	src/zlib.h	/^ZEXTERN int ZEXPORT inflateBack OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, in_func in, void FAR *in_desc, out_func out, void FAR *out_desc)
inflateBack	zconf.h	95;"	d
inflateBack	zlib.h	/^ZEXTERN int ZEXPORT inflateBack OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, in_func in, void FAR *in_desc, out_func out, void FAR *out_desc)
inflateBack9	src/contrib/infback9/infback9.c	/^int ZEXPORT inflateBack9(strm, in, in_desc, out, out_desc)$/;"	f
inflateBack9	src/contrib/infback9/infback9.h	/^ZEXTERN int ZEXPORT inflateBack9 OF((z_stream FAR *strm,$/;"	p	signature:(z_stream FAR *strm, in_func in, void FAR *in_desc, out_func out, void FAR *out_desc)
inflateBack9End	src/contrib/infback9/infback9.c	/^int ZEXPORT inflateBack9End(strm)$/;"	f
inflateBack9End	src/contrib/infback9/infback9.h	/^ZEXTERN int ZEXPORT inflateBack9End OF((z_stream FAR *strm));$/;"	p	signature:(z_stream FAR *strm)
inflateBack9Init	src/contrib/infback9/infback9.h	31;"	d
inflateBack9Init_	src/contrib/infback9/infback9.c	/^int ZEXPORT inflateBack9Init_(strm, window, version, stream_size)$/;"	f
inflateBack9Init_	src/contrib/infback9/infback9.h	/^ZEXTERN int ZEXPORT inflateBack9Init_ OF((z_stream FAR *strm,$/;"	p	signature:(z_stream FAR *strm, unsigned char FAR *window, const char *version, int stream_size)
inflateBackEnd	src/contrib/pascal/zlibpas.pas	/^function inflateBackEnd(var strm: z_stream): Integer;$/;"	f
inflateBackEnd	src/contrib/pascal/zlibpas.pas	/^function inflateBackEnd; external;$/;"	f
inflateBackEnd	src/infback.c	/^int ZEXPORT inflateBackEnd(strm)$/;"	f
inflateBackEnd	src/zconf.h	96;"	d
inflateBackEnd	src/zlib.h	/^ZEXTERN int ZEXPORT inflateBackEnd OF((z_streamp strm));$/;"	p	signature:(z_streamp strm)
inflateBackEnd	zconf.h	96;"	d
inflateBackEnd	zlib.h	/^ZEXTERN int ZEXPORT inflateBackEnd OF((z_streamp strm));$/;"	p	signature:(z_streamp strm)
inflateBackInit	src/contrib/pascal/zlibpas.pas	/^function inflateBackInit(var strm: z_stream;$/;"	f
inflateBackInit	src/zlib.h	1657;"	d
inflateBackInit	zlib.h	1657;"	d
inflateBackInit_	src/contrib/pascal/zlibpas.pas	/^function inflateBackInit_(var strm: z_stream;$/;"	f
inflateBackInit_	src/contrib/pascal/zlibpas.pas	/^function inflateBackInit_; external;$/;"	f
inflateBackInit_	src/infback.c	/^int ZEXPORT inflateBackInit_(strm, windowBits, window, version, stream_size)$/;"	f
inflateBackInit_	src/zconf.h	97;"	d
inflateBackInit_	src/zlib.h	/^ZEXTERN int ZEXPORT inflateBackInit_ OF((z_streamp strm, int windowBits,$/;"	p	signature:(z_streamp strm, int windowBits, unsigned char FAR *window, const char *version, int stream_size)
inflateBackInit_	zconf.h	97;"	d
inflateBackInit_	zlib.h	/^ZEXTERN int ZEXPORT inflateBackInit_ OF((z_streamp strm, int windowBits,$/;"	p	signature:(z_streamp strm, int windowBits, unsigned char FAR *window, const char *version, int stream_size)
inflateCopy	src/contrib/pascal/zlibpas.pas	/^function inflateCopy(var dest, source: z_stream): Integer;$/;"	f
inflateCopy	src/contrib/pascal/zlibpas.pas	/^function inflateCopy; external;$/;"	f
inflateCopy	src/inflate.c	/^int ZEXPORT inflateCopy(dest, source)$/;"	f
inflateCopy	src/zconf.h	98;"	d
inflateCopy	src/zlib.h	/^ZEXTERN int ZEXPORT inflateCopy OF((z_streamp dest,$/;"	p	signature:(z_streamp dest, z_streamp source)
inflateCopy	zconf.h	98;"	d
inflateCopy	zlib.h	/^ZEXTERN int ZEXPORT inflateCopy OF((z_streamp dest,$/;"	p	signature:(z_streamp dest, z_streamp source)
inflateEnd	src/contrib/delphi/ZLib.pas	/^function inflateEnd(var strm: TZStreamRec): Integer; external;$/;"	f
inflateEnd	src/contrib/dotzlib/DotZLib/Inflater.cs	/^        private static extern int inflateEnd(ref ZStream sz);$/;"	m	class:DotZLib.Inflater	file:	access:private	signature:(ref ZStream sz)
inflateEnd	src/contrib/pascal/zlibpas.pas	/^function inflateEnd(var strm: z_stream): Integer;$/;"	f
inflateEnd	src/contrib/pascal/zlibpas.pas	/^function inflateEnd; external;$/;"	f
inflateEnd	src/inflate.c	/^int ZEXPORT inflateEnd(strm)$/;"	f
inflateEnd	src/zconf.h	99;"	d
inflateEnd	src/zlib.h	/^ZEXTERN int ZEXPORT inflateEnd OF((z_streamp strm));$/;"	p	signature:(z_streamp strm)
inflateEnd	zconf.h	99;"	d
inflateEnd	zlib.h	/^ZEXTERN int ZEXPORT inflateEnd OF((z_streamp strm));$/;"	p	signature:(z_streamp strm)
inflateGetDictionary	src/inflate.c	/^int ZEXPORT inflateGetDictionary(strm, dictionary, dictLength)$/;"	f
inflateGetDictionary	src/zconf.h	108;"	d
inflateGetDictionary	src/zlib.h	/^ZEXTERN int ZEXPORT inflateGetDictionary OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, Bytef *dictionary, uInt *dictLength)
inflateGetDictionary	zconf.h	108;"	d
inflateGetDictionary	zlib.h	/^ZEXTERN int ZEXPORT inflateGetDictionary OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, Bytef *dictionary, uInt *dictLength)
inflateGetHeader	src/contrib/pascal/zlibpas.pas	/^function inflateGetHeader(var strm: z_stream; var head: gz_header): Integer;$/;"	f
inflateGetHeader	src/contrib/pascal/zlibpas.pas	/^function inflateGetHeader; external;$/;"	f
inflateGetHeader	src/inflate.c	/^int ZEXPORT inflateGetHeader(strm, head)$/;"	f
inflateGetHeader	src/zconf.h	100;"	d
inflateGetHeader	src/zlib.h	/^ZEXTERN int ZEXPORT inflateGetHeader OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, gz_headerp head)
inflateGetHeader	zconf.h	100;"	d
inflateGetHeader	zlib.h	/^ZEXTERN int ZEXPORT inflateGetHeader OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, gz_headerp head)
inflateInit	src/contrib/pascal/zlibpas.pas	/^function inflateInit(var strm: z_stream): Integer;$/;"	f
inflateInit	src/zlib.h	1649;"	d
inflateInit	zlib.h	1649;"	d
inflateInit2	src/contrib/pascal/zlibpas.pas	/^function inflateInit2(var strm: z_stream; windowBits: Integer): Integer;$/;"	f
inflateInit2	src/zlib.h	1654;"	d
inflateInit2	zlib.h	1654;"	d
inflateInit2_	src/contrib/pascal/zlibpas.pas	/^function inflateInit2_(var strm: z_stream; windowBits: Integer;$/;"	f
inflateInit2_	src/contrib/pascal/zlibpas.pas	/^function inflateInit2_; external;$/;"	f
inflateInit2_	src/inflate.c	/^int ZEXPORT inflateInit2_(strm, windowBits, version, stream_size)$/;"	f
inflateInit2_	src/zconf.h	101;"	d
inflateInit2_	src/zlib.h	/^ZEXTERN int ZEXPORT inflateInit2_ OF((z_streamp strm, int  windowBits,$/;"	p	signature:(z_streamp strm, int windowBits, const char *version, int stream_size)
inflateInit2_	zconf.h	101;"	d
inflateInit2_	zlib.h	/^ZEXTERN int ZEXPORT inflateInit2_ OF((z_streamp strm, int  windowBits,$/;"	p	signature:(z_streamp strm, int windowBits, const char *version, int stream_size)
inflateInit_	src/contrib/delphi/ZLib.pas	/^function inflateInit_(var strm: TZStreamRec; version: PChar;$/;"	f
inflateInit_	src/contrib/dotzlib/DotZLib/Inflater.cs	/^        private static extern int inflateInit_(ref ZStream sz, string vs, int size);$/;"	m	class:DotZLib.Inflater	file:	access:private	signature:(ref ZStream sz, string vs, int size)
inflateInit_	src/contrib/pascal/zlibpas.pas	/^function inflateInit_(var strm: z_stream; const version: PChar;$/;"	f
inflateInit_	src/contrib/pascal/zlibpas.pas	/^function inflateInit_; external;$/;"	f
inflateInit_	src/inflate.c	/^int ZEXPORT inflateInit_(strm, version, stream_size)$/;"	f
inflateInit_	src/zconf.h	102;"	d
inflateInit_	src/zlib.h	/^ZEXTERN int ZEXPORT inflateInit_ OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, const char *version, int stream_size)
inflateInit_	zconf.h	102;"	d
inflateInit_	zlib.h	/^ZEXTERN int ZEXPORT inflateInit_ OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, const char *version, int stream_size)
inflateMark	src/contrib/pascal/zlibpas.pas	/^function inflateMark(var strm: z_stream): LongInt;$/;"	f
inflateMark	src/contrib/pascal/zlibpas.pas	/^function inflateMark; external;$/;"	f
inflateMark	src/inflate.c	/^long ZEXPORT inflateMark(strm)$/;"	f
inflateMark	src/zconf.h	103;"	d
inflateMark	src/zlib.h	/^ZEXTERN long ZEXPORT inflateMark OF((z_streamp strm));$/;"	p	signature:(z_streamp strm)
inflateMark	zconf.h	103;"	d
inflateMark	zlib.h	/^ZEXTERN long ZEXPORT inflateMark OF((z_streamp strm));$/;"	p	signature:(z_streamp strm)
inflatePrime	src/contrib/pascal/zlibpas.pas	/^function inflatePrime(var strm: z_stream; bits, value: Integer): Integer;$/;"	f
inflatePrime	src/contrib/pascal/zlibpas.pas	/^function inflatePrime; external;$/;"	f
inflatePrime	src/inflate.c	/^int ZEXPORT inflatePrime(strm, bits, value)$/;"	f
inflatePrime	src/zconf.h	104;"	d
inflatePrime	src/zlib.h	/^ZEXTERN int ZEXPORT inflatePrime OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, int bits, int value)
inflatePrime	zconf.h	104;"	d
inflatePrime	zlib.h	/^ZEXTERN int ZEXPORT inflatePrime OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, int bits, int value)
inflateReset	src/contrib/delphi/ZLib.pas	/^function inflateReset(var strm: TZStreamRec): Integer; external;$/;"	f
inflateReset	src/contrib/dotzlib/DotZLib/Inflater.cs	/^        private static extern int inflateReset(ref ZStream sz);$/;"	m	class:DotZLib.Inflater	file:	access:private	signature:(ref ZStream sz)
inflateReset	src/contrib/pascal/zlibpas.pas	/^function inflateReset(var strm: z_stream): Integer;$/;"	f
inflateReset	src/contrib/pascal/zlibpas.pas	/^function inflateReset; external;$/;"	f
inflateReset	src/inflate.c	/^int ZEXPORT inflateReset(strm)$/;"	f
inflateReset	src/zconf.h	105;"	d
inflateReset	src/zlib.h	/^ZEXTERN int ZEXPORT inflateReset OF((z_streamp strm));$/;"	p	signature:(z_streamp strm)
inflateReset	zconf.h	105;"	d
inflateReset	zlib.h	/^ZEXTERN int ZEXPORT inflateReset OF((z_streamp strm));$/;"	p	signature:(z_streamp strm)
inflateReset2	src/contrib/pascal/zlibpas.pas	/^function inflateReset2(var strm: z_stream; windowBits: Integer): Integer;$/;"	f
inflateReset2	src/contrib/pascal/zlibpas.pas	/^function inflateReset2; external;$/;"	f
inflateReset2	src/inflate.c	/^int ZEXPORT inflateReset2(strm, windowBits)$/;"	f
inflateReset2	src/zconf.h	106;"	d
inflateReset2	src/zlib.h	/^ZEXTERN int ZEXPORT inflateReset2 OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, int windowBits)
inflateReset2	zconf.h	106;"	d
inflateReset2	zlib.h	/^ZEXTERN int ZEXPORT inflateReset2 OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, int windowBits)
inflateResetKeep	src/inflate.c	/^int ZEXPORT inflateResetKeep(strm)$/;"	f
inflateResetKeep	src/zconf.h	112;"	d
inflateResetKeep	src/zlib.h	/^ZEXTERN int            ZEXPORT inflateResetKeep OF((z_streamp));$/;"	p	signature:(z_streamp)
inflateResetKeep	zconf.h	112;"	d
inflateResetKeep	zlib.h	/^ZEXTERN int            ZEXPORT inflateResetKeep OF((z_streamp));$/;"	p	signature:(z_streamp)
inflateSetDictionary	src/contrib/pascal/zlibpas.pas	/^function inflateSetDictionary(var strm: z_stream; const dictionary: PChar;$/;"	f
inflateSetDictionary	src/contrib/pascal/zlibpas.pas	/^function inflateSetDictionary; external;$/;"	f
inflateSetDictionary	src/inflate.c	/^int ZEXPORT inflateSetDictionary(strm, dictionary, dictLength)$/;"	f
inflateSetDictionary	src/zconf.h	107;"	d
inflateSetDictionary	src/zlib.h	/^ZEXTERN int ZEXPORT inflateSetDictionary OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, const Bytef *dictionary, uInt dictLength)
inflateSetDictionary	zconf.h	107;"	d
inflateSetDictionary	zlib.h	/^ZEXTERN int ZEXPORT inflateSetDictionary OF((z_streamp strm,$/;"	p	signature:(z_streamp strm, const Bytef *dictionary, uInt dictLength)
inflateSync	src/contrib/pascal/zlibpas.pas	/^function inflateSync(var strm: z_stream): Integer;$/;"	f
inflateSync	src/contrib/pascal/zlibpas.pas	/^function inflateSync; external;$/;"	f
inflateSync	src/inflate.c	/^int ZEXPORT inflateSync(strm)$/;"	f
inflateSync	src/zconf.h	109;"	d
inflateSync	src/zlib.h	/^ZEXTERN int ZEXPORT inflateSync OF((z_streamp strm));$/;"	p	signature:(z_streamp strm)
inflateSync	zconf.h	109;"	d
inflateSync	zlib.h	/^ZEXTERN int ZEXPORT inflateSync OF((z_streamp strm));$/;"	p	signature:(z_streamp strm)
inflateSyncPoint	src/inflate.c	/^int ZEXPORT inflateSyncPoint(strm)$/;"	f
inflateSyncPoint	src/zconf.h	110;"	d
inflateSyncPoint	src/zlib.h	/^ZEXTERN int            ZEXPORT inflateSyncPoint OF((z_streamp));$/;"	p	signature:(z_streamp)
inflateSyncPoint	zconf.h	110;"	d
inflateSyncPoint	zlib.h	/^ZEXTERN int            ZEXPORT inflateSyncPoint OF((z_streamp));$/;"	p	signature:(z_streamp)
inflateUndermine	src/inflate.c	/^int ZEXPORT inflateUndermine(strm, subvert)$/;"	f
inflateUndermine	src/zconf.h	111;"	d
inflateUndermine	src/zlib.h	/^ZEXTERN int            ZEXPORT inflateUndermine OF((z_streamp, int));$/;"	p	signature:(z_streamp, int)
inflateUndermine	zconf.h	111;"	d
inflateUndermine	zlib.h	/^ZEXTERN int            ZEXPORT inflateUndermine OF((z_streamp, int));$/;"	p	signature:(z_streamp, int)
inflate_copyright	src/inftrees.c	/^const char inflate_copyright[] =$/;"	v
inflate_copyright	src/zconf.h	113;"	d
inflate_copyright	zconf.h	113;"	d
inflate_fast	src/contrib/inflate86/inffas86.c	/^void inflate_fast(strm, start)$/;"	f
inflate_fast	src/contrib/inflate86/inffast.S	/^#define inflate_fast _inflate_fast$/;"	d
inflate_fast	src/contrib/inflate86/inffast.S	/^inflate_fast:$/;"	l
inflate_fast	src/contrib/masmx64/inffas8664.c	/^void inflate_fast(strm, start)$/;"	f
inflate_fast	src/inffast.c	/^void ZLIB_INTERNAL inflate_fast(strm, start)$/;"	f
inflate_fast	src/inffast.h	/^void ZLIB_INTERNAL inflate_fast OF((z_streamp strm, unsigned start));$/;"	p	signature:(z_streamp strm, unsigned start)
inflate_fast	src/zconf.h	114;"	d
inflate_fast	zconf.h	114;"	d
inflate_fast_copy_default	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_default:$/;"	l
inflate_fast_copy_default_loop	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_default_loop:$/;"	l
inflate_fast_copy_exit	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_exit:$/;"	l
inflate_fast_copy_gap16b_proc	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap16b_proc:$/;"	l
inflate_fast_copy_gap16b_proc_16bytes_loop	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap16b_proc_16bytes_loop:$/;"	l
inflate_fast_copy_gap16b_proc_16bytes_loop_done	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap16b_proc_16bytes_loop_done:$/;"	l
inflate_fast_copy_gap16b_proc_lastfewbytes_loop	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap16b_proc_lastfewbytes_loop:$/;"	l
inflate_fast_copy_gap1b_proc	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap1b_proc:$/;"	l
inflate_fast_copy_gap1b_proc_16bytes_loop	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap1b_proc_16bytes_loop:$/;"	l
inflate_fast_copy_gap1b_proc_16bytes_loop_done	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap1b_proc_16bytes_loop_done:$/;"	l
inflate_fast_copy_gap1b_proc_lastfewbytes_loop	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap1b_proc_lastfewbytes_loop:$/;"	l
inflate_fast_copy_gap2b_proc	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap2b_proc:$/;"	l
inflate_fast_copy_gap2b_proc_16bytes_loop	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap2b_proc_16bytes_loop:$/;"	l
inflate_fast_copy_gap2b_proc_16bytes_loop_done	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap2b_proc_16bytes_loop_done:$/;"	l
inflate_fast_copy_gap2b_proc_lastfewbytes_loop	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap2b_proc_lastfewbytes_loop:$/;"	l
inflate_fast_copy_gap3b_proc	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap3b_proc:$/;"	l
inflate_fast_copy_gap3b_proc_3bytes_loop	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap3b_proc_3bytes_loop:$/;"	l
inflate_fast_copy_gap3b_proc_3bytes_loop_done	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap3b_proc_3bytes_loop_done:$/;"	l
inflate_fast_copy_gap3b_proc_lastfewbytes_loop	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap3b_proc_lastfewbytes_loop:$/;"	l
inflate_fast_copy_gap4b_proc	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap4b_proc:$/;"	l
inflate_fast_copy_gap4b_proc_16bytes_loop	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap4b_proc_16bytes_loop:$/;"	l
inflate_fast_copy_gap4b_proc_16bytes_loop_done	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap4b_proc_16bytes_loop_done:$/;"	l
inflate_fast_copy_gap4b_proc_lastfewbytes_loop	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap4b_proc_lastfewbytes_loop:$/;"	l
inflate_fast_copy_gap5to7b_proc	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap5to7b_proc:$/;"	l
inflate_fast_copy_gap5to7b_proc_5to7bytes_loop	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap5to7b_proc_5to7bytes_loop:$/;"	l
inflate_fast_copy_gap5to7b_proc_5to7bytes_loop_done	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap5to7b_proc_5to7bytes_loop_done:$/;"	l
inflate_fast_copy_gap5to7b_proc_lastfewbytes_loop	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap5to7b_proc_lastfewbytes_loop:$/;"	l
inflate_fast_copy_gap8b_proc	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap8b_proc:$/;"	l
inflate_fast_copy_gap8b_proc_16bytes_loop	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap8b_proc_16bytes_loop:$/;"	l
inflate_fast_copy_gap8b_proc_16bytes_loop_done	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap8b_proc_16bytes_loop_done:$/;"	l
inflate_fast_copy_gap8b_proc_lastfewbytes_loop	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap8b_proc_lastfewbytes_loop:$/;"	l
inflate_fast_copy_gap9to15b_proc	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap9to15b_proc:$/;"	l
inflate_fast_copy_gap9to15b_proc_9to15bytes_loop	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap9to15b_proc_9to15bytes_loop:$/;"	l
inflate_fast_copy_gap9to15b_proc_9to15bytes_loop_done	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap9to15b_proc_9to15bytes_loop_done:$/;"	l
inflate_fast_copy_gap9to15b_proc_lastfewbytes_loop	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_gap9to15b_proc_lastfewbytes_loop:$/;"	l
inflate_fast_copy_neon	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_neon:$/;"	l
inflate_fast_copy_neon	src/inffast.c	/^extern void inflate_fast_copy_neon(unsigned len, unsigned char **out, unsigned char *from);$/;"	p	file:	signature:(unsigned len, unsigned char **out, unsigned char *from)
inflate_fast_copy_vectorized	src/contrib/inflateneon/inflate_fast_copy_neon.s	/^inflate_fast_copy_vectorized:$/;"	l
inflate_fast_mask	src/contrib/masmx86/inffas32.asm	/^inflate_fast_mask:$/;"	l
inflate_fast_use_mmx	src/contrib/inflate86/inffast.S	/^#define inflate_fast_use_mmx _inflate_fast_use_mmx$/;"	d
inflate_fast_use_mmx	src/contrib/inflate86/inffast.S	/^inflate_fast_use_mmx: \/* integer flag for run time control 1=check,2=mmx,3=no *\/$/;"	l
inflate_fast_use_mmx	src/contrib/masmx86/inffas32.asm	/^inflate_fast_use_mmx:$/;"	l
inflate_mode	src/contrib/infback9/inflate9.h	/^} inflate_mode;$/;"	t	typeref:enum:__anon14
inflate_mode	src/inflate.h	/^} inflate_mode;$/;"	t	typeref:enum:__anon19
inflate_state	src/contrib/infback9/inflate9.h	/^struct inflate_state {$/;"	s
inflate_state	src/inflate.h	/^struct inflate_state {$/;"	s
inflate_state::back	src/inflate.h	/^    int back;                   \/* bits back of last unprocessed length\/lit *\/$/;"	m	struct:inflate_state	access:public
inflate_state::bits	src/inflate.h	/^    unsigned bits;              \/* number of bits in "in" *\/$/;"	m	struct:inflate_state	access:public
inflate_state::check	src/inflate.h	/^    unsigned long check;        \/* protected copy of check value *\/$/;"	m	struct:inflate_state	access:public
inflate_state::codes	src/contrib/infback9/inflate9.h	/^    code codes[ENOUGH];         \/* space for code tables *\/$/;"	m	struct:inflate_state	access:public
inflate_state::codes	src/inflate.h	/^    code codes[ENOUGH];         \/* space for code tables *\/$/;"	m	struct:inflate_state	access:public
inflate_state::distbits	src/inflate.h	/^    unsigned distbits;          \/* index bits for distcode *\/$/;"	m	struct:inflate_state	access:public
inflate_state::distcode	src/inflate.h	/^    code const FAR *distcode;   \/* starting table for distance codes *\/$/;"	m	struct:inflate_state	access:public
inflate_state::dmax	src/inflate.h	/^    unsigned dmax;              \/* zlib header max distance (INFLATE_STRICT) *\/$/;"	m	struct:inflate_state	access:public
inflate_state::extra	src/inflate.h	/^    unsigned extra;             \/* extra bits needed *\/$/;"	m	struct:inflate_state	access:public
inflate_state::flags	src/inflate.h	/^    int flags;                  \/* gzip header method and flags (0 if zlib) *\/$/;"	m	struct:inflate_state	access:public
inflate_state::have	src/contrib/infback9/inflate9.h	/^    unsigned have;              \/* number of code lengths in lens[] *\/$/;"	m	struct:inflate_state	access:public
inflate_state::have	src/inflate.h	/^    unsigned have;              \/* number of code lengths in lens[] *\/$/;"	m	struct:inflate_state	access:public
inflate_state::havedict	src/inflate.h	/^    int havedict;               \/* true if dictionary provided *\/$/;"	m	struct:inflate_state	access:public
inflate_state::head	src/inflate.h	/^    gz_headerp head;            \/* where to save gzip header information *\/$/;"	m	struct:inflate_state	access:public
inflate_state::hold	src/inflate.h	/^    unsigned long hold;         \/* input bit accumulator *\/$/;"	m	struct:inflate_state	access:public
inflate_state::last	src/inflate.h	/^    int last;                   \/* true if processing last block *\/$/;"	m	struct:inflate_state	access:public
inflate_state::lenbits	src/inflate.h	/^    unsigned lenbits;           \/* index bits for lencode *\/$/;"	m	struct:inflate_state	access:public
inflate_state::lencode	src/inflate.h	/^    code const FAR *lencode;    \/* starting table for length\/literal codes *\/$/;"	m	struct:inflate_state	access:public
inflate_state::length	src/inflate.h	/^    unsigned length;            \/* literal or length of data to copy *\/$/;"	m	struct:inflate_state	access:public
inflate_state::lens	src/contrib/infback9/inflate9.h	/^    unsigned short lens[320];   \/* temporary storage for code lengths *\/$/;"	m	struct:inflate_state	access:public
inflate_state::lens	src/inflate.h	/^    unsigned short lens[320];   \/* temporary storage for code lengths *\/$/;"	m	struct:inflate_state	access:public
inflate_state::mode	src/inflate.h	/^    inflate_mode mode;          \/* current inflate mode *\/$/;"	m	struct:inflate_state	access:public
inflate_state::ncode	src/contrib/infback9/inflate9.h	/^    unsigned ncode;             \/* number of code length code lengths *\/$/;"	m	struct:inflate_state	access:public
inflate_state::ncode	src/inflate.h	/^    unsigned ncode;             \/* number of code length code lengths *\/$/;"	m	struct:inflate_state	access:public
inflate_state::ndist	src/contrib/infback9/inflate9.h	/^    unsigned ndist;             \/* number of distance code lengths *\/$/;"	m	struct:inflate_state	access:public
inflate_state::ndist	src/inflate.h	/^    unsigned ndist;             \/* number of distance code lengths *\/$/;"	m	struct:inflate_state	access:public
inflate_state::next	src/contrib/infback9/inflate9.h	/^    code FAR *next;             \/* next available space in codes[] *\/$/;"	m	struct:inflate_state	access:public
inflate_state::next	src/inflate.h	/^    code FAR *next;             \/* next available space in codes[] *\/$/;"	m	struct:inflate_state	access:public
inflate_state::nlen	src/contrib/infback9/inflate9.h	/^    unsigned nlen;              \/* number of length code lengths *\/$/;"	m	struct:inflate_state	access:public
inflate_state::nlen	src/inflate.h	/^    unsigned nlen;              \/* number of length code lengths *\/$/;"	m	struct:inflate_state	access:public
inflate_state::offset	src/inflate.h	/^    unsigned offset;            \/* distance back to copy string from *\/$/;"	m	struct:inflate_state	access:public
inflate_state::sane	src/inflate.h	/^    int sane;                   \/* if false, allow invalid distance too far *\/$/;"	m	struct:inflate_state	access:public
inflate_state::total	src/inflate.h	/^    unsigned long total;        \/* protected copy of output count *\/$/;"	m	struct:inflate_state	access:public
inflate_state::was	src/inflate.h	/^    unsigned was;               \/* initial length of match *\/$/;"	m	struct:inflate_state	access:public
inflate_state::wbits	src/inflate.h	/^    unsigned wbits;             \/* log base 2 of requested window size *\/$/;"	m	struct:inflate_state	access:public
inflate_state::whave	src/inflate.h	/^    unsigned whave;             \/* valid bytes in the window *\/$/;"	m	struct:inflate_state	access:public
inflate_state::window	src/contrib/infback9/inflate9.h	/^    unsigned char FAR *window;  \/* allocated sliding window, if needed *\/$/;"	m	struct:inflate_state	access:public
inflate_state::window	src/inflate.h	/^    unsigned char FAR *window;  \/* allocated sliding window, if needed *\/$/;"	m	struct:inflate_state	access:public
inflate_state::wnext	src/inflate.h	/^    unsigned wnext;             \/* window write index *\/$/;"	m	struct:inflate_state	access:public
inflate_state::work	src/contrib/infback9/inflate9.h	/^    unsigned short work[288];   \/* work area for code table building *\/$/;"	m	struct:inflate_state	access:public
inflate_state::work	src/inflate.h	/^    unsigned short work[288];   \/* work area for code table building *\/$/;"	m	struct:inflate_state	access:public
inflate_state::wrap	src/inflate.h	/^    int wrap;                   \/* bit 0 true for zlib, bit 1 true for gzip *\/$/;"	m	struct:inflate_state	access:public
inflate_state::wsize	src/inflate.h	/^    unsigned wsize;             \/* window size or zero if not using window *\/$/;"	m	struct:inflate_state	access:public
inflate_table	src/inftrees.c	/^int ZLIB_INTERNAL inflate_table(type, lens, codes, table, bits, work)$/;"	f
inflate_table	src/inftrees.h	/^int ZLIB_INTERNAL inflate_table OF((codetype type, unsigned short FAR *lens,$/;"	p	signature:(codetype type, unsigned short FAR *lens, unsigned codes, code FAR * FAR *table, unsigned FAR *bits, unsigned short FAR *work)
inflate_table	src/zconf.h	115;"	d
inflate_table	zconf.h	115;"	d
inflate_table9	src/contrib/infback9/inftree9.c	/^int inflate_table9(type, lens, codes, table, bits, work)$/;"	f
inflate_table9	src/contrib/infback9/inftree9.h	/^extern int inflate_table9 OF((codetype type, unsigned short FAR *lens,$/;"	p	signature:(codetype type, unsigned short FAR *lens, unsigned codes, code FAR * FAR *table, unsigned FAR *bits, unsigned short FAR *work)
infun	src/contrib/blast/blast.c	/^    blast_in infun;             \/* input function provided by user *\/$/;"	m	struct:state	file:	access:public
inhow	src/contrib/blast/blast.c	/^    void *inhow;                \/* opaque information passed to infun() *\/$/;"	m	struct:state	file:	access:public
init_block	src/trees.c	/^local void init_block     OF((deflate_state *s));$/;"	p	file:	signature:(deflate_state *s)
init_block	src/trees.c	/^local void init_block(s)$/;"	f
init_keys	src/contrib/minizip/crypt.h	/^static void init_keys(const char* passwd,unsigned long* pkeys,const z_crc_t* pcrc_32_tab)$/;"	f	signature:(const char* passwd,unsigned long* pkeys,const z_crc_t* pcrc_32_tab)
init_linkedlist	src/contrib/minizip/zip.c	/^local void init_linkedlist(linkedlist_data* ll)$/;"	f	signature:(linkedlist_data* ll)
inlen	src/contrib/puff/puff.c	/^    unsigned long inlen;        \/* available input at in *\/$/;"	m	struct:state	file:	access:public
ins_h	src/deflate.h	/^    uInt  ins_h;          \/* hash index of string to be inserted *\/$/;"	m	struct:internal_state	access:public
insert	src/deflate.h	/^    uInt insert;        \/* bytes at end of window left to insert *\/$/;"	m	struct:internal_state	access:public
internal_fa	src/contrib/minizip/unzip.h	/^    uLong internal_fa;          \/* internal file attributes        2 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
internal_fa	src/contrib/minizip/unzip.h	/^    uLong internal_fa;          \/* internal file attributes        2 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
internal_fa	src/contrib/minizip/zip.h	/^    uLong       internal_fa;    \/* internal file attributes        2 bytes *\/$/;"	m	struct:__anon6	access:public
internal_state	src/deflate.h	/^typedef struct internal_state {$/;"	s
internal_state	src/zconf.h	151;"	d
internal_state	src/zlib.h	/^    struct internal_state {int dummy;};$/;"	s
internal_state	src/zutil.c	/^struct internal_state      {int dummy;}; \/* for buggy compilers *\/$/;"	s	file:
internal_state	zconf.h	151;"	d
internal_state	zlib.h	/^    struct internal_state {int dummy;};$/;"	s
internal_state::bi_buf	src/deflate.h	/^    ush bi_buf;$/;"	m	struct:internal_state	access:public
internal_state::bi_valid	src/deflate.h	/^    int bi_valid;$/;"	m	struct:internal_state	access:public
internal_state::bits_sent	src/deflate.h	/^    ulg bits_sent;      \/* bit length of compressed data sent mod 2^32 *\/$/;"	m	struct:internal_state	access:public
internal_state::bl_count	src/deflate.h	/^    ush bl_count[MAX_BITS+1];$/;"	m	struct:internal_state	access:public
internal_state::bl_desc	src/deflate.h	/^    struct tree_desc_s bl_desc;              \/* desc. for bit length tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s	access:public
internal_state::bl_tree	src/deflate.h	/^    struct ct_data_s bl_tree[2*BL_CODES+1];  \/* Huffman tree for bit lengths *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s	access:public
internal_state::block_start	src/deflate.h	/^    long block_start;$/;"	m	struct:internal_state	access:public
internal_state::compressed_len	src/deflate.h	/^    ulg compressed_len; \/* total bit length of compressed file mod 2^32 *\/$/;"	m	struct:internal_state	access:public
internal_state::d_buf	src/deflate.h	/^    ushf *d_buf;$/;"	m	struct:internal_state	access:public
internal_state::d_desc	src/deflate.h	/^    struct tree_desc_s d_desc;               \/* desc. for distance tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s	access:public
internal_state::depth	src/deflate.h	/^    uch depth[2*L_CODES+1];$/;"	m	struct:internal_state	access:public
internal_state::dummy	src/zlib.h	/^    struct internal_state {int dummy;};$/;"	m	struct:internal_state	access:public
internal_state::dummy	src/zutil.c	/^struct internal_state      {int dummy;}; \/* for buggy compilers *\/$/;"	m	struct:internal_state	file:	access:public
internal_state::dummy	zlib.h	/^    struct internal_state {int dummy;};$/;"	m	struct:internal_state	access:public
internal_state::dyn_dtree	src/deflate.h	/^    struct ct_data_s dyn_dtree[2*D_CODES+1]; \/* distance tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s	access:public
internal_state::dyn_ltree	src/deflate.h	/^    struct ct_data_s dyn_ltree[HEAP_SIZE];   \/* literal and length tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::ct_data_s	access:public
internal_state::good_match	src/deflate.h	/^    uInt good_match;$/;"	m	struct:internal_state	access:public
internal_state::gzhead	src/deflate.h	/^    gz_headerp  gzhead;  \/* gzip header information to write *\/$/;"	m	struct:internal_state	access:public
internal_state::gzindex	src/deflate.h	/^    uInt   gzindex;      \/* where in extra, name, or comment *\/$/;"	m	struct:internal_state	access:public
internal_state::hash_bits	src/deflate.h	/^    uInt  hash_bits;      \/* log2(hash_size) *\/$/;"	m	struct:internal_state	access:public
internal_state::hash_mask	src/deflate.h	/^    uInt  hash_mask;      \/* hash_size-1 *\/$/;"	m	struct:internal_state	access:public
internal_state::hash_shift	src/deflate.h	/^    uInt  hash_shift;$/;"	m	struct:internal_state	access:public
internal_state::hash_size	src/deflate.h	/^    uInt  hash_size;      \/* number of elements in hash table *\/$/;"	m	struct:internal_state	access:public
internal_state::head	src/deflate.h	/^    Posf *head; \/* Heads of the hash chains or NIL. *\/$/;"	m	struct:internal_state	access:public
internal_state::heap	src/deflate.h	/^    int heap[2*L_CODES+1];      \/* heap used to build the Huffman trees *\/$/;"	m	struct:internal_state	access:public
internal_state::heap_len	src/deflate.h	/^    int heap_len;               \/* number of elements in the heap *\/$/;"	m	struct:internal_state	access:public
internal_state::heap_max	src/deflate.h	/^    int heap_max;               \/* element of largest frequency *\/$/;"	m	struct:internal_state	access:public
internal_state::high_water	src/deflate.h	/^    ulg high_water;$/;"	m	struct:internal_state	access:public
internal_state::ins_h	src/deflate.h	/^    uInt  ins_h;          \/* hash index of string to be inserted *\/$/;"	m	struct:internal_state	access:public
internal_state::insert	src/deflate.h	/^    uInt insert;        \/* bytes at end of window left to insert *\/$/;"	m	struct:internal_state	access:public
internal_state::l_buf	src/deflate.h	/^    uchf *l_buf;          \/* buffer for literals or lengths *\/$/;"	m	struct:internal_state	access:public
internal_state::l_desc	src/deflate.h	/^    struct tree_desc_s l_desc;               \/* desc. for literal tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s	access:public
internal_state::last_flush	src/deflate.h	/^    int   last_flush;    \/* value of flush param for previous deflate call *\/$/;"	m	struct:internal_state	access:public
internal_state::last_lit	src/deflate.h	/^    uInt last_lit;      \/* running index in l_buf *\/$/;"	m	struct:internal_state	access:public
internal_state::level	src/deflate.h	/^    int level;    \/* compression level (1..9) *\/$/;"	m	struct:internal_state	access:public
internal_state::lit_bufsize	src/deflate.h	/^    uInt  lit_bufsize;$/;"	m	struct:internal_state	access:public
internal_state::lookahead	src/deflate.h	/^    uInt lookahead;              \/* number of valid bytes ahead in window *\/$/;"	m	struct:internal_state	access:public
internal_state::match_available	src/deflate.h	/^    int match_available;         \/* set if previous match exists *\/$/;"	m	struct:internal_state	access:public
internal_state::match_length	src/deflate.h	/^    uInt match_length;           \/* length of best match *\/$/;"	m	struct:internal_state	access:public
internal_state::match_start	src/deflate.h	/^    uInt match_start;            \/* start of matching string *\/$/;"	m	struct:internal_state	access:public
internal_state::matches	src/deflate.h	/^    uInt matches;       \/* number of string matches in current block *\/$/;"	m	struct:internal_state	access:public
internal_state::max_chain_length	src/deflate.h	/^    uInt max_chain_length;$/;"	m	struct:internal_state	access:public
internal_state::max_lazy_match	src/deflate.h	/^    uInt max_lazy_match;$/;"	m	struct:internal_state	access:public
internal_state::method	src/deflate.h	/^    Byte  method;        \/* can only be DEFLATED *\/$/;"	m	struct:internal_state	access:public
internal_state::nice_match	src/deflate.h	/^    int nice_match; \/* Stop searching when current match exceeds this *\/$/;"	m	struct:internal_state	access:public
internal_state::opt_len	src/deflate.h	/^    ulg opt_len;        \/* bit length of current block with optimal trees *\/$/;"	m	struct:internal_state	access:public
internal_state::pending	src/deflate.h	/^    uInt   pending;      \/* nb of bytes in the pending buffer *\/$/;"	m	struct:internal_state	access:public
internal_state::pending_buf	src/deflate.h	/^    Bytef *pending_buf;  \/* output still pending *\/$/;"	m	struct:internal_state	access:public
internal_state::pending_buf_size	src/deflate.h	/^    ulg   pending_buf_size; \/* size of pending_buf *\/$/;"	m	struct:internal_state	access:public
internal_state::pending_out	src/deflate.h	/^    Bytef *pending_out;  \/* next pending byte to output to the stream *\/$/;"	m	struct:internal_state	access:public
internal_state::prev	src/deflate.h	/^    Posf *prev;$/;"	m	struct:internal_state	access:public
internal_state::prev_length	src/deflate.h	/^    uInt prev_length;$/;"	m	struct:internal_state	access:public
internal_state::prev_match	src/deflate.h	/^    IPos prev_match;             \/* previous match *\/$/;"	m	struct:internal_state	access:public
internal_state::static_len	src/deflate.h	/^    ulg static_len;     \/* bit length of current block with static trees *\/$/;"	m	struct:internal_state	access:public
internal_state::status	src/deflate.h	/^    int   status;        \/* as the name implies *\/$/;"	m	struct:internal_state	access:public
internal_state::strategy	src/deflate.h	/^    int strategy; \/* favor or force Huffman coding*\/$/;"	m	struct:internal_state	access:public
internal_state::strm	src/deflate.h	/^    z_streamp strm;      \/* pointer back to this zlib stream *\/$/;"	m	struct:internal_state	access:public
internal_state::strstart	src/deflate.h	/^    uInt strstart;               \/* start of string to insert *\/$/;"	m	struct:internal_state	access:public
internal_state::w_bits	src/deflate.h	/^    uInt  w_bits;        \/* log2(w_size)  (8..16) *\/$/;"	m	struct:internal_state	access:public
internal_state::w_mask	src/deflate.h	/^    uInt  w_mask;        \/* w_size - 1 *\/$/;"	m	struct:internal_state	access:public
internal_state::w_size	src/deflate.h	/^    uInt  w_size;        \/* LZ77 window size (32K by default) *\/$/;"	m	struct:internal_state	access:public
internal_state::window	src/deflate.h	/^    Bytef *window;$/;"	m	struct:internal_state	access:public
internal_state::window_size	src/deflate.h	/^    ulg window_size;$/;"	m	struct:internal_state	access:public
internal_state::wrap	src/deflate.h	/^    int   wrap;          \/* bit 0 true for zlib, bit 1 true for gzip *\/$/;"	m	struct:internal_state	access:public
intf	src/zconf.h	/^typedef int   FAR intf;$/;"	t
intf	src/zconf.h	139;"	d
intf	zconf.h	/^typedef int   FAR intf;$/;"	t
intf	zconf.h	139;"	d
invalid_distance_code_msg	src/contrib/masmx86/inffas32.asm	/^invalid_distance_code_msg:$/;"	l
invalid_distance_too_far_msg	src/contrib/masmx86/inffas32.asm	/^invalid_distance_too_far_msg:$/;"	l
invalid_literal_length_code_msg	src/contrib/masmx86/inffas32.asm	/^invalid_literal_length_code_msg:$/;"	l
io_mode	src/contrib/iostream3/zfstream.h	/^  std::ios_base::openmode io_mode;$/;"	m	class:gzfilebuf	access:private
is64bitOpenFunction	src/contrib/minizip/unzip.c	/^    int is64bitOpenFunction;$/;"	m	struct:__anon8	file:	access:public
isLargeFile	src/contrib/minizip/minizip.c	/^int isLargeFile(const char* filename)$/;"	f	signature:(const char* filename)
isZip64	src/contrib/minizip/unzip.c	/^    int isZip64;$/;"	m	struct:__anon8	file:	access:public
is_open	src/contrib/iostream/zfstream.h	/^  inline int is_open() const { return (file !=NULL); }$/;"	f	class:gzfilebuf	access:public	signature:() const
is_open	src/contrib/iostream3/zfstream.h	/^  is_open() const { return (file != NULL); }$/;"	f	class:gzfilebuf	access:public	signature:() const
is_open	src/contrib/iostream3/zfstream.h	/^  is_open() { return sb.is_open(); }$/;"	f	class:gzifstream	access:public	signature:()
is_open	src/contrib/iostream3/zfstream.h	/^  is_open() { return sb.is_open(); }$/;"	f	class:gzofstream	access:public	signature:()
izstream	src/contrib/iostream2/zstream.h	/^        izstream() : m_fp(0) {}$/;"	f	class:izstream	access:public	signature:()
izstream	src/contrib/iostream2/zstream.h	/^        izstream(FILE* fp) : m_fp(0) { open(fp); }$/;"	f	class:izstream	access:public	signature:(FILE* fp)
izstream	src/contrib/iostream2/zstream.h	/^        izstream(const char* name) : m_fp(0) { open(name); }$/;"	f	class:izstream	access:public	signature:(const char* name)
izstream	src/contrib/iostream2/zstream.h	/^class izstream$/;"	c
izstream::close	src/contrib/iostream2/zstream.h	/^        int close() {$/;"	f	class:izstream	access:public	signature:()
izstream::error	src/contrib/iostream2/zstream.h	/^        const char* error(int* errnum) {$/;"	f	class:izstream	access:public	signature:(int* errnum)
izstream::fp	src/contrib/iostream2/zstream.h	/^        gzFile fp() { return m_fp; }$/;"	f	class:izstream	access:public	signature:()
izstream::izstream	src/contrib/iostream2/zstream.h	/^        izstream() : m_fp(0) {}$/;"	f	class:izstream	access:public	signature:()
izstream::izstream	src/contrib/iostream2/zstream.h	/^        izstream(FILE* fp) : m_fp(0) { open(fp); }$/;"	f	class:izstream	access:public	signature:(FILE* fp)
izstream::izstream	src/contrib/iostream2/zstream.h	/^        izstream(const char* name) : m_fp(0) { open(name); }$/;"	f	class:izstream	access:public	signature:(const char* name)
izstream::m_fp	src/contrib/iostream2/zstream.h	/^        gzFile m_fp;$/;"	m	class:izstream	access:private
izstream::open	src/contrib/iostream2/zstream.h	/^        void open(FILE* fp) {$/;"	f	class:izstream	access:public	signature:(FILE* fp)
izstream::open	src/contrib/iostream2/zstream.h	/^        void open(const char* name) {$/;"	f	class:izstream	access:public	signature:(const char* name)
izstream::read	src/contrib/iostream2/zstream.h	/^        int read(void* buf, size_t len) {$/;"	f	class:izstream	access:public	signature:(void* buf, size_t len)
izstream::~izstream	src/contrib/iostream2/zstream.h	/^        ~izstream() { close(); }$/;"	f	class:izstream	access:public	signature:()
kBufferSize	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        protected const int kBufferSize = 16384;$/;"	f	class:DotZLib.CodecBase	access:protected
keys	src/contrib/minizip/unzip.c	/^    unsigned long keys[3];     \/* keys defining the pseudo-random sequence *\/$/;"	m	struct:__anon8	file:	access:public
keys	src/contrib/minizip/zip.c	/^    unsigned long keys[3];     \/* keys defining the pseudo-random sequence *\/$/;"	m	struct:__anon9	file:	access:public
l_buf	src/deflate.h	/^    uchf *l_buf;          \/* buffer for literals or lengths *\/$/;"	m	struct:internal_state	access:public
l_desc	src/deflate.h	/^    struct tree_desc_s l_desc;               \/* desc. for literal tree *\/$/;"	m	struct:internal_state	typeref:struct:internal_state::tree_desc_s	access:public
large	src/examples/enough.c	/^local int large;        \/* largest code table so far *\/$/;"	v
last	src/contrib/inflate86/inffast.S	/^#define last           20  \/* unsigned char* *\/$/;"	d
last	src/contrib/masmx64/inffas8664.c	/^\/* 24   12 *\/ unsigned char FAR *last;  \/*     r9   while in < last *\/$/;"	m	struct:inffast_ar	file:	access:public
last	src/examples/gzlog.c	/^    off_t last;     \/* offset of last stored block first length byte *\/$/;"	m	struct:log	file:	access:public
last	src/inflate.h	/^    int last;                   \/* true if processing last block *\/$/;"	m	struct:inflate_state	access:public
last_block	src/contrib/minizip/zip.c	/^    linkedlist_datablock_internal* last_block;$/;"	m	struct:linkedlist_data_s	file:	access:public
last_flush	src/deflate.h	/^    int   last_flush;    \/* value of flush param for previous deflate call *\/$/;"	m	struct:internal_state	access:public
last_lit	src/deflate.h	/^    uInt last_lit;      \/* running index in l_buf *\/$/;"	m	struct:internal_state	access:public
last_r	src/contrib/inflate86/inffast.S	/^#define last_r %ebx$/;"	d
lcode	src/contrib/inflate86/inffast.S	/^#define lcode           8  \/* code* *\/$/;"	d
lcode	src/contrib/masmx64/inffas8664.c	/^\/* 64   32 *\/ code const FAR *lcode;    \/* ebp rbp  local strm->lencode *\/$/;"	m	struct:inffast_ar	file:	access:public
leave	src/configure	/^leave()$/;"	f
left	src/contrib/blast/blast.c	/^    unsigned left;              \/* available input at in *\/$/;"	m	struct:state	file:	access:public
left	src/examples/gzappend.c	/^    unsigned left;              \/* bytes available at next *\/$/;"	m	struct:__anon2	file:	access:public
left	src/examples/gzjoin.c	/^    unsigned left;          \/* bytes remaining at next *\/$/;"	m	struct:__anon3	file:	access:public
len	src/contrib/inflate86/inffast.S	/^#define len            24  \/* unsigned int *\/$/;"	d
len	src/contrib/masmx64/inffas8664.c	/^\/*108   64 *\/ unsigned len;             \/*     r14  match length *\/$/;"	m	struct:inffast_ar	file:	access:public
len	src/deflate.h	/^        ush  len;        \/* length of bit string *\/$/;"	m	union:ct_data_s::__anon5	access:public
len	src/examples/enough.c	/^    size_t len;         \/* length of bit vector in char's *\/$/;"	m	struct:tab	file:	access:public
len_r	src/contrib/inflate86/inffast.S	/^#define len_r  %edx$/;"	d
len_r	src/contrib/inflate86/inffast.S	/^#define len_r %eax$/;"	d
len_r	src/contrib/inflate86/inffast.S	/^#define len_r %edx$/;"	d
lenbits	src/inflate.h	/^    unsigned lenbits;           \/* index bits for lencode *\/$/;"	m	struct:inflate_state	access:public
lenbits_state	src/contrib/inflate86/inffast.S	/^#define lenbits_state  76  \/* state->lenbits *\/$/;"	d
lenbits_state	src/contrib/masmx86/inffas32.asm	/^lenbits_state	 equ	(72+4+zlib1222sup)	;\/* state->lenbits *\/$/;"	d
lencode	src/inflate.h	/^    code const FAR *lencode;    \/* starting table for length\/literal codes *\/$/;"	m	struct:inflate_state	access:public
lencode_state	src/contrib/inflate86/inffast.S	/^#define lencode_state  68  \/* state->lencode *\/$/;"	d
lencode_state	src/contrib/masmx86/inffas32.asm	/^lencode_state	 equ	(64+4+zlib1222sup)	;\/* state->lencode *\/$/;"	d
lenfix	src/contrib/infback9/inffix9.h	/^    static const code lenfix[512] = {$/;"	v
lenfix	src/inffixed.h	/^    static const code lenfix[512] = {$/;"	v
length	src/inflate.h	/^    unsigned length;            \/* literal or length of data to copy *\/$/;"	m	struct:inflate_state	access:public
lens	src/contrib/infback9/inflate9.h	/^    unsigned short lens[320];   \/* temporary storage for code lengths *\/$/;"	m	struct:inflate_state	access:public
lens	src/inflate.h	/^    unsigned short lens[320];   \/* temporary storage for code lengths *\/$/;"	m	struct:inflate_state	access:public
level	src/deflate.h	/^    int level;    \/* compression level (1..9) *\/$/;"	m	struct:internal_state	access:public
level	src/gzguts.h	/^    int level;              \/* compression level *\/$/;"	m	struct:__anon1	access:public
limit	src/contrib/amd64/amd64-match.S	/^#define	limit		r15$/;"	d
limit	src/contrib/masmx86/match686.asm	/^    limit           equ     dword ptr [esp+NbStack-32]$/;"	d
limit	src/test/infcover.c	/^    size_t limit;               \/* memory allocation limit, or 0 if no limit *\/$/;"	m	struct:mem_zone	file:	access:public
limitd	src/contrib/amd64/amd64-match.S	/^#define	limitd		r15d$/;"	d
linkedlist_data	src/contrib/minizip/zip.c	/^} linkedlist_data;$/;"	t	typeref:struct:linkedlist_data_s	file:
linkedlist_data_s	src/contrib/minizip/zip.c	/^typedef struct linkedlist_data_s$/;"	s	file:
linkedlist_data_s::first_block	src/contrib/minizip/zip.c	/^    linkedlist_datablock_internal* first_block;$/;"	m	struct:linkedlist_data_s	file:	access:public
linkedlist_data_s::last_block	src/contrib/minizip/zip.c	/^    linkedlist_datablock_internal* last_block;$/;"	m	struct:linkedlist_data_s	file:	access:public
linkedlist_datablock_internal	src/contrib/minizip/zip.c	/^} linkedlist_datablock_internal;$/;"	t	typeref:struct:linkedlist_datablock_internal_s	file:
linkedlist_datablock_internal_s	src/contrib/minizip/zip.c	/^typedef struct linkedlist_datablock_internal_s$/;"	s	file:
linkedlist_datablock_internal_s::avail_in_this_block	src/contrib/minizip/zip.c	/^  uLong  avail_in_this_block;$/;"	m	struct:linkedlist_datablock_internal_s	file:	access:public
linkedlist_datablock_internal_s::data	src/contrib/minizip/zip.c	/^  unsigned char data[SIZEDATA_INDATABLOCK];$/;"	m	struct:linkedlist_datablock_internal_s	file:	access:public
linkedlist_datablock_internal_s::filled_in_this_block	src/contrib/minizip/zip.c	/^  uLong  filled_in_this_block;$/;"	m	struct:linkedlist_datablock_internal_s	file:	access:public
linkedlist_datablock_internal_s::next_datablock	src/contrib/minizip/zip.c	/^  struct linkedlist_datablock_internal_s* next_datablock;$/;"	m	struct:linkedlist_datablock_internal_s	typeref:struct:linkedlist_datablock_internal_s::linkedlist_datablock_internal_s	file:	access:public
linkedlist_datablock_internal_s::unused	src/contrib/minizip/zip.c	/^  uLong  unused; \/* for future use and alignement *\/$/;"	m	struct:linkedlist_datablock_internal_s	file:	access:public
linkname	src/contrib/untgz/untgz.c	/^  char linkname[100];           \/* 157 *\/$/;"	m	struct:tar_header	file:	access:public
list	src/examples/zran.c	/^    struct point *list; \/* allocated list *\/$/;"	m	struct:access	typeref:struct:access::point	file:	access:public
lit_bufsize	src/deflate.h	/^    uInt  lit_bufsize;$/;"	m	struct:internal_state	access:public
lm_init	src/deflate.c	/^local void lm_init        OF((deflate_state *s));$/;"	p	file:	signature:(deflate_state *s)
lm_init	src/deflate.c	/^local void lm_init (s)$/;"	f
lmask	src/contrib/inflate86/inffast.S	/^#define lmask           0  \/* unsigned int *\/$/;"	d
lmask	src/contrib/masmx64/inffas8664.c	/^\/*100   56 *\/ unsigned lmask;           \/*     r12  mask for lcode *\/$/;"	m	struct:inffast_ar	file:	access:public
lmask2_mm	src/contrib/inflate86/inffast.S	/^#define lmask2_mm %mm3$/;"	d
lmask_mm	src/contrib/inflate86/inffast.S	/^#define lmask_mm  %mm4$/;"	d
load	src/contrib/puff/pufftest.c	/^local void *load(const char *name, size_t *len)$/;"	f	signature:(const char *name, size_t *len)
local	src/adler32.c	10;"	d	file:
local	src/contrib/blast/blast.c	32;"	d	file:
local	src/contrib/minizip/unzip.c	91;"	d	file:
local	src/contrib/minizip/zip.c	45;"	d	file:
local	src/contrib/puff/puff.c	85;"	d	file:
local	src/contrib/puff/pufftest.c	31;"	d	file:
local	src/crc32.c	33;"	d	file:
local	src/examples/enough.c	107;"	d	file:
local	src/examples/fitblk.c	59;"	d	file:
local	src/examples/gun.c	73;"	d	file:
local	src/examples/gzappend.c	87;"	d	file:
local	src/examples/gzjoin.c	63;"	d	file:
local	src/examples/gzlog.c	241;"	d	file:
local	src/examples/zran.c	60;"	d	file:
local	src/gzguts.h	107;"	d
local	src/test/infcover.c	20;"	d	file:
local	src/test/minigzip.c	139;"	d	file:
local	src/test/minigzip.c	142;"	d	file:
local	src/zutil.h	37;"	d
local	zutil.h	37;"	d
local_var_size	src/contrib/inflate86/inffast.S	/^#define local_var_size 64 \/* how much local space for vars *\/$/;"	d
lock	src/examples/gzlog.c	/^    time_t lock;    \/* last modify time of our lock file *\/$/;"	m	struct:log	file:	access:public
log	src/examples/gzlog.c	/^struct log {$/;"	s	file:
log::back	src/examples/gzlog.c	/^    int back;       \/* location of first block id in bits back from first *\/$/;"	m	struct:log	file:	access:public
log::ccrc	src/examples/gzlog.c	/^    ulong ccrc;     \/* crc of compressed data *\/$/;"	m	struct:log	file:	access:public
log::clen	src/examples/gzlog.c	/^    ulong clen;     \/* length (modulo 2^32) of compressed data *\/$/;"	m	struct:log	file:	access:public
log::end	src/examples/gzlog.c	/^    char *end;      \/* end of path, for appending suffices such as ".gz" *\/$/;"	m	struct:log	file:	access:public
log::fd	src/examples/gzlog.c	/^    int fd;         \/* file descriptor for .gz file, opened read\/write *\/$/;"	m	struct:log	file:	access:public
log::first	src/examples/gzlog.c	/^    off_t first;    \/* offset of first stored block first length byte *\/$/;"	m	struct:log	file:	access:public
log::id	src/examples/gzlog.c	/^    char id[4];     \/* contains LOGID to detect inadvertent overwrites *\/$/;"	m	struct:log	file:	access:public
log::last	src/examples/gzlog.c	/^    off_t last;     \/* offset of last stored block first length byte *\/$/;"	m	struct:log	file:	access:public
log::lock	src/examples/gzlog.c	/^    time_t lock;    \/* last modify time of our lock file *\/$/;"	m	struct:log	file:	access:public
log::path	src/examples/gzlog.c	/^    char *path;     \/* allocated path, e.g. "\/var\/log\/foo" or "foo" *\/$/;"	m	struct:log	file:	access:public
log::stored	src/examples/gzlog.c	/^    uint stored;    \/* bytes currently in last stored block *\/$/;"	m	struct:log	file:	access:public
log::tcrc	src/examples/gzlog.c	/^    ulong tcrc;     \/* crc of total data *\/$/;"	m	struct:log	file:	access:public
log::tlen	src/examples/gzlog.c	/^    ulong tlen;     \/* length (modulo 2^32) of total data *\/$/;"	m	struct:log	file:	access:public
log_append	src/examples/gzlog.c	/^local int log_append(struct log *log, unsigned char *data, size_t len)$/;"	f	signature:(struct log *log, unsigned char *data, size_t len)
log_check	src/examples/gzlog.c	/^local int log_check(struct log *log)$/;"	f	signature:(struct log *log)
log_close	src/examples/gzlog.c	/^local void log_close(struct log *log)$/;"	f	signature:(struct log *log)
log_compress	src/examples/gzlog.c	/^local int log_compress(struct log *log, unsigned char *data, size_t len)$/;"	f	signature:(struct log *log, unsigned char *data, size_t len)
log_gzbody	src/examples/gzlog.c	/^local unsigned char log_gzbody[] = {$/;"	v
log_gzext	src/examples/gzlog.c	/^local unsigned char log_gzext[] = {$/;"	v
log_gzhead	src/examples/gzlog.c	/^local unsigned char log_gzhead[] = {$/;"	v
log_head	src/examples/gzlog.c	/^local int log_head(struct log *log)$/;"	f	signature:(struct log *log)
log_last	src/examples/gzlog.c	/^local int log_last(struct log *log, int last)$/;"	f	signature:(struct log *log, int last)
log_lock	src/examples/gzlog.c	/^local int log_lock(struct log *log)$/;"	f	signature:(struct log *log)
log_log	src/examples/gzlog.c	/^local void log_log(struct log *log, int op, char *record)$/;"	f	signature:(struct log *log, int op, char *record)
log_mark	src/examples/gzlog.c	/^local int log_mark(struct log *log, int op)$/;"	f	signature:(struct log *log, int op)
log_open	src/examples/gzlog.c	/^local int log_open(struct log *log)$/;"	f	signature:(struct log *log)
log_recover	src/examples/gzlog.c	/^local int log_recover(struct log *log, int op)$/;"	f	signature:(struct log *log, int op)
log_replace	src/examples/gzlog.c	/^local int log_replace(struct log *log)$/;"	f	signature:(struct log *log)
log_touch	src/examples/gzlog.c	/^local void log_touch(struct log *log)$/;"	f	signature:(struct log *log)
log_unlock	src/examples/gzlog.c	/^local void log_unlock(struct log *log)$/;"	f	signature:(struct log *log)
longest_match	src/contrib/amd64/amd64-match.S	/^longest_match:$/;"	l
longest_match	src/contrib/asm686/match.S	/^#define	longest_match	_longest_match$/;"	d
longest_match	src/contrib/asm686/match.S	/^longest_match:$/;"	l
longest_match	src/contrib/gcc_gvmat64/gvmat64.S	/^longest_match:$/;"	l
longest_match	src/contrib/masmx64/gvmat64.asm	/^longest_match PROC$/;"	l
longest_match	src/contrib/masmx86/match686.asm	/^    longest_match       proc near$/;"	l
longest_match	src/deflate.c	/^      uInt longest_match  OF((deflate_state *s, IPos cur_match));$/;"	p	file:	signature:(deflate_state *s, IPos cur_match)
longest_match	src/deflate.c	/^local uInt longest_match  OF((deflate_state *s, IPos cur_match));$/;"	p	file:	signature:(deflate_state *s, IPos cur_match)
longest_match	src/deflate.c	/^local uInt longest_match(s, cur_match)$/;"	f
lookahead	src/deflate.h	/^    uInt lookahead;              \/* number of valid bytes ahead in window *\/$/;"	m	struct:internal_state	access:public
lunpipe	src/examples/gun.c	/^local int lunpipe(unsigned have, z_const unsigned char *next, struct ind *indp,$/;"	f	signature:(unsigned have, z_const unsigned char *next, struct ind *indp, int outfile, z_stream *strm)
m_fp	src/contrib/iostream2/zstream.h	/^        gzFile m_fp;$/;"	m	class:izstream	access:private
m_fp	src/contrib/iostream2/zstream.h	/^        gzFile m_fp;$/;"	m	class:ozstream	access:private
m_os	src/contrib/iostream2/zstream.h	/^        ostrstream* m_os;$/;"	m	class:ozstream	access:private
magic	src/contrib/untgz/untgz.c	/^  char magic[6];                \/* 257 *\/$/;"	m	struct:tar_header	file:	access:public
main	src/contrib/blast/blast.c	/^int main(void)$/;"	f	signature:(void)
main	src/contrib/iostream/test.cpp	/^int main() {$/;"	f	signature:()
main	src/contrib/iostream2/zstream_test.cpp	/^void main() {$/;"	f	signature:()
main	src/contrib/iostream3/test.cc	/^int main() {$/;"	f	signature:()
main	src/contrib/minizip/miniunz.c	/^int main(argc,argv)$/;"	f
main	src/contrib/minizip/minizip.c	/^int main(argc,argv)$/;"	f
main	src/contrib/puff/pufftest.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/contrib/testzlib/testzlib.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	src/contrib/untgz/untgz.c	/^int main                OF((int, char **));$/;"	p	file:	signature:(int, char **)
main	src/contrib/untgz/untgz.c	/^int main(int argc,char **argv)$/;"	f	signature:(int argc,char **argv)
main	src/examples/enough.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/examples/fitblk.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/examples/gun.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/examples/gzappend.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/examples/gzjoin.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/examples/zpipe.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/examples/zran.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/test/example.c	/^int  main               OF((int argc, char *argv[]));$/;"	p	file:	signature:(int argc, char *argv[])
main	src/test/example.c	/^int main(argc, argv)$/;"	f
main	src/test/infcover.c	/^int main(void)$/;"	f	signature:(void)
main	src/test/minigzip.c	/^int  main             OF((int argc, char *argv[]));$/;"	p	file:	signature:(int argc, char *argv[])
main	src/test/minigzip.c	/^int main(argc, argv)$/;"	f
make_crc_table	src/crc32.c	/^local void make_crc_table OF((void));$/;"	p	file:	signature:(void)
make_crc_table	src/crc32.c	/^local void make_crc_table()$/;"	f
makedir	src/contrib/minizip/miniunz.c	/^int makedir (newdir)$/;"	f
makedir	src/contrib/untgz/untgz.c	/^int makedir             OF((char *));$/;"	p	file:	signature:(char *)
makedir	src/contrib/untgz/untgz.c	/^int makedir (char *newdir)$/;"	f	signature:(char *newdir)
makefixed	src/inflate.c	/^   void makefixed OF((void));$/;"	p	file:	signature:(void)
makefixed	src/inflate.c	/^void makefixed()$/;"	f
makefixed9	src/contrib/infback9/infback9.c	/^void makefixed9(void)$/;"	f	signature:(void)
malloc	src/gzguts.h	/^  extern voidp  malloc OF((uInt size));$/;"	p	signature:(uInt size)
malloc	src/zutil.c	/^extern voidp  malloc OF((uInt size));$/;"	p	file:	signature:(uInt size)
match	src/examples/gun.c	/^unsigned char match[65280 + 2];         \/* buffer for reversed match or gzip$/;"	v
match_available	src/deflate.h	/^    int match_available;         \/* set if previous match exists *\/$/;"	m	struct:internal_state	access:public
match_init	src/contrib/amd64/amd64-match.S	/^match_init:	ret$/;"	l
match_init	src/contrib/asm686/match.S	/^#define	match_init	_match_init$/;"	d
match_init	src/contrib/asm686/match.S	/^match_init:	ret$/;"	l
match_init	src/contrib/gcc_gvmat64/gvmat64.S	/^match_init:$/;"	l
match_init	src/contrib/masmx64/gvmat64.asm	/^match_init PROC$/;"	l
match_init	src/contrib/masmx86/match686.asm	/^    match_init      proc near$/;"	l
match_init	src/deflate.c	/^      void match_init OF((void)); \/* asm code initialization *\/$/;"	p	file:	signature:(void)
match_length	src/deflate.h	/^    uInt match_length;           \/* length of best match *\/$/;"	m	struct:internal_state	access:public
match_start	src/contrib/gcc_gvmat64/gvmat64.S	/^#define match_start      [ rcx + dsMatchStart]$/;"	d
match_start	src/contrib/masmx64/gvmat64.asm	/^match_start     equ [ rcx + dsMatchStart]$/;"	d
match_start	src/contrib/masmx86/match686.asm	/^    match_start     equ     dword ptr [esp+NbStack-72]$/;"	d
match_start	src/deflate.h	/^    uInt match_start;            \/* start of matching string *\/$/;"	m	struct:internal_state	access:public
match_start_ptr	src/contrib/masmx86/match686.asm	/^    match_start_ptr equ     dword ptr [esp+NbStack-56]$/;"	d
matches	src/deflate.h	/^    uInt matches;       \/* number of string matches in current block *\/$/;"	m	struct:internal_state	access:public
matchname	src/contrib/untgz/untgz.c	/^int matchname           OF((int, int, char **, char *));$/;"	p	file:	signature:(int, int, char **, char *)
matchname	src/contrib/untgz/untgz.c	/^int matchname (int arg,int argc,char **argv,char *fname)$/;"	f	signature:(int arg,int argc,char **argv,char *fname)
max	src/examples/enough.c	/^local int max;          \/* maximum allowed bit length for the codes *\/$/;"	v
max_chain	src/deflate.c	/^   ush max_chain;$/;"	m	struct:config_s	file:	access:public
max_chain_length	src/contrib/gcc_gvmat64/gvmat64.S	/^#define max_chain_length [ rcx + dsMaxChainLen]$/;"	d
max_chain_length	src/contrib/masmx64/gvmat64.asm	/^max_chain_length equ [ rcx + dsMaxChainLen]$/;"	d
max_chain_length	src/deflate.h	/^    uInt max_chain_length;$/;"	m	struct:internal_state	access:public
max_code	src/deflate.h	/^    int     max_code;            \/* largest code with non zero frequency *\/$/;"	m	struct:tree_desc_s	access:public
max_insert_length	src/deflate.h	179;"	d
max_lazy	src/deflate.c	/^   ush max_lazy;    \/* do not perform lazy search above this match length *\/$/;"	m	struct:config_s	file:	access:public
max_lazy_match	src/deflate.h	/^    uInt max_lazy_match;$/;"	m	struct:internal_state	access:public
max_length	src/trees.c	/^    int     max_length;          \/* max bit length for the codes *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
mem_alloc	src/test/infcover.c	/^local void *mem_alloc(void *mem, unsigned count, unsigned size)$/;"	f	signature:(void *mem, unsigned count, unsigned size)
mem_done	src/test/infcover.c	/^local void mem_done(z_stream *strm, char *prefix)$/;"	f	signature:(z_stream *strm, char *prefix)
mem_free	src/test/infcover.c	/^local void mem_free(void *mem, void *ptr)$/;"	f	signature:(void *mem, void *ptr)
mem_high	src/test/infcover.c	/^local void mem_high(z_stream *strm, char *prefix)$/;"	f	signature:(z_stream *strm, char *prefix)
mem_item	src/test/infcover.c	/^struct mem_item {$/;"	s	file:
mem_item::next	src/test/infcover.c	/^    struct mem_item *next;      \/* pointer to next item in list, or NULL *\/$/;"	m	struct:mem_item	typeref:struct:mem_item::mem_item	file:	access:public
mem_item::ptr	src/test/infcover.c	/^    void *ptr;                  \/* pointer to allocated memory *\/$/;"	m	struct:mem_item	file:	access:public
mem_item::size	src/test/infcover.c	/^    size_t size;                \/* requested size of allocation *\/$/;"	m	struct:mem_item	file:	access:public
mem_limit	src/test/infcover.c	/^local void mem_limit(z_stream *strm, size_t limit)$/;"	f	signature:(z_stream *strm, size_t limit)
mem_setup	src/test/infcover.c	/^local void mem_setup(z_stream *strm)$/;"	f	signature:(z_stream *strm)
mem_used	src/test/infcover.c	/^local void mem_used(z_stream *strm, char *prefix)$/;"	f	signature:(z_stream *strm, char *prefix)
mem_zone	src/test/infcover.c	/^struct mem_zone {$/;"	s	file:
mem_zone::first	src/test/infcover.c	/^    struct mem_item *first;     \/* pointer to first item in list, or NULL *\/$/;"	m	struct:mem_zone	typeref:struct:mem_zone::mem_item	file:	access:public
mem_zone::highwater	src/test/infcover.c	/^    size_t total, highwater;    \/* total allocations, and largest total *\/$/;"	m	struct:mem_zone	file:	access:public
mem_zone::limit	src/test/infcover.c	/^    size_t limit;               \/* memory allocation limit, or 0 if no limit *\/$/;"	m	struct:mem_zone	file:	access:public
mem_zone::notlifo	src/test/infcover.c	/^    int notlifo, rogue;         \/* counts of non-LIFO frees and rogue frees *\/$/;"	m	struct:mem_zone	file:	access:public
mem_zone::rogue	src/test/infcover.c	/^    int notlifo, rogue;         \/* counts of non-LIFO frees and rogue frees *\/$/;"	m	struct:mem_zone	file:	access:public
mem_zone::total	src/test/infcover.c	/^    size_t total, highwater;    \/* total allocations, and largest total *\/$/;"	m	struct:mem_zone	file:	access:public
method	src/contrib/minizip/zip.c	/^    int  method;                \/* compression method of file currenty wr.*\/$/;"	m	struct:__anon9	file:	access:public
method	src/deflate.h	/^    Byte  method;        \/* can only be DEFLATED *\/$/;"	m	struct:internal_state	access:public
mkdir	src/contrib/untgz/untgz.c	29;"	d	file:
mode	src/contrib/iostream/zfstream.h	/^  short mode;$/;"	m	class:gzfilebuf	access:private
mode	src/contrib/untgz/untgz.c	/^  char mode[8];                 \/* 100 *\/$/;"	m	struct:tar_header	file:	access:public
mode	src/contrib/untgz/untgz.c	/^  int                mode;$/;"	m	struct:attr_item	file:	access:public
mode	src/gzguts.h	/^    int mode;               \/* see gzip modes above *\/$/;"	m	struct:__anon1	access:public
mode	src/inflate.h	/^    inflate_mode mode;          \/* current inflate mode *\/$/;"	m	struct:inflate_state	access:public
mode_state	src/contrib/inflate86/inffast.S	/^#define mode_state     0   \/* state->mode *\/$/;"	d
mode_state	src/contrib/masmx86/inffas32.asm	/^mode_state	 equ	0	;\/* state->mode	*\/$/;"	d
msg	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        string msg;$/;"	f	struct:DotZLib.ZStream	access:public
msg	src/gzguts.h	/^    char *msg;              \/* error message *\/$/;"	m	struct:__anon1	access:public
msg	src/test/minigzip.c	/^    char *msg;$/;"	m	struct:gzFile_s	file:	access:public
msg	src/zlib.h	/^    z_const char *msg;  \/* last error message, NULL if no error *\/$/;"	m	struct:z_stream_s	access:public
msg	zlib.h	/^    z_const char *msg;  \/* last error message, NULL if no error *\/$/;"	m	struct:z_stream_s	access:public
msg_strm	src/contrib/inflate86/inffast.S	/^#define msg_strm       24  \/* strm->msg *\/$/;"	d
mtime	src/contrib/untgz/untgz.c	/^  char mtime[12];               \/* 136 *\/$/;"	m	struct:tar_header	file:	access:public
myGetRDTSC32	src/contrib/testzlib/testzlib.c	/^void myGetRDTSC32(LARGE_INTEGER * pbeginTime64)$/;"	f	signature:(LARGE_INTEGER * pbeginTime64)
myalloc	src/test/example.c	/^void *myalloc OF((void *, unsigned, unsigned));$/;"	p	file:	signature:(void *, unsigned, unsigned)
myalloc	src/test/example.c	/^void *myalloc(q, n, m)$/;"	f
myalloc	src/test/minigzip.c	/^void *myalloc OF((void *, unsigned, unsigned));$/;"	p	file:	signature:(void *, unsigned, unsigned)
myalloc	src/test/minigzip.c	/^void *myalloc(q, n, m)$/;"	f
myfree	src/test/example.c	/^void myfree OF((void *, void *));$/;"	p	file:	signature:(void *, void *)
myfree	src/test/example.c	/^void myfree(void *q, void *p)$/;"	f	signature:(void *q, void *p)
myfree	src/test/minigzip.c	/^void myfree OF((void *, void *));$/;"	p	file:	signature:(void *, void *)
myfree	src/test/minigzip.c	/^void myfree(q, p)$/;"	f
mymkdir	src/contrib/minizip/miniunz.c	/^int mymkdir(dirname)$/;"	f
name	src/contrib/untgz/untgz.c	/^  char name[100];               \/*   0 *\/$/;"	m	struct:tar_header	file:	access:public
name	src/examples/gzappend.c	/^    char *name;                 \/* file name for error messages *\/$/;"	m	struct:__anon2	file:	access:public
name	src/examples/gzjoin.c	/^    char *name;             \/* name of file for error messages *\/$/;"	m	struct:__anon3	file:	access:public
name	src/zlib.h	/^    Bytef   *name;      \/* pointer to zero-terminated file name or Z_NULL *\/$/;"	m	struct:gz_header_s	access:public
name	zlib.h	/^    Bytef   *name;      \/* pointer to zero-terminated file name or Z_NULL *\/$/;"	m	struct:gz_header_s	access:public
name_max	src/zlib.h	/^    uInt    name_max;   \/* space at name (only when reading header) *\/$/;"	m	struct:gz_header_s	access:public
name_max	zlib.h	/^    uInt    name_max;   \/* space at name (only when reading header) *\/$/;"	m	struct:gz_header_s	access:public
nbytes_r	src/contrib/inflate86/inffast.S	/^#define nbytes_r %ecx$/;"	d
ncode	src/contrib/infback9/inflate9.h	/^    unsigned ncode;             \/* number of code length code lengths *\/$/;"	m	struct:inflate_state	access:public
ncode	src/inflate.h	/^    unsigned ncode;             \/* number of code length code lengths *\/$/;"	m	struct:inflate_state	access:public
ndist	src/contrib/infback9/inflate9.h	/^    unsigned ndist;             \/* number of distance code lengths *\/$/;"	m	struct:inflate_state	access:public
ndist	src/inflate.h	/^    unsigned ndist;             \/* number of distance code lengths *\/$/;"	m	struct:inflate_state	access:public
need_more	src/deflate.c	/^    need_more,      \/* block not completed, need more input or more output *\/$/;"	e	enum:__anon18	file:
new_ptr	src/zutil.c	/^    voidpf new_ptr;$/;"	m	struct:ptr_table_s	file:	access:public
next	src/contrib/blast/blast.c	/^    unsigned next;              \/* index of next write location in out[] *\/$/;"	m	struct:state	file:	access:public
next	src/contrib/infback9/inflate9.h	/^    code FAR *next;             \/* next available space in codes[] *\/$/;"	m	struct:inflate_state	access:public
next	src/contrib/untgz/untgz.c	/^  struct attr_item  *next;$/;"	m	struct:attr_item	typeref:struct:attr_item::attr_item	file:	access:public
next	src/examples/gzappend.c	/^    z_const unsigned char *next;    \/* next byte in buffer *\/$/;"	m	struct:__anon2	file:	access:public
next	src/examples/gzjoin.c	/^    unsigned char *next;    \/* next byte to read *\/$/;"	m	struct:__anon3	file:	access:public
next	src/inflate.h	/^    code FAR *next;             \/* next available space in codes[] *\/$/;"	m	struct:inflate_state	access:public
next	src/test/infcover.c	/^    struct mem_item *next;      \/* pointer to next item in list, or NULL *\/$/;"	m	struct:mem_item	typeref:struct:mem_item::mem_item	file:	access:public
next	src/zlib.h	/^    unsigned char *next;$/;"	m	struct:gzFile_s	access:public
next	zlib.h	/^    unsigned char *next;$/;"	m	struct:gzFile_s	access:public
next_datablock	src/contrib/minizip/zip.c	/^  struct linkedlist_datablock_internal_s* next_datablock;$/;"	m	struct:linkedlist_datablock_internal_s	typeref:struct:linkedlist_datablock_internal_s::linkedlist_datablock_internal_s	file:	access:public
next_in	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public IntPtr next_in;$/;"	f	struct:DotZLib.ZStream	access:public
next_in	src/zlib.h	/^    z_const Bytef *next_in;     \/* next input byte *\/$/;"	m	struct:z_stream_s	access:public
next_in	zlib.h	/^    z_const Bytef *next_in;     \/* next input byte *\/$/;"	m	struct:z_stream_s	access:public
next_in_strm	src/contrib/inflate86/inffast.S	/^#define next_in_strm   0   \/* strm->next_in *\/$/;"	d
next_out	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public IntPtr next_out;$/;"	f	struct:DotZLib.ZStream	access:public
next_out	src/zlib.h	/^    Bytef    *next_out; \/* next output byte should be put there *\/$/;"	m	struct:z_stream_s	access:public
next_out	zlib.h	/^    Bytef    *next_out; \/* next output byte should be put there *\/$/;"	m	struct:z_stream_s	access:public
next_out_strm	src/contrib/inflate86/inffast.S	/^#define next_out_strm  12  \/* strm->next_out *\/$/;"	d
next_ptr	src/zutil.c	/^local int next_ptr = 0;$/;"	v
nice_length	src/deflate.c	/^   ush nice_length; \/* quit search above this match length *\/$/;"	m	struct:config_s	file:	access:public
nice_match	src/contrib/gcc_gvmat64/gvmat64.S	/^#define nice_match       [ rcx + dsNiceMatch]$/;"	d
nice_match	src/contrib/masmx64/gvmat64.asm	/^nice_match      equ [ rcx + dsNiceMatch]$/;"	d
nice_match	src/contrib/masmx86/match686.asm	/^    nice_match      equ     dword ptr [esp+NbStack-60]$/;"	d
nice_match	src/deflate.h	/^    int nice_match; \/* Stop searching when current match exceeds this *\/$/;"	m	struct:internal_state	access:public
nicematch	src/contrib/amd64/amd64-match.S	/^#define nicematch	r14d$/;"	d
nicematch	src/contrib/asm686/match.S	/^#define	nicematch		24	\/* a good enough match size	*\/$/;"	d
nicematch	src/contrib/gcc_gvmat64/gvmat64.S	/^#define nicematch         (rsp + 16 - LocalVarsSize)$/;"	d
nicematch	src/contrib/masmx64/gvmat64.asm	/^ nicematch       equ  (rsp + 16 - LocalVarsSize) ; a good enough match size$/;"	d
nicematch	src/contrib/masmx64/gvmat64.asm	/^nicematch equ nice_match$/;"	d
nicematch	src/contrib/masmx86/match686.asm	/^nicematch   equ  esp + 24   ; a good enough match size$/;"	d
nlen	src/contrib/infback9/inflate9.h	/^    unsigned nlen;              \/* number of length code lengths *\/$/;"	m	struct:inflate_state	access:public
nlen	src/inflate.h	/^    unsigned nlen;              \/* number of length code lengths *\/$/;"	m	struct:inflate_state	access:public
notlifo	src/test/infcover.c	/^    int notlifo, rogue;         \/* counts of non-LIFO frees and rogue frees *\/$/;"	m	struct:mem_zone	file:	access:public
num	src/examples/enough.c	/^local big_t *num;       \/* saved results array for code counting *\/$/;"	v
num_file	src/contrib/minizip/unzip.c	/^    ZPOS64_T num_file;             \/* number of the current file in the zipfile*\/$/;"	m	struct:__anon8	file:	access:public
num_of_file	src/contrib/minizip/unzip.h	/^    ZPOS64_T num_of_file;            \/* # of file *\/$/;"	m	struct:unz64_file_pos_s	access:public
num_of_file	src/contrib/minizip/unzip.h	/^    uLong num_of_file;            \/* # of file *\/$/;"	m	struct:unz_file_pos_s	access:public
number_entry	src/contrib/minizip/unzip.h	/^    ZPOS64_T number_entry;         \/* total number of entries in$/;"	m	struct:unz_global_info64_s	access:public
number_entry	src/contrib/minizip/unzip.h	/^    uLong number_entry;         \/* total number of entries in$/;"	m	struct:unz_global_info_s	access:public
number_entry	src/contrib/minizip/zip.c	/^    ZPOS64_T number_entry;$/;"	m	struct:__anon10	file:	access:public
offset	src/inflate.h	/^    unsigned offset;            \/* distance back to copy string from *\/$/;"	m	struct:inflate_state	access:public
offset_central_dir	src/contrib/minizip/unzip.c	/^    ZPOS64_T offset_central_dir;   \/* offset of start of central directory with$/;"	m	struct:__anon8	file:	access:public
offset_curfile	src/contrib/minizip/unzip.c	/^    ZPOS64_T offset_curfile;\/* relative offset of local header 8 bytes *\/$/;"	m	struct:unz_file_info64_internal_s	file:	access:public
offset_local_extrafield	src/contrib/minizip/unzip.c	/^    ZPOS64_T offset_local_extrafield;\/* offset of the local extra field *\/$/;"	m	struct:__anon7	file:	access:public
op	src/contrib/infback9/inftree9.h	/^    unsigned char op;           \/* operation, extra bits, table bits *\/$/;"	m	struct:__anon12	access:public
op	src/inftrees.h	/^    unsigned char op;           \/* operation, extra bits, table bits *\/$/;"	m	struct:__anon16	access:public
opaque	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        uint opaque;$/;"	f	struct:DotZLib.ZStream	access:public
opaque	src/contrib/minizip/ioapi.h	/^    voidpf              opaque;$/;"	m	struct:zlib_filefunc64_def_s	access:public
opaque	src/contrib/minizip/ioapi.h	/^    voidpf              opaque;$/;"	m	struct:zlib_filefunc_def_s	access:public
opaque	src/zlib.h	/^    voidpf     opaque;  \/* private data object passed to zalloc and zfree *\/$/;"	m	struct:z_stream_s	access:public
opaque	zlib.h	/^    voidpf     opaque;  \/* private data object passed to zalloc and zfree *\/$/;"	m	struct:z_stream_s	access:public
open	src/contrib/iostream/zfstream.cpp	/^gzfilebuf *gzfilebuf::open( const char *name,$/;"	f	class:gzfilebuf	signature:( const char *name, int io_mode )
open	src/contrib/iostream/zfstream.cpp	/^void gzfilestream_common::open( const char *name, int io_mode ) {$/;"	f	class:gzfilestream_common	signature:( const char *name, int io_mode )
open	src/contrib/iostream/zfstream.h	/^  gzfilebuf *open( const char *name, int io_mode );$/;"	p	class:gzfilebuf	access:public	signature:( const char *name, int io_mode )
open	src/contrib/iostream/zfstream.h	/^  void open( const char *name, int io_mode );$/;"	p	class:gzfilestream_common	access:public	signature:( const char *name, int io_mode )
open	src/contrib/iostream2/zstream.h	/^        void open(FILE* fp) {$/;"	f	class:izstream	access:public	signature:(FILE* fp)
open	src/contrib/iostream2/zstream.h	/^        void open(FILE* fp, int level = Z_DEFAULT_COMPRESSION) {$/;"	f	class:ozstream	access:public	signature:(FILE* fp, int level = Z_DEFAULT_COMPRESSION)
open	src/contrib/iostream2/zstream.h	/^        void open(const char* name) {$/;"	f	class:izstream	access:public	signature:(const char* name)
open	src/contrib/iostream2/zstream.h	/^        void open(const char* name, int level = Z_DEFAULT_COMPRESSION) {$/;"	f	class:ozstream	access:public	signature:(const char* name, int level = Z_DEFAULT_COMPRESSION)
open	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::open(const char *name,$/;"	f	class:gzfilebuf	signature:(const char *name, std::ios_base::openmode mode)
open	src/contrib/iostream3/zfstream.cc	/^gzifstream::open(const char* name,$/;"	f	class:gzifstream	signature:(const char* name, std::ios_base::openmode mode)
open	src/contrib/iostream3/zfstream.cc	/^gzofstream::open(const char* name,$/;"	f	class:gzofstream	signature:(const char* name, std::ios_base::openmode mode)
open	src/contrib/iostream3/zfstream.h	/^  open(const char* name,$/;"	p	class:gzfilebuf	access:public	signature:(const char* name, std::ios_base::openmode mode)
open	src/contrib/iostream3/zfstream.h	/^  open(const char* name,$/;"	p	class:gzifstream	access:public	signature:(const char* name, std::ios_base::openmode mode = std::ios_base::in)
open	src/contrib/iostream3/zfstream.h	/^  open(const char* name,$/;"	p	class:gzofstream	access:public	signature:(const char* name, std::ios_base::openmode mode = std::ios_base::out)
open	src/gzguts.h	39;"	d
open_mode	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::open_mode(std::ios_base::openmode mode,$/;"	f	class:gzfilebuf	signature:(std::ios_base::openmode mode, char* c_mode) const
open_mode	src/contrib/iostream3/zfstream.h	/^  open_mode(std::ios_base::openmode mode,$/;"	p	class:gzfilebuf	access:protected	signature:(std::ios_base::openmode mode, char* c_mode) const
operator <	src/contrib/iostream2/zstream.h	/^inline ozstream& operator<(ozstream& zs, char* const& x) {$/;"	f	signature:(ozstream& zs, char* const& x)
operator <	src/contrib/iostream2/zstream.h	/^inline ozstream& operator<(ozstream& zs, const T& x) {$/;"	f	signature:(ozstream& zs, const T& x)
operator <	src/contrib/iostream2/zstream.h	/^inline ozstream& operator<(ozstream& zs, const char* x) {$/;"	f	signature:(ozstream& zs, const char* x)
operator <<	src/contrib/iostream/zfstream.h	/^  friend gzofstream &operator<<(gzofstream &, const gzomanip<T> &);$/;"	p	class:gzomanip	access:friend	signature:(gzofstream &, const gzomanip<T> &)
operator <<	src/contrib/iostream/zfstream.h	/^template<class T> gzofstream &operator<<(gzofstream &s, const gzomanip<T> &m)$/;"	f	signature:(gzofstream &s, const gzomanip<T> &m)
operator <<	src/contrib/iostream2/zstream.h	/^inline ostream& operator<<(ozstream& zs, const T& x) {$/;"	f	signature:(ozstream& zs, const T& x)
operator <<	src/contrib/iostream3/zfstream.h	/^      operator<<(gzofstream&,$/;"	p	class:gzomanip2	access:friend	signature:(gzofstream&, const gzomanip2<Ta,Tb>&)
operator <<	src/contrib/iostream3/zfstream.h	/^  operator<<(gzofstream& s, const gzomanip2<T1,T2>& m)$/;"	f	signature:(gzofstream& s, const gzomanip2<T1,T2>& m)
operator >	src/contrib/iostream2/zstream.h	/^inline izstream& operator>(izstream& zs, T& x) {$/;"	f	signature:(izstream& zs, T& x)
operator >	src/contrib/iostream2/zstream.h	/^inline izstream& operator>(izstream& zs, char* x) {$/;"	f	signature:(izstream& zs, char* x)
opt_len	src/deflate.h	/^    ulg opt_len;        \/* bit length of current block with optimal trees *\/$/;"	m	struct:internal_state	access:public
org_ptr	src/zutil.c	/^    voidpf org_ptr;$/;"	m	struct:ptr_table_s	file:	access:public
os	src/contrib/iostream2/zstream.h	/^        ostream& os() {$/;"	f	class:ozstream	access:public	signature:()
os	src/zlib.h	/^    int     os;         \/* operating system *\/$/;"	m	struct:gz_header_s	access:public
os	zlib.h	/^    int     os;         \/* operating system *\/$/;"	m	struct:gz_header_s	access:public
os_flush	src/contrib/iostream2/zstream.h	/^        void os_flush() {$/;"	f	class:ozstream	access:public	signature:()
out	src/contrib/blast/blast.c	/^    unsigned char out[MAXWIN];  \/* output buffer and sliding window *\/$/;"	m	struct:state	file:	access:public
out	src/contrib/inflate86/inffast.S	/^#define out            60  \/* unsigned char* *\/$/;"	d
out	src/contrib/masmx64/inffas8664.c	/^\/* 32   16 *\/ unsigned char FAR *out;   \/* edi rdi  local strm->next_out *\/$/;"	m	struct:inffast_ar	file:	access:public
out	src/contrib/puff/puff.c	/^    unsigned char *out;         \/* output buffer *\/$/;"	m	struct:state	file:	access:public
out	src/examples/gun.c	/^local int out(void *out_desc, unsigned char *buf, unsigned len)$/;"	f	signature:(void *out_desc, unsigned char *buf, unsigned len)
out	src/examples/zran.c	/^    off_t out;          \/* corresponding offset in uncompressed data *\/$/;"	m	struct:point	file:	access:public
out	src/gzguts.h	/^    unsigned char *out;     \/* output buffer (double-sized when reading) *\/$/;"	m	struct:__anon1	access:public
out_func	src/zconf.h	140;"	d
out_func	src/zlib.h	/^typedef int (*out_func) OF((void FAR *, unsigned char FAR *, unsigned));$/;"	t
out_func	zconf.h	140;"	d
out_func	zlib.h	/^typedef int (*out_func) OF((void FAR *, unsigned char FAR *, unsigned));$/;"	t
out_r	src/contrib/inflate86/inffast.S	/^#define out_r      %edi$/;"	d
outbuf	src/examples/gun.c	/^unsigned char outbuf[SIZE];             \/* output buffer *\/$/;"	v
outcnt	src/contrib/puff/puff.c	/^    unsigned long outcnt;       \/* bytes written to out so far *\/$/;"	m	struct:state	file:	access:public
outd	src/examples/gun.c	/^struct outd {$/;"	s	file:
outd::check	src/examples/gun.c	/^    int check;                  \/* true if checking crc and total *\/$/;"	m	struct:outd	file:	access:public
outd::crc	src/examples/gun.c	/^    unsigned long crc;$/;"	m	struct:outd	file:	access:public
outd::outfile	src/examples/gun.c	/^    int outfile;$/;"	m	struct:outd	file:	access:public
outd::total	src/examples/gun.c	/^    unsigned long total;$/;"	m	struct:outd	file:	access:public
outf	src/contrib/blast/blast.c	/^local int outf(void *how, unsigned char *buf, unsigned len)$/;"	f	signature:(void *how, unsigned char *buf, unsigned len)
outfile	src/examples/gun.c	/^    int outfile;$/;"	m	struct:outd	file:	access:public
outfun	src/contrib/blast/blast.c	/^    blast_out outfun;           \/* output function provided by user *\/$/;"	m	struct:state	file:	access:public
outhow	src/contrib/blast/blast.c	/^    void *outhow;               \/* opaque information passed to outfun() *\/$/;"	m	struct:state	file:	access:public
outlen	src/contrib/puff/puff.c	/^    unsigned long outlen;       \/* available space at out *\/$/;"	m	struct:state	file:	access:public
overflow	src/contrib/iostream/zfstream.cpp	/^int gzfilebuf::overflow( int c ) {$/;"	f	class:gzfilebuf	signature:( int c )
overflow	src/contrib/iostream/zfstream.h	/^  virtual int overflow( int = EOF );$/;"	p	class:gzfilebuf	access:protected	signature:( int = EOF )
overflow	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::overflow(int_type c)$/;"	f	class:gzfilebuf	signature:(int_type c)
overflow	src/contrib/iostream3/zfstream.h	/^  overflow(int_type c = traits_type::eof());$/;"	p	class:gzfilebuf	access:protected	signature:(int_type c = traits_type::eof())
own_buffer	src/contrib/iostream3/zfstream.h	/^  bool own_buffer;$/;"	m	class:gzfilebuf	access:private
own_fd	src/contrib/iostream3/zfstream.h	/^  bool own_fd;$/;"	m	class:gzfilebuf	access:private
own_file_descriptor	src/contrib/iostream/zfstream.h	/^  short own_file_descriptor;$/;"	m	class:gzfilebuf	access:private
ozstream	src/contrib/iostream2/zstream.h	/^        ozstream() : m_fp(0), m_os(0) {$/;"	f	class:ozstream	access:public	signature:()
ozstream	src/contrib/iostream2/zstream.h	/^        ozstream(FILE* fp, int level = Z_DEFAULT_COMPRESSION)$/;"	f	class:ozstream	access:public	signature:(FILE* fp, int level = Z_DEFAULT_COMPRESSION)
ozstream	src/contrib/iostream2/zstream.h	/^        ozstream(const char* name, int level = Z_DEFAULT_COMPRESSION)$/;"	f	class:ozstream	access:public	signature:(const char* name, int level = Z_DEFAULT_COMPRESSION)
ozstream	src/contrib/iostream2/zstream.h	/^class ozstream$/;"	c
ozstream::close	src/contrib/iostream2/zstream.h	/^        int close() {$/;"	f	class:ozstream	access:public	signature:()
ozstream::error	src/contrib/iostream2/zstream.h	/^        const char* error(int* errnum) {$/;"	f	class:ozstream	access:public	signature:(int* errnum)
ozstream::flush	src/contrib/iostream2/zstream.h	/^        int flush(int _flush) {$/;"	f	class:ozstream	access:public	signature:(int _flush)
ozstream::fp	src/contrib/iostream2/zstream.h	/^        gzFile fp() { return m_fp; }$/;"	f	class:ozstream	access:public	signature:()
ozstream::m_fp	src/contrib/iostream2/zstream.h	/^        gzFile m_fp;$/;"	m	class:ozstream	access:private
ozstream::m_os	src/contrib/iostream2/zstream.h	/^        ostrstream* m_os;$/;"	m	class:ozstream	access:private
ozstream::open	src/contrib/iostream2/zstream.h	/^        void open(FILE* fp, int level = Z_DEFAULT_COMPRESSION) {$/;"	f	class:ozstream	access:public	signature:(FILE* fp, int level = Z_DEFAULT_COMPRESSION)
ozstream::open	src/contrib/iostream2/zstream.h	/^        void open(const char* name, int level = Z_DEFAULT_COMPRESSION) {$/;"	f	class:ozstream	access:public	signature:(const char* name, int level = Z_DEFAULT_COMPRESSION)
ozstream::os	src/contrib/iostream2/zstream.h	/^        ostream& os() {$/;"	f	class:ozstream	access:public	signature:()
ozstream::os_flush	src/contrib/iostream2/zstream.h	/^        void os_flush() {$/;"	f	class:ozstream	access:public	signature:()
ozstream::ozstream	src/contrib/iostream2/zstream.h	/^        ozstream() : m_fp(0), m_os(0) {$/;"	f	class:ozstream	access:public	signature:()
ozstream::ozstream	src/contrib/iostream2/zstream.h	/^        ozstream(FILE* fp, int level = Z_DEFAULT_COMPRESSION)$/;"	f	class:ozstream	access:public	signature:(FILE* fp, int level = Z_DEFAULT_COMPRESSION)
ozstream::ozstream	src/contrib/iostream2/zstream.h	/^        ozstream(const char* name, int level = Z_DEFAULT_COMPRESSION)$/;"	f	class:ozstream	access:public	signature:(const char* name, int level = Z_DEFAULT_COMPRESSION)
ozstream::write	src/contrib/iostream2/zstream.h	/^        int write(const void* buf, size_t len) {$/;"	f	class:ozstream	access:public	signature:(const void* buf, size_t len)
ozstream::~ozstream	src/contrib/iostream2/zstream.h	/^        ~ozstream() {$/;"	f	class:ozstream	access:public	signature:()
paque	src/contrib/pascal/zlibpas.pas	/^  alloc_func = function(opaque: Pointer; items, size: Integer): Pointer;$/;"	f
paque	src/contrib/pascal/zlibpas.pas	/^  free_func  = procedure(opaque, address: Pointer);$/;"	p
paque	src/contrib/pascal/zlibpas.pas	/^  in_func    = function(opaque: Pointer; var buf: PByte): Integer;$/;"	f
paque	src/contrib/pascal/zlibpas.pas	/^  out_func   = function(opaque: Pointer; buf: PByte; size: Integer): Integer;$/;"	f
partcompress	src/examples/fitblk.c	/^local int partcompress(FILE *in, z_streamp def)$/;"	f	signature:(FILE *in, z_streamp def)
past	src/gzguts.h	/^    int past;               \/* true if read requested past end *\/$/;"	m	struct:__anon1	access:public
path	src/examples/gzlog.c	/^    char *path;     \/* allocated path, e.g. "\/var\/log\/foo" or "foo" *\/$/;"	m	struct:log	file:	access:public
path	src/gzguts.h	/^    char *path;             \/* path or fd for error messages *\/$/;"	m	struct:__anon1	access:public
pcrc_32_tab	src/contrib/minizip/unzip.c	/^    const z_crc_t* pcrc_32_tab;$/;"	m	struct:__anon8	file:	access:public
pcrc_32_tab	src/contrib/minizip/zip.c	/^    const z_crc_t* pcrc_32_tab;$/;"	m	struct:__anon9	file:	access:public
pending	src/deflate.h	/^    uInt   pending;      \/* nb of bytes in the pending buffer *\/$/;"	m	struct:internal_state	access:public
pending_buf	src/deflate.h	/^    Bytef *pending_buf;  \/* output still pending *\/$/;"	m	struct:internal_state	access:public
pending_buf_size	src/deflate.h	/^    ulg   pending_buf_size; \/* size of pending_buf *\/$/;"	m	struct:internal_state	access:public
pending_out	src/deflate.h	/^    Bytef *pending_out;  \/* next pending byte to output to the stream *\/$/;"	m	struct:internal_state	access:public
perror	src/test/minigzip.c	68;"	d	file:
pfile_in_zip_read	src/contrib/minizip/unzip.c	/^    file_in_zip64_read_info_s* pfile_in_zip_read; \/* structure about the current$/;"	m	struct:__anon8	file:	access:public
point	src/examples/zran.c	/^struct point {$/;"	s	file:
point::bits	src/examples/zran.c	/^    int bits;           \/* number of bits (1-7) from byte at in - 1, or 0 *\/$/;"	m	struct:point	file:	access:public
point::in	src/examples/zran.c	/^    off_t in;           \/* offset in input file of first full byte *\/$/;"	m	struct:point	file:	access:public
point::out	src/examples/zran.c	/^    off_t out;          \/* corresponding offset in uncompressed data *\/$/;"	m	struct:point	file:	access:public
point::window	src/examples/zran.c	/^    unsigned char window[WINSIZE];  \/* preceding 32K of uncompressed data *\/$/;"	m	struct:point	file:	access:public
pos	src/zlib.h	/^    z_off64_t pos;$/;"	m	struct:gzFile_s	access:public
pos	zlib.h	/^    z_off64_t pos;$/;"	m	struct:gzFile_s	access:public
pos_in_buffered_data	src/contrib/minizip/zip.c	/^    uInt pos_in_buffered_data;  \/* last written byte in buffered_data *\/$/;"	m	struct:__anon9	file:	access:public
pos_in_central_dir	src/contrib/minizip/unzip.c	/^    ZPOS64_T pos_in_central_dir;   \/* pos of the current file in the central dir*\/$/;"	m	struct:__anon8	file:	access:public
pos_in_zip_directory	src/contrib/minizip/unzip.h	/^    ZPOS64_T pos_in_zip_directory;   \/* offset in zip file directory *\/$/;"	m	struct:unz64_file_pos_s	access:public
pos_in_zip_directory	src/contrib/minizip/unzip.h	/^    uLong pos_in_zip_directory;   \/* offset in zip file directory *\/$/;"	m	struct:unz_file_pos_s	access:public
pos_in_zipfile	src/contrib/minizip/unzip.c	/^    ZPOS64_T pos_in_zipfile;       \/* position in byte on the zipfile, for fseek*\/$/;"	m	struct:__anon7	file:	access:public
pos_local_extrafield	src/contrib/minizip/unzip.c	/^    ZPOS64_T pos_local_extrafield;   \/* position in the local extra field in read*\/$/;"	m	struct:__anon7	file:	access:public
pos_local_header	src/contrib/minizip/zip.c	/^    ZPOS64_T pos_local_header;     \/* offset of the local header of the file$/;"	m	struct:__anon9	file:	access:public
pos_zip64extrainfo	src/contrib/minizip/zip.c	/^    ZPOS64_T pos_zip64extrainfo;$/;"	m	struct:__anon9	file:	access:public
pqdownheap	src/trees.c	/^local void pqdownheap     OF((deflate_state *s, ct_data *tree, int k));$/;"	p	file:	signature:(deflate_state *s, ct_data *tree, int k)
pqdownheap	src/trees.c	/^local void pqdownheap(s, tree, k)$/;"	f
pqremove	src/trees.c	432;"	d	file:
prefix	src/contrib/untgz/untgz.c	/^  char prefix[155];             \/* 345 *\/$/;"	m	struct:tar_header	file:	access:public
prefix	src/examples/gun.c	/^unsigned short prefix[65536];           \/* index to LZW prefix string *\/$/;"	v
prev	src/contrib/amd64/amd64-match.S	/^#define prev		rcx$/;"	d
prev	src/contrib/masmx86/match686.asm	/^    prev            equ     dword ptr [esp+NbStack-44]$/;"	d
prev	src/deflate.h	/^    Posf *prev;$/;"	m	struct:internal_state	access:public
prev_ad	src/contrib/gcc_gvmat64/gvmat64.S	/^#define prev_ad          [ rcx + dsPrev]$/;"	d
prev_ad	src/contrib/masmx64/gvmat64.asm	/^prev_ad         equ [ rcx + dsPrev]$/;"	d
prev_ad	src/contrib/masmx64/gvmat64.asm	/^prev_ad equ OFFSET prev$/;"	d
prev_length	src/contrib/gcc_gvmat64/gvmat64.S	/^#define prev_length      [ rcx + dsPrevLen]$/;"	d
prev_length	src/contrib/masmx64/gvmat64.asm	/^prev_length     equ [ rcx + dsPrevLen]$/;"	d
prev_length	src/deflate.h	/^    uInt prev_length;$/;"	m	struct:internal_state	access:public
prev_match	src/deflate.h	/^    IPos prev_match;             \/* previous match *\/$/;"	m	struct:internal_state	access:public
prog	src/contrib/untgz/untgz.c	/^char *prog;$/;"	v
prog	src/test/minigzip.c	/^char *prog;$/;"	v
ptr	src/test/infcover.c	/^    void *ptr;                  \/* pointer to allocated memory *\/$/;"	m	struct:mem_item	file:	access:public
ptr_table	src/zutil.c	/^} ptr_table;$/;"	t	typeref:struct:ptr_table_s	file:
ptr_table_s	src/zutil.c	/^typedef struct ptr_table_s {$/;"	s	file:
ptr_table_s::new_ptr	src/zutil.c	/^    voidpf new_ptr;$/;"	m	struct:ptr_table_s	file:	access:public
ptr_table_s::org_ptr	src/zutil.c	/^    voidpf org_ptr;$/;"	m	struct:ptr_table_s	file:	access:public
ptrdiff_t	src/zutil.h	/^       typedef int ptrdiff_t;$/;"	t
ptrdiff_t	src/zutil.h	/^   typedef long ptrdiff_t;  \/* guess -- will be caught if guess is wrong *\/$/;"	t
ptrdiff_t	zutil.h	/^       typedef int ptrdiff_t;$/;"	t
ptrdiff_t	zutil.h	/^   typedef long ptrdiff_t;  \/* guess -- will be caught if guess is wrong *\/$/;"	t
puff	src/contrib/puff/puff.c	/^int puff(unsigned char *dest,           \/* pointer to destination pointer *\/$/;"	f	signature:(unsigned char *dest, unsigned long *destlen, const unsigned char *source, unsigned long *sourcelen)
puff	src/contrib/puff/puff.h	/^int puff(unsigned char *dest,           \/* pointer to destination pointer *\/$/;"	p	signature:(unsigned char *dest, unsigned long *destlen, const unsigned char *source, unsigned long *sourcelen)
pull	src/test/infcover.c	/^local unsigned pull(void *desc, unsigned char **buf)$/;"	f	signature:(void *desc, unsigned char **buf)
push	src/test/infcover.c	/^local int push(void *desc, unsigned char *buf, unsigned len)$/;"	f	signature:(void *desc, unsigned char *buf, unsigned len)
push_attr	src/contrib/untgz/untgz.c	/^void push_attr          OF((struct attr_item **, char *, int, time_t));$/;"	p	file:	signature:(struct attr_item **, char *, int, time_t)
push_attr	src/contrib/untgz/untgz.c	/^void push_attr(struct attr_item **list,char *fname,int mode,time_t time)$/;"	f	signature:(struct attr_item **list,char *fname,int mode,time_t time)
pushebp	src/contrib/masmx86/match686.asm	/^    pushebp         equ     dword ptr[esp+NbStack-12]$/;"	d
pushebx	src/contrib/masmx86/match686.asm	/^    pushebx         equ     dword ptr[esp+NbStack-24]$/;"	d
pushedi	src/contrib/masmx86/match686.asm	/^    pushedi         equ     dword ptr[esp+NbStack-16]$/;"	d
pushesi	src/contrib/masmx86/match686.asm	/^    pushesi         equ     dword ptr[esp+NbStack-20]$/;"	d
put4	src/examples/gzjoin.c	/^local void put4(unsigned long val, FILE *out)$/;"	f	signature:(unsigned long val, FILE *out)
putShortMSB	src/deflate.c	/^local void putShortMSB    OF((deflate_state *s, uInt b));$/;"	p	file:	signature:(deflate_state *s, uInt b)
putShortMSB	src/deflate.c	/^local void putShortMSB (s, b)$/;"	f
put_byte	src/deflate.h	278;"	d
put_short	src/trees.c	176;"	d	file:
pwinerror	src/test/minigzip.c	/^static void pwinerror (s)$/;"	f	file:
quit	src/examples/fitblk.c	/^local void quit(char *why)$/;"	f	signature:(char *why)
raw	src/contrib/minizip/unzip.c	/^    int   raw;$/;"	m	struct:__anon7	file:	access:public
raw	src/contrib/minizip/zip.c	/^    int  raw;                   \/* 1 for directly writing raw data *\/$/;"	m	struct:__anon9	file:	access:public
rdbuf	src/contrib/iostream/zfstream.cpp	/^gzfilebuf *gzfilestream_common::rdbuf()$/;"	f	class:gzfilestream_common	signature:()
rdbuf	src/contrib/iostream/zfstream.h	/^  gzfilebuf *rdbuf();$/;"	p	class:gzfilestream_common	access:private	signature:()
rdbuf	src/contrib/iostream3/zfstream.h	/^  rdbuf() const$/;"	f	class:gzifstream	access:public	signature:() const
rdbuf	src/contrib/iostream3/zfstream.h	/^  rdbuf() const$/;"	f	class:gzofstream	access:public	signature:() const
read	src/contrib/iostream2/zstream.h	/^        int read(void* buf, size_t len) {$/;"	f	class:izstream	access:public	signature:(void* buf, size_t len)
read	src/contrib/iostream2/zstream.h	/^inline int read(izstream& zs, T* x, Items items) {$/;"	f	signature:(izstream& zs, T* x, Items items)
read	src/gzguts.h	40;"	d
read1	src/examples/gzappend.c	198;"	d	file:
read4	src/examples/gzappend.c	/^unsigned long read4(file *in)$/;"	f	signature:(file *in)
read_buf	src/deflate.c	/^local int read_buf        OF((z_streamp strm, Bytef *buf, unsigned size));$/;"	p	file:	signature:(z_streamp strm, Bytef *buf, unsigned size)
read_buf	src/deflate.c	/^local int read_buf(strm, buf, size)$/;"	f
read_buffer	src/contrib/minizip/unzip.c	/^    char  *read_buffer;         \/* internal buffer for compressed data *\/$/;"	m	struct:__anon7	file:	access:public
read_string	src/contrib/iostream2/zstream.h	/^inline char* read_string(izstream& zs) {$/;"	f	signature:(izstream& zs)
readin	src/examples/gzappend.c	/^local int readin(file *in)$/;"	f	signature:(file *in)
readmore	src/examples/gzappend.c	/^local int readmore(file *in)$/;"	f	signature:(file *in)
recompress	src/examples/fitblk.c	/^local int recompress(z_streamp inf, z_streamp def)$/;"	f	signature:(z_streamp inf, z_streamp def)
reserved	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        uint reserved;$/;"	f	struct:DotZLib.ZStream	access:public
reserved	src/zlib.h	/^    uLong   reserved;   \/* reserved for future use *\/$/;"	m	struct:z_stream_s	access:public
reserved	zlib.h	/^    uLong   reserved;   \/* reserved for future use *\/$/;"	m	struct:z_stream_s	access:public
resetOutput	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        protected void resetOutput()$/;"	m	class:DotZLib.CodecBase	access:protected	signature:()
rest_read_compressed	src/contrib/minizip/unzip.c	/^    ZPOS64_T rest_read_compressed; \/* number of byte to be decompressed *\/$/;"	m	struct:__anon7	file:	access:public
rest_read_uncompressed	src/contrib/minizip/unzip.c	/^    ZPOS64_T rest_read_uncompressed;\/*number of byte to be obtained after decomp*\/$/;"	m	struct:__anon7	file:	access:public
restore_attr	src/contrib/untgz/untgz.c	/^void restore_attr       OF((struct attr_item **));$/;"	p	file:	signature:(struct attr_item **)
restore_attr	src/contrib/untgz/untgz.c	/^void restore_attr(struct attr_item **list)$/;"	f	signature:(struct attr_item **list)
rogue	src/test/infcover.c	/^    int notlifo, rogue;         \/* counts of non-LIFO frees and rogue frees *\/$/;"	m	struct:mem_zone	file:	access:public
root	src/examples/enough.c	/^local int root;         \/* size of base code table in bits *\/$/;"	v
rotate	src/examples/gzappend.c	/^local void rotate(unsigned char *list, unsigned len, unsigned rot)$/;"	f	signature:(unsigned char *list, unsigned len, unsigned rot)
sane	src/inflate.h	/^    int sane;                   \/* if false, allow invalid distance too far *\/$/;"	m	struct:inflate_state	access:public
save_r12	src/contrib/amd64/amd64-match.S	/^#define save_r12        (56-LocalVarsSize)(%rsp)$/;"	d
save_r12	src/contrib/gcc_gvmat64/gvmat64.S	/^#define save_r12        (rsp + 56 - LocalVarsSize)$/;"	d
save_r12	src/contrib/masmx64/gvmat64.asm	/^save_r12        equ  rsp + 56 - LocalVarsSize$/;"	d
save_r13	src/contrib/amd64/amd64-match.S	/^#define save_r13        (64-LocalVarsSize)(%rsp)$/;"	d
save_r13	src/contrib/gcc_gvmat64/gvmat64.S	/^#define save_r13        (rsp + 64 - LocalVarsSize)$/;"	d
save_r13	src/contrib/masmx64/gvmat64.asm	/^save_r13        equ  rsp + 64 - LocalVarsSize$/;"	d
save_r14	src/contrib/amd64/amd64-match.S	/^#define save_r14        (24-LocalVarsSize)(%rsp)$/;"	d
save_r14	src/contrib/gcc_gvmat64/gvmat64.S	/^#define save_r14        (rsp + 72 - LocalVarsSize)$/;"	d
save_r15	src/contrib/amd64/amd64-match.S	/^#define save_r15        (80-LocalVarsSize)(%rsp)$/;"	d
save_r15	src/contrib/gcc_gvmat64/gvmat64.S	/^#define save_r15        (rsp + 80 - LocalVarsSize)$/;"	d
save_rbp	src/contrib/gcc_gvmat64/gvmat64.S	/^#define save_rbp        (rsp + 48 - LocalVarsSize)$/;"	d
save_rbp	src/contrib/masmx64/gvmat64.asm	/^save_rbp        equ  rsp + 48 - LocalVarsSize$/;"	d
save_rbx	src/contrib/amd64/amd64-match.S	/^#define save_rbx        (40-LocalVarsSize)(%rsp)$/;"	d
save_rbx	src/contrib/gcc_gvmat64/gvmat64.S	/^#define save_rbx        (rsp + 40 - LocalVarsSize)$/;"	d
save_rbx	src/contrib/masmx64/gvmat64.asm	/^save_rbx        equ  rsp + 40 - LocalVarsSize$/;"	d
save_rdi	src/contrib/gcc_gvmat64/gvmat64.S	/^#define save_rdi        (rsp + 24 - LocalVarsSize)$/;"	d
save_rdi	src/contrib/masmx64/gvmat64.asm	/^save_rdi        equ  rsp + 24 - LocalVarsSize$/;"	d
save_rsi	src/contrib/amd64/amd64-match.S	/^#define save_rsi        (32-LocalVarsSize)(%rsp)$/;"	d
save_rsi	src/contrib/gcc_gvmat64/gvmat64.S	/^#define save_rsi        (rsp + 32 - LocalVarsSize)$/;"	d
save_rsi	src/contrib/masmx64/gvmat64.asm	/^save_rsi        equ  rsp + 32 - LocalVarsSize$/;"	d
sb	src/contrib/iostream3/zfstream.h	/^  gzfilebuf sb;$/;"	m	class:gzifstream	access:private
sb	src/contrib/iostream3/zfstream.h	/^  gzfilebuf sb;$/;"	m	class:gzofstream	access:private
scan	src/contrib/amd64/amd64-match.S	/^#define scan		r13$/;"	d
scan	src/contrib/asm686/match.S	/^#define	scan			32	\/* ptr to string wanting match	*\/$/;"	d
scan	src/contrib/masmx86/match686.asm	/^    scan            equ     dword ptr [esp+NbStack-64]$/;"	d
scan	src/contrib/masmx86/match686.asm	/^scan        equ  esp + 32   ; ptr to string wanting match$/;"	d
scan_start	src/contrib/masmx86/match686.asm	/^    scan_start      equ      word ptr [esp+NbStack-48]$/;"	d
scan_tree	src/trees.c	/^local void scan_tree      OF((deflate_state *s, ct_data *tree, int max_code));$/;"	p	file:	signature:(deflate_state *s, ct_data *tree, int max_code)
scan_tree	src/trees.c	/^local void scan_tree (s, tree, max_code)$/;"	f
scanalign	src/contrib/amd64/amd64-match.S	/^#define	scanalign	r9$/;"	d
scanalign	src/contrib/asm686/match.S	/^#define	scanalign		20	\/* dword-misalignment of string	*\/$/;"	d
scanalign	src/contrib/masmx86/match686.asm	/^scanalign   equ  esp + 20   ; dword-misalignment of string$/;"	d
scanalignd	src/contrib/amd64/amd64-match.S	/^#define	scanalignd	r9d$/;"	d
scanend	src/contrib/amd64/amd64-match.S	/^#define	scanend		ebx$/;"	d
scanend	src/contrib/asm686/match.S	/^#define	scanend			12	\/* last two bytes of string	*\/$/;"	d
scanend	src/contrib/masmx86/match686.asm	/^scanend     equ  esp + 12   ; last two bytes of string$/;"	d
scanendw	src/contrib/amd64/amd64-match.S	/^#define	scanendw	bx$/;"	d
scanstart	src/contrib/amd64/amd64-match.S	/^#define	scanstart	r12d$/;"	d
scanstart	src/contrib/asm686/match.S	/^#define	scanstart		16	\/* first two bytes of string	*\/$/;"	d
scanstart	src/contrib/masmx86/match686.asm	/^scanstart   equ  esp + 16   ; first two bytes of string$/;"	d
scanstartw	src/contrib/amd64/amd64-match.S	/^#define	scanstartw	r12w$/;"	d
seek	src/gzguts.h	/^    int seek;               \/* true if seek request pending *\/$/;"	m	struct:__anon1	access:public
seek64_file_func	src/contrib/minizip/ioapi.h	/^typedef long     (ZCALLBACK *seek64_file_func)    OF((voidpf opaque, voidpf stream, ZPOS64_T offset, int origin));$/;"	t
seek_file_func	src/contrib/minizip/ioapi.h	/^typedef long     (ZCALLBACK *seek_file_func)      OF((voidpf opaque, voidpf stream, uLong offset, int origin));$/;"	t
seekoff	src/contrib/iostream/zfstream.cpp	/^streampos gzfilebuf::seekoff( streamoff off, ios::seek_dir dir, int which ) {$/;"	f	class:gzfilebuf	signature:( streamoff off, ios::seek_dir dir, int which )
seekoff	src/contrib/iostream/zfstream.h	/^  virtual streampos seekoff( streamoff, ios::seek_dir, int );$/;"	p	class:gzfilebuf	access:public	signature:( streamoff, ios::seek_dir, int )
send_all_trees	src/trees.c	/^local void send_all_trees OF((deflate_state *s, int lcodes, int dcodes,$/;"	p	file:	signature:(deflate_state *s, int lcodes, int dcodes, int blcodes)
send_all_trees	src/trees.c	/^local void send_all_trees(s, lcodes, dcodes, blcodes)$/;"	f
send_bits	src/trees.c	/^local void send_bits      OF((deflate_state *s, int value, int length));$/;"	p	file:	signature:(deflate_state *s, int value, int length)
send_bits	src/trees.c	/^local void send_bits(s, value, length)$/;"	f
send_bits	src/trees.c	213;"	d	file:
send_code	src/trees.c	163;"	d	file:
send_code	src/trees.c	167;"	d	file:
send_tree	src/trees.c	/^local void send_tree      OF((deflate_state *s, ct_data *tree, int max_code));$/;"	p	file:	signature:(deflate_state *s, ct_data *tree, int max_code)
send_tree	src/trees.c	/^local void send_tree (s, tree, max_code)$/;"	f
setChecksum	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        protected void setChecksum(uint newSum)$/;"	m	class:DotZLib.CodecBase	access:protected	signature:(uint newSum)
setbuf	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::setbuf(char_type* p,$/;"	f	class:gzfilebuf	signature:(char_type* p, std::streamsize n)
setbuf	src/contrib/iostream3/zfstream.h	/^  setbuf(char_type* p,$/;"	p	class:gzfilebuf	access:protected	signature:(char_type* p, std::streamsize n)
setcompression	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::setcompression(int comp_level,$/;"	f	class:gzfilebuf	signature:(int comp_level, int comp_strategy)
setcompression	src/contrib/iostream3/zfstream.h	/^  setcompression(int comp_level,$/;"	p	class:gzfilebuf	access:public	signature:(int comp_level, int comp_strategy = Z_DEFAULT_STRATEGY)
setcompression	src/contrib/iostream3/zfstream.h	/^setcompression(gzofstream &gzs, int l, int s = Z_DEFAULT_STRATEGY)$/;"	f	signature:(gzofstream &gzs, int l, int s = Z_DEFAULT_STRATEGY)
setcompression	src/contrib/iostream3/zfstream.h	/^setcompression(int l, int s = Z_DEFAULT_STRATEGY)$/;"	f	signature:(int l, int s = Z_DEFAULT_STRATEGY)
setcompressionlevel	src/contrib/iostream/zfstream.cpp	/^int gzfilebuf::setcompressionlevel( int comp_level ) {$/;"	f	class:gzfilebuf	signature:( int comp_level )
setcompressionlevel	src/contrib/iostream/zfstream.h	/^  friend gzofstream &setcompressionlevel( gzofstream &, int );$/;"	p	class:gzfilestream_common	access:friend	signature:( gzofstream &, int )
setcompressionlevel	src/contrib/iostream/zfstream.h	/^  int setcompressionlevel( int comp_level );$/;"	p	class:gzfilebuf	access:public	signature:( int comp_level )
setcompressionlevel	src/contrib/iostream/zfstream.h	/^inline gzofstream &setcompressionlevel( gzofstream &s, int l )$/;"	f	signature:( gzofstream &s, int l )
setcompressionlevel	src/contrib/iostream/zfstream.h	/^inline gzomanip<int> setcompressionlevel(int l)$/;"	f	signature:(int l)
setcompressionstrategy	src/contrib/iostream/zfstream.cpp	/^int gzfilebuf::setcompressionstrategy( int comp_strategy ) {$/;"	f	class:gzfilebuf	signature:( int comp_strategy )
setcompressionstrategy	src/contrib/iostream/zfstream.h	/^  friend gzofstream &setcompressionstrategy( gzofstream &, int );$/;"	p	class:gzfilestream_common	access:friend	signature:( gzofstream &, int )
setcompressionstrategy	src/contrib/iostream/zfstream.h	/^  int setcompressionstrategy( int comp_strategy );$/;"	p	class:gzfilebuf	access:public	signature:( int comp_strategy )
setcompressionstrategy	src/contrib/iostream/zfstream.h	/^inline gzofstream &setcompressionstrategy( gzofstream &s, int l )$/;"	f	signature:( gzofstream &s, int l )
setcompressionstrategy	src/contrib/iostream/zfstream.h	/^inline gzomanip<int> setcompressionstrategy(int l)$/;"	f	signature:(int l)
setfiletime	src/contrib/untgz/untgz.c	/^int setfiletime         OF((char *, time_t));$/;"	p	file:	signature:(char *, time_t)
setfiletime	src/contrib/untgz/untgz.c	/^int setfiletime (char *fname,time_t ftime)$/;"	f	signature:(char *fname,time_t ftime)
show	src/configure	/^show()$/;"	f
showmanyc	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::showmanyc()$/;"	f	class:gzfilebuf	signature:()
showmanyc	src/contrib/iostream3/zfstream.h	/^  showmanyc();$/;"	p	class:gzfilebuf	access:protected	signature:()
size	src/contrib/untgz/untgz.c	/^  char size[12];                \/* 124 *\/$/;"	m	struct:tar_header	file:	access:public
size	src/examples/enough.c	/^local size_t size;      \/* number of elements in num and done *\/$/;"	v
size	src/examples/gzappend.c	/^    int size;                   \/* 1 << size is bytes in buf *\/$/;"	m	struct:__anon2	file:	access:public
size	src/examples/zran.c	/^    int size;           \/* number of list entries allocated *\/$/;"	m	struct:access	file:	access:public
size	src/gzguts.h	/^    unsigned size;          \/* buffer size, zero if not allocated yet *\/$/;"	m	struct:__anon1	access:public
size	src/test/infcover.c	/^    size_t size;                \/* requested size of allocation *\/$/;"	m	struct:mem_item	file:	access:public
size_centralExtra	src/contrib/minizip/zip.c	/^    uLong size_centralExtra;$/;"	m	struct:__anon9	file:	access:public
size_centralExtraFree	src/contrib/minizip/zip.c	/^    uLong size_centralExtraFree; \/* Extra bytes allocated to the centralheader but that are not used *\/$/;"	m	struct:__anon9	file:	access:public
size_central_dir	src/contrib/minizip/unzip.c	/^    ZPOS64_T size_central_dir;     \/* size of the central directory  *\/$/;"	m	struct:__anon8	file:	access:public
size_centralheader	src/contrib/minizip/zip.c	/^    uLong size_centralheader;   \/* size of the central header for cur file *\/$/;"	m	struct:__anon9	file:	access:public
size_comment	src/contrib/minizip/unzip.h	/^    uLong size_comment;         \/* size of the global comment of the zipfile *\/$/;"	m	struct:unz_global_info64_s	access:public
size_comment	src/contrib/minizip/unzip.h	/^    uLong size_comment;         \/* size of the global comment of the zipfile *\/$/;"	m	struct:unz_global_info_s	access:public
size_file_comment	src/contrib/minizip/unzip.h	/^    uLong size_file_comment;    \/* file comment length             2 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
size_file_comment	src/contrib/minizip/unzip.h	/^    uLong size_file_comment;    \/* file comment length             2 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
size_file_extra	src/contrib/minizip/unzip.h	/^    uLong size_file_extra;      \/* extra field length              2 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
size_file_extra	src/contrib/minizip/unzip.h	/^    uLong size_file_extra;      \/* extra field length              2 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
size_filename	src/contrib/minizip/unzip.h	/^    uLong size_filename;        \/* filename length                 2 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
size_filename	src/contrib/minizip/unzip.h	/^    uLong size_filename;        \/* filename length                 2 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
size_local_extrafield	src/contrib/minizip/unzip.c	/^    uInt  size_local_extrafield;\/* size of the local extra field *\/$/;"	m	struct:__anon7	file:	access:public
skip	src/examples/gzappend.c	/^local void skip(file *in, unsigned n)$/;"	f	signature:(file *in, unsigned n)
skip	src/gzguts.h	/^    z_off64_t skip;         \/* amount to skip (already rewound if backwards) *\/$/;"	m	struct:__anon1	access:public
smaller	src/trees.c	443;"	d	file:
snprintf	src/gzguts.h	103;"	d
snprintf	src/test/minigzip.c	44;"	d	file:
start	src/gzguts.h	/^    z_off64_t start;        \/* where the gzip data started, for rewinding *\/$/;"	m	struct:__anon1	access:public
start_sp	src/contrib/inflate86/inffast.S	/^#define start_sp       92 \/* second arg: unsigned int (local_var_size + 28) *\/$/;"	d
stat_desc	src/deflate.h	/^    static_tree_desc *stat_desc; \/* the corresponding static tree *\/$/;"	m	struct:tree_desc_s	access:public
state	src/contrib/blast/blast.c	/^struct state {$/;"	s	file:
state	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        uint state;$/;"	f	struct:DotZLib.ZStream	access:public
state	src/contrib/puff/puff.c	/^struct state {$/;"	s	file:
state	src/zlib.h	/^    struct internal_state FAR *state; \/* not visible by applications *\/$/;"	m	struct:z_stream_s	typeref:struct:z_stream_s::FAR	access:public
state	zlib.h	/^    struct internal_state FAR *state; \/* not visible by applications *\/$/;"	m	struct:z_stream_s	typeref:struct:z_stream_s::FAR	access:public
state::bitbuf	src/contrib/blast/blast.c	/^    int bitbuf;                 \/* bit buffer *\/$/;"	m	struct:state	file:	access:public
state::bitbuf	src/contrib/puff/puff.c	/^    int bitbuf;                 \/* bit buffer *\/$/;"	m	struct:state	file:	access:public
state::bitcnt	src/contrib/blast/blast.c	/^    int bitcnt;                 \/* number of bits in bit buffer *\/$/;"	m	struct:state	file:	access:public
state::bitcnt	src/contrib/puff/puff.c	/^    int bitcnt;                 \/* number of bits in bit buffer *\/$/;"	m	struct:state	file:	access:public
state::env	src/contrib/blast/blast.c	/^    jmp_buf env;$/;"	m	struct:state	file:	access:public
state::env	src/contrib/puff/puff.c	/^    jmp_buf env;$/;"	m	struct:state	file:	access:public
state::first	src/contrib/blast/blast.c	/^    int first;                  \/* true to check distances (for first 4K) *\/$/;"	m	struct:state	file:	access:public
state::in	src/contrib/blast/blast.c	/^    unsigned char *in;          \/* next input location *\/$/;"	m	struct:state	file:	access:public
state::in	src/contrib/puff/puff.c	/^    const unsigned char *in;    \/* input buffer *\/$/;"	m	struct:state	file:	access:public
state::incnt	src/contrib/puff/puff.c	/^    unsigned long incnt;        \/* bytes read so far *\/$/;"	m	struct:state	file:	access:public
state::infun	src/contrib/blast/blast.c	/^    blast_in infun;             \/* input function provided by user *\/$/;"	m	struct:state	file:	access:public
state::inhow	src/contrib/blast/blast.c	/^    void *inhow;                \/* opaque information passed to infun() *\/$/;"	m	struct:state	file:	access:public
state::inlen	src/contrib/puff/puff.c	/^    unsigned long inlen;        \/* available input at in *\/$/;"	m	struct:state	file:	access:public
state::left	src/contrib/blast/blast.c	/^    unsigned left;              \/* available input at in *\/$/;"	m	struct:state	file:	access:public
state::next	src/contrib/blast/blast.c	/^    unsigned next;              \/* index of next write location in out[] *\/$/;"	m	struct:state	file:	access:public
state::out	src/contrib/blast/blast.c	/^    unsigned char out[MAXWIN];  \/* output buffer and sliding window *\/$/;"	m	struct:state	file:	access:public
state::out	src/contrib/puff/puff.c	/^    unsigned char *out;         \/* output buffer *\/$/;"	m	struct:state	file:	access:public
state::outcnt	src/contrib/puff/puff.c	/^    unsigned long outcnt;       \/* bytes written to out so far *\/$/;"	m	struct:state	file:	access:public
state::outfun	src/contrib/blast/blast.c	/^    blast_out outfun;           \/* output function provided by user *\/$/;"	m	struct:state	file:	access:public
state::outhow	src/contrib/blast/blast.c	/^    void *outhow;               \/* opaque information passed to outfun() *\/$/;"	m	struct:state	file:	access:public
state::outlen	src/contrib/puff/puff.c	/^    unsigned long outlen;       \/* available space at out *\/$/;"	m	struct:state	file:	access:public
state_r	src/contrib/inflate86/inffast.S	/^#define state_r %edi$/;"	d
state_r	src/contrib/inflate86/inffast.S	/^#define state_r %edx$/;"	d
state_strm	src/contrib/inflate86/inffast.S	/^#define state_strm     28  \/* strm->state *\/$/;"	d
static_bl_desc	src/trees.c	/^local static_tree_desc  static_bl_desc =$/;"	v
static_d_desc	src/trees.c	/^local static_tree_desc  static_d_desc =$/;"	v
static_dtree	src/trees.c	/^local ct_data static_dtree[D_CODES];$/;"	v
static_dtree	src/trees.h	/^local const ct_data static_dtree[D_CODES] = {$/;"	v
static_l_desc	src/trees.c	/^local static_tree_desc  static_l_desc =$/;"	v
static_len	src/deflate.h	/^    ulg static_len;     \/* bit length of current block with static trees *\/$/;"	m	struct:internal_state	access:public
static_ltree	src/trees.c	/^local ct_data static_ltree[L_CODES+2];$/;"	v
static_ltree	src/trees.h	/^local const ct_data static_ltree[L_CODES+2] = {$/;"	v
static_tree	src/trees.c	/^    const ct_data *static_tree;  \/* static tree or NULL *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
static_tree_desc	src/deflate.h	/^typedef struct static_tree_desc_s  static_tree_desc;$/;"	t	typeref:struct:static_tree_desc_s
static_tree_desc_s	src/deflate.c	/^struct static_tree_desc_s {int dummy;}; \/* for buggy compilers *\/$/;"	s	file:
static_tree_desc_s	src/trees.c	/^struct static_tree_desc_s {$/;"	s	file:
static_tree_desc_s::dummy	src/deflate.c	/^struct static_tree_desc_s {int dummy;}; \/* for buggy compilers *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
static_tree_desc_s::elems	src/trees.c	/^    int     elems;               \/* max number of elements in the tree *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
static_tree_desc_s::extra_base	src/trees.c	/^    int     extra_base;          \/* base index for extra_bits *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
static_tree_desc_s::extra_bits	src/trees.c	/^    const intf *extra_bits;      \/* extra bits for each code or NULL *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
static_tree_desc_s::max_length	src/trees.c	/^    int     max_length;          \/* max bit length for the codes *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
static_tree_desc_s::static_tree	src/trees.c	/^    const ct_data *static_tree;  \/* static tree or NULL *\/$/;"	m	struct:static_tree_desc_s	file:	access:public
status	src/contrib/masmx64/inffas8664.c	/^\/*116   72 *\/ unsigned status;          \/*          set when state chng*\/$/;"	m	struct:inffast_ar	file:	access:public
status	src/deflate.h	/^    int   status;        \/* as the name implies *\/$/;"	m	struct:internal_state	access:public
stored	src/contrib/puff/puff.c	/^local int stored(struct state *s)$/;"	f	signature:(struct state *s)
stored	src/examples/gzlog.c	/^    uint stored;    \/* bytes currently in last stored block *\/$/;"	m	struct:log	file:	access:public
str_s	src/contrib/masmx86/match686.asm	/^    str_s           equ     dword ptr[esp+NbStack-4]$/;"	d
strategy	src/deflate.h	/^    int strategy; \/* favor or force Huffman coding*\/$/;"	m	struct:internal_state	access:public
strategy	src/gzguts.h	/^    int strategy;           \/* compression strategy *\/$/;"	m	struct:__anon1	access:public
strcmpcasenosensitive_internal	src/contrib/minizip/unzip.c	/^local int strcmpcasenosensitive_internal (const char* fileName1, const char* fileName2)$/;"	f	signature:(const char* fileName1, const char* fileName2)
strdup	src/contrib/untgz/untgz.c	33;"	d	file:
stream	src/contrib/minizip/unzip.c	/^    z_stream stream;            \/* zLib stream structure for inflate *\/$/;"	m	struct:__anon7	file:	access:public
stream	src/contrib/minizip/zip.c	/^    z_stream stream;            \/* zLib stream structure for inflate *\/$/;"	m	struct:__anon9	file:	access:public
stream_initialised	src/contrib/minizip/unzip.c	/^    uLong stream_initialised;   \/* flag set if stream structure is initialised*\/$/;"	m	struct:__anon7	file:	access:public
stream_initialised	src/contrib/minizip/zip.c	/^    int  stream_initialised;    \/* 1 is stream is initialised *\/$/;"	m	struct:__anon9	file:	access:public
strend	src/contrib/masmx86/match686.asm	/^    strend          equ     dword ptr [esp+NbStack-76]$/;"	d
strm	src/deflate.h	/^    z_streamp strm;      \/* pointer back to this zlib stream *\/$/;"	m	struct:internal_state	access:public
strm	src/gzguts.h	/^    z_stream strm;          \/* stream structure in-place (not a pointer) *\/$/;"	m	struct:__anon1	access:public
strm	src/test/minigzip.c	/^    z_stream strm;$/;"	m	struct:gzFile_s	file:	access:public
strm_r	src/contrib/inflate86/inffast.S	/^#define strm_r  %eax$/;"	d
strm_r	src/contrib/inflate86/inffast.S	/^#define strm_r  %esi$/;"	d
strm_sp	src/contrib/inflate86/inffast.S	/^#define strm_sp        88 \/* first arg: z_stream * (local_var_size + 24) *\/$/;"	d
strstart	src/contrib/gcc_gvmat64/gvmat64.S	/^#define strstart         [ rcx + dsStrStart]$/;"	d
strstart	src/contrib/masmx64/gvmat64.asm	/^strstart        equ [ rcx + dsStrStart]$/;"	d
strstart	src/deflate.h	/^    uInt strstart;               \/* start of string to insert *\/$/;"	m	struct:internal_state	access:public
strtime	src/contrib/untgz/untgz.c	/^char *strtime           OF((time_t *));$/;"	p	file:	signature:(time_t *)
strtime	src/contrib/untgz/untgz.c	/^char *strtime (time_t *t)$/;"	f	signature:(time_t *t)
strwinerror	src/test/minigzip.c	/^static char *strwinerror (error)$/;"	f	file:
suffix	src/examples/gun.c	/^unsigned char suffix[65536];            \/* one-character LZW suffix *\/$/;"	v
symbol	src/contrib/blast/blast.c	/^    short *symbol;      \/* canonically ordered symbols *\/$/;"	m	struct:huffman	file:	access:public
symbol	src/contrib/puff/puff.c	/^    short *symbol;      \/* canonically ordered symbols *\/$/;"	m	struct:huffman	file:	access:public
sync	src/contrib/iostream/zfstream.cpp	/^int gzfilebuf::sync() {$/;"	f	class:gzfilebuf	signature:()
sync	src/contrib/iostream/zfstream.h	/^  virtual int sync();$/;"	p	class:gzfilebuf	access:public	signature:()
sync	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::sync()$/;"	f	class:gzfilebuf	signature:()
sync	src/contrib/iostream3/zfstream.h	/^  sync();$/;"	p	class:gzfilebuf	access:protected	signature:()
syncsearch	src/inflate.c	/^local unsigned syncsearch OF((unsigned FAR *have, const unsigned char FAR *buf,$/;"	p	file:	signature:(unsigned FAR *have, const unsigned char FAR *buf, unsigned len)
syncsearch	src/inflate.c	/^local unsigned syncsearch(have, buf, len)$/;"	f
tab	src/examples/enough.c	/^struct tab {                        \/* type for been here check *\/$/;"	s	file:
tab::len	src/examples/enough.c	/^    size_t len;         \/* length of bit vector in char's *\/$/;"	m	struct:tab	file:	access:public
tab::vec	src/examples/enough.c	/^    char *vec;          \/* allocated bit vector *\/$/;"	m	struct:tab	file:	access:public
table	src/zutil.c	/^local ptr_table table[MAX_PTR];$/;"	v
tar	src/contrib/untgz/untgz.c	/^int tar                 OF((gzFile, int, int, int, char **));$/;"	p	file:	signature:(gzFile, int, int, int, char **)
tar	src/contrib/untgz/untgz.c	/^int tar (gzFile in,int action,int arg,int argc,char **argv)$/;"	f	signature:(gzFile in,int action,int arg,int argc,char **argv)
tar_buffer	src/contrib/untgz/untgz.c	/^union tar_buffer$/;"	u	file:
tar_buffer::buffer	src/contrib/untgz/untgz.c	/^  char               buffer[BLOCKSIZE];$/;"	m	union:tar_buffer	file:	access:public
tar_buffer::header	src/contrib/untgz/untgz.c	/^  struct tar_header  header;$/;"	m	union:tar_buffer	typeref:struct:tar_buffer::tar_header	file:	access:public
tar_header	src/contrib/untgz/untgz.c	/^struct tar_header$/;"	s	file:
tar_header::chksum	src/contrib/untgz/untgz.c	/^  char chksum[8];               \/* 148 *\/$/;"	m	struct:tar_header	file:	access:public
tar_header::devmajor	src/contrib/untgz/untgz.c	/^  char devmajor[8];             \/* 329 *\/$/;"	m	struct:tar_header	file:	access:public
tar_header::devminor	src/contrib/untgz/untgz.c	/^  char devminor[8];             \/* 337 *\/$/;"	m	struct:tar_header	file:	access:public
tar_header::gid	src/contrib/untgz/untgz.c	/^  char gid[8];                  \/* 116 *\/$/;"	m	struct:tar_header	file:	access:public
tar_header::gname	src/contrib/untgz/untgz.c	/^  char gname[32];               \/* 297 *\/$/;"	m	struct:tar_header	file:	access:public
tar_header::linkname	src/contrib/untgz/untgz.c	/^  char linkname[100];           \/* 157 *\/$/;"	m	struct:tar_header	file:	access:public
tar_header::magic	src/contrib/untgz/untgz.c	/^  char magic[6];                \/* 257 *\/$/;"	m	struct:tar_header	file:	access:public
tar_header::mode	src/contrib/untgz/untgz.c	/^  char mode[8];                 \/* 100 *\/$/;"	m	struct:tar_header	file:	access:public
tar_header::mtime	src/contrib/untgz/untgz.c	/^  char mtime[12];               \/* 136 *\/$/;"	m	struct:tar_header	file:	access:public
tar_header::name	src/contrib/untgz/untgz.c	/^  char name[100];               \/*   0 *\/$/;"	m	struct:tar_header	file:	access:public
tar_header::prefix	src/contrib/untgz/untgz.c	/^  char prefix[155];             \/* 345 *\/$/;"	m	struct:tar_header	file:	access:public
tar_header::size	src/contrib/untgz/untgz.c	/^  char size[12];                \/* 124 *\/$/;"	m	struct:tar_header	file:	access:public
tar_header::typeflag	src/contrib/untgz/untgz.c	/^  char typeflag;                \/* 156 *\/$/;"	m	struct:tar_header	file:	access:public
tar_header::uid	src/contrib/untgz/untgz.c	/^  char uid[8];                  \/* 108 *\/$/;"	m	struct:tar_header	file:	access:public
tar_header::uname	src/contrib/untgz/untgz.c	/^  char uname[32];               \/* 265 *\/$/;"	m	struct:tar_header	file:	access:public
tar_header::version	src/contrib/untgz/untgz.c	/^  char version[2];              \/* 263 *\/$/;"	m	struct:tar_header	file:	access:public
tcrc	src/examples/gzlog.c	/^    ulong tcrc;     \/* crc of total data *\/$/;"	m	struct:log	file:	access:public
tell_file_func	src/contrib/minizip/ioapi.h	/^typedef long     (ZCALLBACK *tell_file_func)      OF((voidpf opaque, voidpf stream));$/;"	t
test_compress	src/contrib/pascal/example.pas	/^procedure test_compress(compr: Pointer; comprLen: LongInt;$/;"	p
test_compress	src/test/example.c	/^void test_compress      OF((Byte *compr, uLong comprLen,$/;"	p	file:	signature:(Byte *compr, uLong comprLen, Byte *uncompr, uLong uncomprLen)
test_compress	src/test/example.c	/^void test_compress(compr, comprLen, uncompr, uncomprLen)$/;"	f
test_deflate	src/contrib/pascal/example.pas	/^procedure test_deflate(compr: Pointer; comprLen: LongInt);$/;"	p
test_deflate	src/test/example.c	/^void test_deflate       OF((Byte *compr, uLong comprLen));$/;"	p	file:	signature:(Byte *compr, uLong comprLen)
test_deflate	src/test/example.c	/^void test_deflate(compr, comprLen)$/;"	f
test_dict_deflate	src/contrib/pascal/example.pas	/^procedure test_dict_deflate(compr: Pointer; comprLen: LongInt);$/;"	p
test_dict_deflate	src/test/example.c	/^void test_dict_deflate  OF((Byte *compr, uLong comprLen));$/;"	p	file:	signature:(Byte *compr, uLong comprLen)
test_dict_deflate	src/test/example.c	/^void test_dict_deflate(compr, comprLen)$/;"	f
test_dict_inflate	src/contrib/pascal/example.pas	/^procedure test_dict_inflate(compr: Pointer; comprLen: LongInt;$/;"	p
test_dict_inflate	src/test/example.c	/^void test_dict_inflate  OF((Byte *compr, uLong comprLen,$/;"	p	file:	signature:(Byte *compr, uLong comprLen, Byte *uncompr, uLong uncomprLen)
test_dict_inflate	src/test/example.c	/^void test_dict_inflate(compr, comprLen, uncompr, uncomprLen)$/;"	f
test_flush	src/contrib/pascal/example.pas	/^procedure test_flush(compr: Pointer; var comprLen : LongInt);$/;"	p
test_flush	src/test/example.c	/^void test_flush         OF((Byte *compr, uLong *comprLen));$/;"	p	file:	signature:(Byte *compr, uLong *comprLen)
test_flush	src/test/example.c	/^void test_flush(compr, comprLen)$/;"	f
test_gzio	src/contrib/pascal/example.pas	/^procedure test_gzio(const fname: PChar; (* compressed file name *)$/;"	p
test_gzio	src/test/example.c	/^void test_gzio          OF((const char *fname,$/;"	p	file:	signature:(const char *fname, Byte *uncompr, uLong uncomprLen)
test_gzio	src/test/example.c	/^void test_gzio(fname, uncompr, uncomprLen)$/;"	f
test_inflate	src/contrib/pascal/example.pas	/^procedure test_inflate(compr: Pointer; comprLen : LongInt;$/;"	p
test_inflate	src/test/example.c	/^void test_inflate       OF((Byte *compr, uLong comprLen,$/;"	p	file:	signature:(Byte *compr, uLong comprLen, Byte *uncompr, uLong uncomprLen)
test_inflate	src/test/example.c	/^void test_inflate(compr, comprLen, uncompr, uncomprLen)$/;"	f
test_large_deflate	src/contrib/pascal/example.pas	/^procedure test_large_deflate(compr: Pointer; comprLen: LongInt;$/;"	p
test_large_deflate	src/test/example.c	/^void test_large_deflate OF((Byte *compr, uLong comprLen,$/;"	p	file:	signature:(Byte *compr, uLong comprLen, Byte *uncompr, uLong uncomprLen)
test_large_deflate	src/test/example.c	/^void test_large_deflate(compr, comprLen, uncompr, uncomprLen)$/;"	f
test_large_inflate	src/contrib/pascal/example.pas	/^procedure test_large_inflate(compr: Pointer; comprLen: LongInt;$/;"	p
test_large_inflate	src/test/example.c	/^void test_large_inflate OF((Byte *compr, uLong comprLen,$/;"	p	file:	signature:(Byte *compr, uLong comprLen, Byte *uncompr, uLong uncomprLen)
test_large_inflate	src/test/example.c	/^void test_large_inflate(compr, comprLen, uncompr, uncomprLen)$/;"	f
test_sync	src/contrib/pascal/example.pas	/^procedure test_sync(compr: Pointer; comprLen: LongInt;$/;"	p
test_sync	src/test/example.c	/^void test_sync          OF((Byte *compr, uLong comprLen,$/;"	p	file:	signature:(Byte *compr, uLong comprLen, Byte *uncompr, uLong uncomprLen)
test_sync	src/test/example.c	/^void test_sync(compr, comprLen, uncompr, uncomprLen)$/;"	f
testerror_file_func	src/contrib/minizip/ioapi.h	/^typedef int      (ZCALLBACK *testerror_file_func) OF((voidpf opaque, voidpf stream));$/;"	t
text	src/zlib.h	/^    int     text;       \/* true if compressed data believed to be text *\/$/;"	m	struct:gz_header_s	access:public
text	zlib.h	/^    int     text;       \/* true if compressed data believed to be text *\/$/;"	m	struct:gz_header_s	access:public
time	src/contrib/untgz/untgz.c	/^  time_t             time;$/;"	m	struct:attr_item	file:	access:public
time	src/zlib.h	/^    uLong   time;       \/* modification time *\/$/;"	m	struct:gz_header_s	access:public
time	zlib.h	/^    uLong   time;       \/* modification time *\/$/;"	m	struct:gz_header_s	access:public
tlen	src/examples/gzlog.c	/^    ulong tlen;     \/* length (modulo 2^32) of total data *\/$/;"	m	struct:log	file:	access:public
tm_hour	src/contrib/minizip/unzip.h	/^    uInt tm_hour;           \/* hours since midnight - [0,23] *\/$/;"	m	struct:tm_unz_s	access:public
tm_hour	src/contrib/minizip/zip.h	/^    uInt tm_hour;           \/* hours since midnight - [0,23] *\/$/;"	m	struct:tm_zip_s	access:public
tm_mday	src/contrib/minizip/unzip.h	/^    uInt tm_mday;           \/* day of the month - [1,31] *\/$/;"	m	struct:tm_unz_s	access:public
tm_mday	src/contrib/minizip/zip.h	/^    uInt tm_mday;           \/* day of the month - [1,31] *\/$/;"	m	struct:tm_zip_s	access:public
tm_min	src/contrib/minizip/unzip.h	/^    uInt tm_min;            \/* minutes after the hour - [0,59] *\/$/;"	m	struct:tm_unz_s	access:public
tm_min	src/contrib/minizip/zip.h	/^    uInt tm_min;            \/* minutes after the hour - [0,59] *\/$/;"	m	struct:tm_zip_s	access:public
tm_mon	src/contrib/minizip/unzip.h	/^    uInt tm_mon;            \/* months since January - [0,11] *\/$/;"	m	struct:tm_unz_s	access:public
tm_mon	src/contrib/minizip/zip.h	/^    uInt tm_mon;            \/* months since January - [0,11] *\/$/;"	m	struct:tm_zip_s	access:public
tm_sec	src/contrib/minizip/unzip.h	/^    uInt tm_sec;            \/* seconds after the minute - [0,59] *\/$/;"	m	struct:tm_unz_s	access:public
tm_sec	src/contrib/minizip/zip.h	/^    uInt tm_sec;            \/* seconds after the minute - [0,59] *\/$/;"	m	struct:tm_zip_s	access:public
tm_unz	src/contrib/minizip/unzip.h	/^} tm_unz;$/;"	t	typeref:struct:tm_unz_s
tm_unz_s	src/contrib/minizip/unzip.h	/^typedef struct tm_unz_s$/;"	s
tm_unz_s::tm_hour	src/contrib/minizip/unzip.h	/^    uInt tm_hour;           \/* hours since midnight - [0,23] *\/$/;"	m	struct:tm_unz_s	access:public
tm_unz_s::tm_mday	src/contrib/minizip/unzip.h	/^    uInt tm_mday;           \/* day of the month - [1,31] *\/$/;"	m	struct:tm_unz_s	access:public
tm_unz_s::tm_min	src/contrib/minizip/unzip.h	/^    uInt tm_min;            \/* minutes after the hour - [0,59] *\/$/;"	m	struct:tm_unz_s	access:public
tm_unz_s::tm_mon	src/contrib/minizip/unzip.h	/^    uInt tm_mon;            \/* months since January - [0,11] *\/$/;"	m	struct:tm_unz_s	access:public
tm_unz_s::tm_sec	src/contrib/minizip/unzip.h	/^    uInt tm_sec;            \/* seconds after the minute - [0,59] *\/$/;"	m	struct:tm_unz_s	access:public
tm_unz_s::tm_year	src/contrib/minizip/unzip.h	/^    uInt tm_year;           \/* years - [1980..2044] *\/$/;"	m	struct:tm_unz_s	access:public
tm_year	src/contrib/minizip/unzip.h	/^    uInt tm_year;           \/* years - [1980..2044] *\/$/;"	m	struct:tm_unz_s	access:public
tm_year	src/contrib/minizip/zip.h	/^    uInt tm_year;           \/* years - [1980..2044] *\/$/;"	m	struct:tm_zip_s	access:public
tm_zip	src/contrib/minizip/zip.h	/^} tm_zip;$/;"	t	typeref:struct:tm_zip_s
tm_zip_s	src/contrib/minizip/zip.h	/^typedef struct tm_zip_s$/;"	s
tm_zip_s::tm_hour	src/contrib/minizip/zip.h	/^    uInt tm_hour;           \/* hours since midnight - [0,23] *\/$/;"	m	struct:tm_zip_s	access:public
tm_zip_s::tm_mday	src/contrib/minizip/zip.h	/^    uInt tm_mday;           \/* day of the month - [1,31] *\/$/;"	m	struct:tm_zip_s	access:public
tm_zip_s::tm_min	src/contrib/minizip/zip.h	/^    uInt tm_min;            \/* minutes after the hour - [0,59] *\/$/;"	m	struct:tm_zip_s	access:public
tm_zip_s::tm_mon	src/contrib/minizip/zip.h	/^    uInt tm_mon;            \/* months since January - [0,11] *\/$/;"	m	struct:tm_zip_s	access:public
tm_zip_s::tm_sec	src/contrib/minizip/zip.h	/^    uInt tm_sec;            \/* seconds after the minute - [0,59] *\/$/;"	m	struct:tm_zip_s	access:public
tm_zip_s::tm_year	src/contrib/minizip/zip.h	/^    uInt tm_year;           \/* years - [1980..2044] *\/$/;"	m	struct:tm_zip_s	access:public
tmp_mm	src/contrib/inflate86/inffast.S	/^#define tmp_mm    %mm6$/;"	d
tmu_date	src/contrib/minizip/unzip.h	/^    tm_unz tmu_date;$/;"	m	struct:unz_file_info64_s	access:public
tmu_date	src/contrib/minizip/unzip.h	/^    tm_unz tmu_date;$/;"	m	struct:unz_file_info_s	access:public
tmz_date	src/contrib/minizip/zip.h	/^    tm_zip      tmz_date;       \/* date in understandable format           *\/$/;"	m	struct:__anon6	access:public
total	src/examples/gun.c	/^    unsigned long total;$/;"	m	struct:outd	file:	access:public
total	src/inflate.h	/^    unsigned long total;        \/* protected copy of output count *\/$/;"	m	struct:inflate_state	access:public
total	src/test/infcover.c	/^    size_t total, highwater;    \/* total allocations, and largest total *\/$/;"	m	struct:mem_zone	file:	access:public
totalCompressedData	src/contrib/minizip/zip.c	/^    ZPOS64_T totalCompressedData;$/;"	m	struct:__anon9	file:	access:public
totalUncompressedData	src/contrib/minizip/zip.c	/^    ZPOS64_T totalUncompressedData;$/;"	m	struct:__anon9	file:	access:public
total_in	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public uint total_in;$/;"	f	struct:DotZLib.ZStream	access:public
total_in	src/zlib.h	/^    uLong    total_in;  \/* total number of input bytes read so far *\/$/;"	m	struct:z_stream_s	access:public
total_in	zlib.h	/^    uLong    total_in;  \/* total number of input bytes read so far *\/$/;"	m	struct:z_stream_s	access:public
total_out	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        public uint total_out;$/;"	f	struct:DotZLib.ZStream	access:public
total_out	src/zlib.h	/^    uLong    total_out; \/* total number of bytes output so far *\/$/;"	m	struct:z_stream_s	access:public
total_out	zlib.h	/^    uLong    total_out; \/* total number of bytes output so far *\/$/;"	m	struct:z_stream_s	access:public
total_out_64	src/contrib/minizip/unzip.c	/^    ZPOS64_T total_out_64;$/;"	m	struct:__anon7	file:	access:public
tr_static_init	src/trees.c	/^local void tr_static_init OF((void));$/;"	p	file:	signature:(void)
tr_static_init	src/trees.c	/^local void tr_static_init()$/;"	f
tree_desc	src/deflate.h	/^} FAR tree_desc;$/;"	t	typeref:struct:tree_desc_s
tree_desc_s	src/deflate.h	/^typedef struct tree_desc_s {$/;"	s
tree_desc_s::dyn_tree	src/deflate.h	/^    ct_data *dyn_tree;           \/* the dynamic tree *\/$/;"	m	struct:tree_desc_s	access:public
tree_desc_s::max_code	src/deflate.h	/^    int     max_code;            \/* largest code with non zero frequency *\/$/;"	m	struct:tree_desc_s	access:public
tree_desc_s::stat_desc	src/deflate.h	/^    static_tree_desc *stat_desc; \/* the corresponding static tree *\/$/;"	m	struct:tree_desc_s	access:public
try	src/configure	/^  try()$/;"	f
try	src/configure	/^try()$/;"	f
try	src/test/infcover.c	/^local int try(char *hex, char *id, int err)$/;"	f	signature:(char *hex, char *id, int err)
tryboth	src/configure	/^tryboth()$/;"	f
type_ar	src/contrib/masmx64/inffas8664.c	/^    } type_ar;$/;"	t	typeref:struct:inffast_ar	file:
typeflag	src/contrib/untgz/untgz.c	/^  char typeflag;                \/* 156 *\/$/;"	m	struct:tar_header	file:	access:public
uInt	src/zconf.h	/^typedef unsigned int   uInt;  \/* 16 bits or more *\/$/;"	t
uInt	src/zconf.h	141;"	d
uInt	zconf.h	/^typedef unsigned int   uInt;  \/* 16 bits or more *\/$/;"	t
uInt	zconf.h	141;"	d
uIntf	src/zconf.h	/^typedef uInt  FAR uIntf;$/;"	t
uIntf	src/zconf.h	142;"	d
uIntf	zconf.h	/^typedef uInt  FAR uIntf;$/;"	t
uIntf	zconf.h	142;"	d
uLong	src/zconf.h	/^typedef unsigned long  uLong; \/* 32 bits or more *\/$/;"	t
uLong	src/zconf.h	143;"	d
uLong	zconf.h	/^typedef unsigned long  uLong; \/* 32 bits or more *\/$/;"	t
uLong	zconf.h	143;"	d
uLongf	src/zconf.h	/^typedef uLong FAR uLongf;$/;"	t
uLongf	src/zconf.h	144;"	d
uLongf	zconf.h	/^typedef uLong FAR uLongf;$/;"	t
uLongf	zconf.h	144;"	d
uch	src/zutil.h	/^typedef unsigned char  uch;$/;"	t
uch	zutil.h	/^typedef unsigned char  uch;$/;"	t
uchf	src/zutil.h	/^typedef uch FAR uchf;$/;"	t
uchf	zutil.h	/^typedef uch FAR uchf;$/;"	t
uid	src/contrib/untgz/untgz.c	/^  char uid[8];                  \/* 108 *\/$/;"	m	struct:tar_header	file:	access:public
uint	src/examples/gzlog.c	/^typedef unsigned int uint;$/;"	t	file:
ulg	src/zutil.h	/^typedef unsigned long  ulg;$/;"	t
ulg	zutil.h	/^typedef unsigned long  ulg;$/;"	t
ulong	src/examples/gzlog.c	/^typedef unsigned long ulong;$/;"	t	file:
uname	src/contrib/untgz/untgz.c	/^  char uname[32];               \/* 265 *\/$/;"	m	struct:tar_header	file:	access:public
uncompress	src/contrib/pascal/zlibpas.pas	/^function uncompress(dest: PChar; var destLen: LongInt;$/;"	f
uncompress	src/contrib/pascal/zlibpas.pas	/^function uncompress; external;$/;"	f
uncompress	src/uncompr.c	/^int ZEXPORT uncompress (dest, destLen, source, sourceLen)$/;"	f
uncompress	src/zconf.h	117;"	d
uncompress	src/zlib.h	/^ZEXTERN int ZEXPORT uncompress OF((Bytef *dest,   uLongf *destLen,$/;"	p	signature:(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
uncompress	zconf.h	117;"	d
uncompress	zlib.h	/^ZEXTERN int ZEXPORT uncompress OF((Bytef *dest,   uLongf *destLen,$/;"	p	signature:(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
uncompressedData	src/contrib/dotzlib/DotZLib/UnitTests.cs	/^        private ArrayList uncompressedData = new ArrayList();$/;"	f	class:DotZLibTests.DeflateInflateTests	file:	access:private
uncompressed_size	src/contrib/minizip/unzip.h	/^    ZPOS64_T uncompressed_size; \/* uncompressed size               8 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
uncompressed_size	src/contrib/minizip/unzip.h	/^    uLong uncompressed_size;    \/* uncompressed size               4 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
underflow	src/contrib/iostream/zfstream.cpp	/^int gzfilebuf::underflow() {$/;"	f	class:gzfilebuf	signature:()
underflow	src/contrib/iostream/zfstream.h	/^  virtual int underflow();$/;"	p	class:gzfilebuf	access:protected	signature:()
underflow	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::underflow()$/;"	f	class:gzfilebuf	signature:()
underflow	src/contrib/iostream3/zfstream.h	/^  underflow();$/;"	p	class:gzfilebuf	access:protected	signature:()
unlink	src/test/minigzip.c	/^  extern int unlink OF((const char *));$/;"	p	file:	signature:(const char *)
unlink	src/test/minigzip.c	48;"	d	file:
unlink	src/test/minigzip.c	52;"	d	file:
unused	src/contrib/minizip/unzip.h	/^typedef struct TagunzFile__ { int unused; } unzFile__;$/;"	m	struct:TagunzFile__	access:public
unused	src/contrib/minizip/zip.c	/^  uLong  unused; \/* for future use and alignement *\/$/;"	m	struct:linkedlist_datablock_internal_s	file:	access:public
unused	src/contrib/minizip/zip.h	/^typedef struct TagzipFile__ { int unused; } zipFile__;$/;"	m	struct:TagzipFile__	access:public
unz64_file_pos	src/contrib/minizip/unzip.h	/^} unz64_file_pos;$/;"	t	typeref:struct:unz64_file_pos_s
unz64_file_pos_s	src/contrib/minizip/unzip.h	/^typedef struct unz64_file_pos_s$/;"	s
unz64_file_pos_s::num_of_file	src/contrib/minizip/unzip.h	/^    ZPOS64_T num_of_file;            \/* # of file *\/$/;"	m	struct:unz64_file_pos_s	access:public
unz64_file_pos_s::pos_in_zip_directory	src/contrib/minizip/unzip.h	/^    ZPOS64_T pos_in_zip_directory;   \/* offset in zip file directory *\/$/;"	m	struct:unz64_file_pos_s	access:public
unz64_s	src/contrib/minizip/unzip.c	/^} unz64_s;$/;"	t	typeref:struct:__anon8	file:
unz64local_CheckCurrentFileCoherencyHeader	src/contrib/minizip/unzip.c	/^local int unz64local_CheckCurrentFileCoherencyHeader (unz64_s* s, uInt* piSizeVar,$/;"	f	signature:(unz64_s* s, uInt* piSizeVar, ZPOS64_T * poffset_local_extrafield, uInt * psize_local_extrafield)
unz64local_DosDateToTmuDate	src/contrib/minizip/unzip.c	/^local void unz64local_DosDateToTmuDate (ZPOS64_T ulDosDate, tm_unz* ptm)$/;"	f	signature:(ZPOS64_T ulDosDate, tm_unz* ptm)
unz64local_GetCurrentFileInfoInternal	src/contrib/minizip/unzip.c	/^local int unz64local_GetCurrentFileInfoInternal (unzFile file,$/;"	f	signature:(unzFile file, unz_file_info64 *pfile_info, unz_file_info64_internal *pfile_info_internal, char *szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char *szComment, uLong commentBufferSize)
unz64local_GetCurrentFileInfoInternal	src/contrib/minizip/unzip.c	/^local int unz64local_GetCurrentFileInfoInternal OF((unzFile file,$/;"	p	file:	signature:(unzFile file, unz_file_info64 *pfile_info, unz_file_info64_internal *pfile_info_internal, char *szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char *szComment, uLong commentBufferSize)
unz64local_SearchCentralDir	src/contrib/minizip/unzip.c	/^local ZPOS64_T unz64local_SearchCentralDir OF((const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream));$/;"	p	file:	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)
unz64local_SearchCentralDir	src/contrib/minizip/unzip.c	/^local ZPOS64_T unz64local_SearchCentralDir(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)$/;"	f	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)
unz64local_SearchCentralDir64	src/contrib/minizip/unzip.c	/^local ZPOS64_T unz64local_SearchCentralDir64 OF(($/;"	p	file:	signature:( const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)
unz64local_SearchCentralDir64	src/contrib/minizip/unzip.c	/^local ZPOS64_T unz64local_SearchCentralDir64(const zlib_filefunc64_32_def* pzlib_filefunc_def,$/;"	f	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)
unz64local_getByte	src/contrib/minizip/unzip.c	/^local int unz64local_getByte OF(($/;"	p	file:	signature:( const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, int *pi)
unz64local_getByte	src/contrib/minizip/unzip.c	/^local int unz64local_getByte(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, int *pi)$/;"	f	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, int *pi)
unz64local_getLong	src/contrib/minizip/unzip.c	/^local int unz64local_getLong (const zlib_filefunc64_32_def* pzlib_filefunc_def,$/;"	f	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong *pX)
unz64local_getLong	src/contrib/minizip/unzip.c	/^local int unz64local_getLong OF(($/;"	p	file:	signature:( const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong *pX)
unz64local_getLong64	src/contrib/minizip/unzip.c	/^local int unz64local_getLong64 (const zlib_filefunc64_32_def* pzlib_filefunc_def,$/;"	f	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T *pX)
unz64local_getLong64	src/contrib/minizip/unzip.c	/^local int unz64local_getLong64 OF(($/;"	p	file:	signature:( const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T *pX)
unz64local_getShort	src/contrib/minizip/unzip.c	/^local int unz64local_getShort (const zlib_filefunc64_32_def* pzlib_filefunc_def,$/;"	f	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong *pX)
unz64local_getShort	src/contrib/minizip/unzip.c	/^local int unz64local_getShort OF(($/;"	p	file:	signature:( const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong *pX)
unzClose	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzClose (unzFile file)$/;"	f	signature:(unzFile file)
unzClose	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzClose OF((unzFile file));$/;"	p	signature:(unzFile file)
unzCloseCurrentFile	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzCloseCurrentFile (unzFile file)$/;"	f	signature:(unzFile file)
unzCloseCurrentFile	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzCloseCurrentFile OF((unzFile file));$/;"	p	signature:(unzFile file)
unzFile	src/contrib/minizip/unzip.h	/^typedef unzFile__ *unzFile;$/;"	t
unzFile	src/contrib/minizip/unzip.h	/^typedef voidp unzFile;$/;"	t
unzFile__	src/contrib/minizip/unzip.h	/^typedef struct TagunzFile__ { int unused; } unzFile__;$/;"	t	typeref:struct:TagunzFile__
unzGetCurrentFileInfo	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzGetCurrentFileInfo (unzFile file,$/;"	f	signature:(unzFile file, unz_file_info * pfile_info, char * szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char* szComment, uLong commentBufferSize)
unzGetCurrentFileInfo	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzGetCurrentFileInfo OF((unzFile file,$/;"	p	signature:(unzFile file, unz_file_info *pfile_info, char *szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char *szComment, uLong commentBufferSize)
unzGetCurrentFileInfo64	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzGetCurrentFileInfo64 (unzFile file,$/;"	f	signature:(unzFile file, unz_file_info64 * pfile_info, char * szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char* szComment, uLong commentBufferSize)
unzGetCurrentFileInfo64	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzGetCurrentFileInfo64 OF((unzFile file,$/;"	p	signature:(unzFile file, unz_file_info64 *pfile_info, char *szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char *szComment, uLong commentBufferSize)
unzGetCurrentFileZStreamPos64	src/contrib/minizip/unzip.c	/^extern ZPOS64_T ZEXPORT unzGetCurrentFileZStreamPos64( unzFile file)$/;"	f	signature:( unzFile file)
unzGetCurrentFileZStreamPos64	src/contrib/minizip/unzip.h	/^extern ZPOS64_T ZEXPORT unzGetCurrentFileZStreamPos64 OF((unzFile file));$/;"	p	signature:(unzFile file)
unzGetFilePos	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzGetFilePos($/;"	f	signature:( unzFile file, unz_file_pos* file_pos)
unzGetFilePos	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzGetFilePos($/;"	p	signature:( unzFile file, unz_file_pos* file_pos)
unzGetFilePos64	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzGetFilePos64(unzFile file, unz64_file_pos*  file_pos)$/;"	f	signature:(unzFile file, unz64_file_pos* file_pos)
unzGetFilePos64	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzGetFilePos64($/;"	p	signature:( unzFile file, unz64_file_pos* file_pos)
unzGetGlobalComment	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzGetGlobalComment (unzFile file, char * szComment, uLong uSizeBuf)$/;"	f	signature:(unzFile file, char * szComment, uLong uSizeBuf)
unzGetGlobalComment	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzGetGlobalComment OF((unzFile file,$/;"	p	signature:(unzFile file, char *szComment, uLong uSizeBuf)
unzGetGlobalInfo	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzGetGlobalInfo (unzFile file, unz_global_info* pglobal_info32)$/;"	f	signature:(unzFile file, unz_global_info* pglobal_info32)
unzGetGlobalInfo	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzGetGlobalInfo OF((unzFile file,$/;"	p	signature:(unzFile file, unz_global_info *pglobal_info)
unzGetGlobalInfo64	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzGetGlobalInfo64 (unzFile file, unz_global_info64* pglobal_info)$/;"	f	signature:(unzFile file, unz_global_info64* pglobal_info)
unzGetGlobalInfo64	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzGetGlobalInfo64 OF((unzFile file,$/;"	p	signature:(unzFile file, unz_global_info64 *pglobal_info)
unzGetLocalExtrafield	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzGetLocalExtrafield (unzFile file, voidp buf, unsigned len)$/;"	f	signature:(unzFile file, voidp buf, unsigned len)
unzGetLocalExtrafield	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzGetLocalExtrafield OF((unzFile file,$/;"	p	signature:(unzFile file, voidp buf, unsigned len)
unzGetOffset	src/contrib/minizip/unzip.c	/^extern uLong ZEXPORT unzGetOffset (unzFile file)$/;"	f	signature:(unzFile file)
unzGetOffset	src/contrib/minizip/unzip.h	/^extern uLong ZEXPORT unzGetOffset (unzFile file);$/;"	p	signature:(unzFile file)
unzGetOffset64	src/contrib/minizip/unzip.c	/^extern ZPOS64_T ZEXPORT unzGetOffset64(unzFile file)$/;"	f	signature:(unzFile file)
unzGetOffset64	src/contrib/minizip/unzip.h	/^extern ZPOS64_T ZEXPORT unzGetOffset64 (unzFile file);$/;"	p	signature:(unzFile file)
unzGoToFilePos	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzGoToFilePos($/;"	f	signature:( unzFile file, unz_file_pos* file_pos)
unzGoToFilePos	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzGoToFilePos($/;"	p	signature:( unzFile file, unz_file_pos* file_pos)
unzGoToFilePos64	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzGoToFilePos64(unzFile file, const unz64_file_pos* file_pos)$/;"	f	signature:(unzFile file, const unz64_file_pos* file_pos)
unzGoToFilePos64	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzGoToFilePos64($/;"	p	signature:( unzFile file, const unz64_file_pos* file_pos)
unzGoToFirstFile	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzGoToFirstFile (unzFile file)$/;"	f	signature:(unzFile file)
unzGoToFirstFile	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzGoToFirstFile OF((unzFile file));$/;"	p	signature:(unzFile file)
unzGoToNextFile	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzGoToNextFile (unzFile  file)$/;"	f	signature:(unzFile file)
unzGoToNextFile	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzGoToNextFile OF((unzFile file));$/;"	p	signature:(unzFile file)
unzLocateFile	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzLocateFile (unzFile file, const char *szFileName, int iCaseSensitivity)$/;"	f	signature:(unzFile file, const char *szFileName, int iCaseSensitivity)
unzLocateFile	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzLocateFile OF((unzFile file,$/;"	p	signature:(unzFile file, const char *szFileName, int iCaseSensitivity)
unzOpen	src/contrib/minizip/unzip.c	/^extern unzFile ZEXPORT unzOpen (const char *path)$/;"	f	signature:(const char *path)
unzOpen	src/contrib/minizip/unzip.h	/^extern unzFile ZEXPORT unzOpen OF((const char *path));$/;"	p	signature:(const char *path)
unzOpen2	src/contrib/minizip/unzip.c	/^extern unzFile ZEXPORT unzOpen2 (const char *path,$/;"	f	signature:(const char *path, zlib_filefunc_def* pzlib_filefunc32_def)
unzOpen2	src/contrib/minizip/unzip.h	/^extern unzFile ZEXPORT unzOpen2 OF((const char *path,$/;"	p	signature:(const char *path, zlib_filefunc_def* pzlib_filefunc_def)
unzOpen2_64	src/contrib/minizip/unzip.c	/^extern unzFile ZEXPORT unzOpen2_64 (const void *path,$/;"	f	signature:(const void *path, zlib_filefunc64_def* pzlib_filefunc_def)
unzOpen2_64	src/contrib/minizip/unzip.h	/^extern unzFile ZEXPORT unzOpen2_64 OF((const void *path,$/;"	p	signature:(const void *path, zlib_filefunc64_def* pzlib_filefunc_def)
unzOpen64	src/contrib/minizip/unzip.c	/^extern unzFile ZEXPORT unzOpen64 (const void *path)$/;"	f	signature:(const void *path)
unzOpen64	src/contrib/minizip/unzip.h	/^extern unzFile ZEXPORT unzOpen64 OF((const void *path));$/;"	p	signature:(const void *path)
unzOpenCurrentFile	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzOpenCurrentFile (unzFile file)$/;"	f	signature:(unzFile file)
unzOpenCurrentFile	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzOpenCurrentFile OF((unzFile file));$/;"	p	signature:(unzFile file)
unzOpenCurrentFile2	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzOpenCurrentFile2 (unzFile file, int* method, int* level, int raw)$/;"	f	signature:(unzFile file, int* method, int* level, int raw)
unzOpenCurrentFile2	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzOpenCurrentFile2 OF((unzFile file,$/;"	p	signature:(unzFile file, int* method, int* level, int raw)
unzOpenCurrentFile3	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzOpenCurrentFile3 (unzFile file, int* method,$/;"	f	signature:(unzFile file, int* method, int* level, int raw, const char* password)
unzOpenCurrentFile3	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzOpenCurrentFile3 OF((unzFile file,$/;"	p	signature:(unzFile file, int* method, int* level, int raw, const char* password)
unzOpenCurrentFilePassword	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzOpenCurrentFilePassword (unzFile file, const char*  password)$/;"	f	signature:(unzFile file, const char* password)
unzOpenCurrentFilePassword	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzOpenCurrentFilePassword OF((unzFile file,$/;"	p	signature:(unzFile file, const char* password)
unzOpenInternal	src/contrib/minizip/unzip.c	/^local unzFile unzOpenInternal (const void *path,$/;"	f	signature:(const void *path, zlib_filefunc64_32_def* pzlib_filefunc64_32_def, int is64bitOpenFunction)
unzReadCurrentFile	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzReadCurrentFile  (unzFile file, voidp buf, unsigned len)$/;"	f	signature:(unzFile file, voidp buf, unsigned len)
unzReadCurrentFile	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzReadCurrentFile OF((unzFile file,$/;"	p	signature:(unzFile file, voidp buf, unsigned len)
unzRepair	src/contrib/minizip/mztools.c	/^extern int ZEXPORT unzRepair(file, fileOut, fileOutTmp, nRecovered, bytesRecovered)$/;"	f
unzRepair	src/contrib/minizip/mztools.h	/^extern int ZEXPORT unzRepair(const char* file,$/;"	p	signature:(const char* file, const char* fileOut, const char* fileOutTmp, uLong* nRecovered, uLong* bytesRecovered)
unzSetOffset	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzSetOffset (unzFile file, uLong pos)$/;"	f	signature:(unzFile file, uLong pos)
unzSetOffset	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzSetOffset (unzFile file, uLong pos);$/;"	p	signature:(unzFile file, uLong pos)
unzSetOffset64	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzSetOffset64(unzFile file, ZPOS64_T pos)$/;"	f	signature:(unzFile file, ZPOS64_T pos)
unzSetOffset64	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzSetOffset64 (unzFile file, ZPOS64_T pos);$/;"	p	signature:(unzFile file, ZPOS64_T pos)
unzStringFileNameCompare	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzStringFileNameCompare (const char*  fileName1,$/;"	f	signature:(const char* fileName1, const char* fileName2, int iCaseSensitivity)
unzStringFileNameCompare	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzStringFileNameCompare OF ((const char* fileName1,$/;"	p	signature:(const char* fileName1, const char* fileName2, int iCaseSensitivity)
unz_copyright	src/contrib/minizip/unzip.c	/^const char unz_copyright[] =$/;"	v
unz_file_info	src/contrib/minizip/unzip.h	/^} unz_file_info;$/;"	t	typeref:struct:unz_file_info_s
unz_file_info64	src/contrib/minizip/unzip.h	/^} unz_file_info64;$/;"	t	typeref:struct:unz_file_info64_s
unz_file_info64_internal	src/contrib/minizip/unzip.c	/^} unz_file_info64_internal;$/;"	t	typeref:struct:unz_file_info64_internal_s	file:
unz_file_info64_internal_s	src/contrib/minizip/unzip.c	/^typedef struct unz_file_info64_internal_s$/;"	s	file:
unz_file_info64_internal_s::offset_curfile	src/contrib/minizip/unzip.c	/^    ZPOS64_T offset_curfile;\/* relative offset of local header 8 bytes *\/$/;"	m	struct:unz_file_info64_internal_s	file:	access:public
unz_file_info64_s	src/contrib/minizip/unzip.h	/^typedef struct unz_file_info64_s$/;"	s
unz_file_info64_s::compressed_size	src/contrib/minizip/unzip.h	/^    ZPOS64_T compressed_size;   \/* compressed size                 8 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
unz_file_info64_s::compression_method	src/contrib/minizip/unzip.h	/^    uLong compression_method;   \/* compression method              2 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
unz_file_info64_s::crc	src/contrib/minizip/unzip.h	/^    uLong crc;                  \/* crc-32                          4 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
unz_file_info64_s::disk_num_start	src/contrib/minizip/unzip.h	/^    uLong disk_num_start;       \/* disk number start               2 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
unz_file_info64_s::dosDate	src/contrib/minizip/unzip.h	/^    uLong dosDate;              \/* last mod file date in Dos fmt   4 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
unz_file_info64_s::external_fa	src/contrib/minizip/unzip.h	/^    uLong external_fa;          \/* external file attributes        4 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
unz_file_info64_s::flag	src/contrib/minizip/unzip.h	/^    uLong flag;                 \/* general purpose bit flag        2 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
unz_file_info64_s::internal_fa	src/contrib/minizip/unzip.h	/^    uLong internal_fa;          \/* internal file attributes        2 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
unz_file_info64_s::size_file_comment	src/contrib/minizip/unzip.h	/^    uLong size_file_comment;    \/* file comment length             2 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
unz_file_info64_s::size_file_extra	src/contrib/minizip/unzip.h	/^    uLong size_file_extra;      \/* extra field length              2 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
unz_file_info64_s::size_filename	src/contrib/minizip/unzip.h	/^    uLong size_filename;        \/* filename length                 2 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
unz_file_info64_s::tmu_date	src/contrib/minizip/unzip.h	/^    tm_unz tmu_date;$/;"	m	struct:unz_file_info64_s	access:public
unz_file_info64_s::uncompressed_size	src/contrib/minizip/unzip.h	/^    ZPOS64_T uncompressed_size; \/* uncompressed size               8 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
unz_file_info64_s::version	src/contrib/minizip/unzip.h	/^    uLong version;              \/* version made by                 2 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
unz_file_info64_s::version_needed	src/contrib/minizip/unzip.h	/^    uLong version_needed;       \/* version needed to extract       2 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
unz_file_info_s	src/contrib/minizip/unzip.h	/^typedef struct unz_file_info_s$/;"	s
unz_file_info_s::compressed_size	src/contrib/minizip/unzip.h	/^    uLong compressed_size;      \/* compressed size                 4 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
unz_file_info_s::compression_method	src/contrib/minizip/unzip.h	/^    uLong compression_method;   \/* compression method              2 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
unz_file_info_s::crc	src/contrib/minizip/unzip.h	/^    uLong crc;                  \/* crc-32                          4 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
unz_file_info_s::disk_num_start	src/contrib/minizip/unzip.h	/^    uLong disk_num_start;       \/* disk number start               2 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
unz_file_info_s::dosDate	src/contrib/minizip/unzip.h	/^    uLong dosDate;              \/* last mod file date in Dos fmt   4 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
unz_file_info_s::external_fa	src/contrib/minizip/unzip.h	/^    uLong external_fa;          \/* external file attributes        4 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
unz_file_info_s::flag	src/contrib/minizip/unzip.h	/^    uLong flag;                 \/* general purpose bit flag        2 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
unz_file_info_s::internal_fa	src/contrib/minizip/unzip.h	/^    uLong internal_fa;          \/* internal file attributes        2 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
unz_file_info_s::size_file_comment	src/contrib/minizip/unzip.h	/^    uLong size_file_comment;    \/* file comment length             2 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
unz_file_info_s::size_file_extra	src/contrib/minizip/unzip.h	/^    uLong size_file_extra;      \/* extra field length              2 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
unz_file_info_s::size_filename	src/contrib/minizip/unzip.h	/^    uLong size_filename;        \/* filename length                 2 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
unz_file_info_s::tmu_date	src/contrib/minizip/unzip.h	/^    tm_unz tmu_date;$/;"	m	struct:unz_file_info_s	access:public
unz_file_info_s::uncompressed_size	src/contrib/minizip/unzip.h	/^    uLong uncompressed_size;    \/* uncompressed size               4 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
unz_file_info_s::version	src/contrib/minizip/unzip.h	/^    uLong version;              \/* version made by                 2 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
unz_file_info_s::version_needed	src/contrib/minizip/unzip.h	/^    uLong version_needed;       \/* version needed to extract       2 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
unz_file_pos	src/contrib/minizip/unzip.h	/^} unz_file_pos;$/;"	t	typeref:struct:unz_file_pos_s
unz_file_pos_s	src/contrib/minizip/unzip.h	/^typedef struct unz_file_pos_s$/;"	s
unz_file_pos_s::num_of_file	src/contrib/minizip/unzip.h	/^    uLong num_of_file;            \/* # of file *\/$/;"	m	struct:unz_file_pos_s	access:public
unz_file_pos_s::pos_in_zip_directory	src/contrib/minizip/unzip.h	/^    uLong pos_in_zip_directory;   \/* offset in zip file directory *\/$/;"	m	struct:unz_file_pos_s	access:public
unz_global_info	src/contrib/minizip/unzip.h	/^} unz_global_info;$/;"	t	typeref:struct:unz_global_info_s
unz_global_info64	src/contrib/minizip/unzip.h	/^} unz_global_info64;$/;"	t	typeref:struct:unz_global_info64_s
unz_global_info64_s	src/contrib/minizip/unzip.h	/^typedef struct unz_global_info64_s$/;"	s
unz_global_info64_s::number_entry	src/contrib/minizip/unzip.h	/^    ZPOS64_T number_entry;         \/* total number of entries in$/;"	m	struct:unz_global_info64_s	access:public
unz_global_info64_s::size_comment	src/contrib/minizip/unzip.h	/^    uLong size_comment;         \/* size of the global comment of the zipfile *\/$/;"	m	struct:unz_global_info64_s	access:public
unz_global_info_s	src/contrib/minizip/unzip.h	/^typedef struct unz_global_info_s$/;"	s
unz_global_info_s::number_entry	src/contrib/minizip/unzip.h	/^    uLong number_entry;         \/* total number of entries in$/;"	m	struct:unz_global_info_s	access:public
unz_global_info_s::size_comment	src/contrib/minizip/unzip.h	/^    uLong size_comment;         \/* size of the global comment of the zipfile *\/$/;"	m	struct:unz_global_info_s	access:public
unzeof	src/contrib/minizip/unzip.c	/^extern int ZEXPORT unzeof (unzFile file)$/;"	f	signature:(unzFile file)
unzeof	src/contrib/minizip/unzip.h	/^extern int ZEXPORT unzeof OF((unzFile file));$/;"	p	signature:(unzFile file)
unztell	src/contrib/minizip/unzip.c	/^extern z_off_t ZEXPORT unztell (unzFile file)$/;"	f	signature:(unzFile file)
unztell	src/contrib/minizip/unzip.h	/^extern z_off_t ZEXPORT unztell OF((unzFile file));$/;"	p	signature:(unzFile file)
unztell64	src/contrib/minizip/unzip.c	/^extern ZPOS64_T ZEXPORT unztell64 (unzFile file)$/;"	f	signature:(unzFile file)
unztell64	src/contrib/minizip/unzip.h	/^extern ZPOS64_T ZEXPORT unztell64 OF((unzFile file));$/;"	p	signature:(unzFile file)
update_keys	src/contrib/minizip/crypt.h	/^static int update_keys(unsigned long* pkeys,const z_crc_t* pcrc_32_tab,int c)$/;"	f	signature:(unsigned long* pkeys,const z_crc_t* pcrc_32_tab,int c)
updatewindow	src/inflate.c	/^local int updatewindow OF((z_streamp strm, const unsigned char FAR *end,$/;"	p	file:	signature:(z_streamp strm, const unsigned char FAR *end, unsigned copy)
updatewindow	src/inflate.c	/^local int updatewindow(strm, end, copy)$/;"	f
used_mm	src/contrib/inflate86/inffast.S	/^#define used_mm   %mm1$/;"	d
ush	src/zutil.h	/^typedef unsigned short ush;$/;"	t
ush	zutil.h	/^typedef unsigned short ush;$/;"	t
ushf	src/zutil.h	/^typedef ush FAR ushf;$/;"	t
ushf	zutil.h	/^typedef ush FAR ushf;$/;"	t
v1	src/contrib/iostream3/zfstream.h	/^                              T1 v1,$/;"	v
v1	src/contrib/iostream3/zfstream.h	/^              T1 v1,$/;"	m	class:gzomanip2	access:public
v2	src/contrib/iostream3/zfstream.h	/^              T2 v2);$/;"	m	class:gzomanip2	access:public
val	src/contrib/infback9/inftree9.h	/^    unsigned short val;         \/* offset in table or code value *\/$/;"	m	struct:__anon12	access:public
val	src/contrib/iostream/zfstream.h	/^  T val;$/;"	m	class:gzomanip	access:private
val	src/contrib/iostream/zfstream.h	/^  gzomanip(gzofstream &(*f)(gzofstream &, T), T v) : func(f), val(v) { }$/;"	f	class:gzomanip	access:public	signature:(v)
val	src/contrib/iostream2/zstream.h	/^    struct Val { unsigned char byte; size_t word; } val;$/;"	m	class:zstringlen	typeref:struct:zstringlen::Val	access:private
val	src/inftrees.h	/^    unsigned short val;         \/* offset in table or code value *\/$/;"	m	struct:__anon16	access:public
val1	src/contrib/iostream3/zfstream.h	/^    T1 val1;$/;"	m	class:gzomanip2	access:private
val1	src/contrib/iostream3/zfstream.h	/^  : func(f), val1(v1), val2(v2)$/;"	p	signature:(v1)
val2	src/contrib/iostream3/zfstream.h	/^    T2 val2;$/;"	m	class:gzomanip2	access:private
val2	src/contrib/iostream3/zfstream.h	/^  : func(f), val1(v1), val2(v2)$/;"	f	signature:(v2)
value	src/contrib/iostream2/zstream.h	/^    size_t value() const { return val.word; }$/;"	f	class:zstringlen	access:public	signature:() const
vec	src/examples/enough.c	/^    char *vec;          \/* allocated bit vector *\/$/;"	m	struct:tab	file:	access:public
verbose	src/zutil.c	121;"	d	file:
version	src/contrib/minizip/unzip.h	/^    uLong version;              \/* version made by                 2 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
version	src/contrib/minizip/unzip.h	/^    uLong version;              \/* version made by                 2 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
version	src/contrib/untgz/untgz.c	/^  char version[2];              \/* 263 *\/$/;"	m	struct:tar_header	file:	access:public
version_needed	src/contrib/minizip/unzip.h	/^    uLong version_needed;       \/* version needed to extract       2 bytes *\/$/;"	m	struct:unz_file_info64_s	access:public
version_needed	src/contrib/minizip/unzip.h	/^    uLong version_needed;       \/* version needed to extract       2 bytes *\/$/;"	m	struct:unz_file_info_s	access:public
voidp	src/zconf.h	/^   typedef Byte       *voidp;$/;"	t
voidp	src/zconf.h	/^   typedef void       *voidp;$/;"	t
voidp	src/zconf.h	145;"	d
voidp	zconf.h	/^   typedef Byte       *voidp;$/;"	t
voidp	zconf.h	/^   typedef void       *voidp;$/;"	t
voidp	zconf.h	145;"	d
voidpc	src/zconf.h	/^   typedef Byte const *voidpc;$/;"	t
voidpc	src/zconf.h	/^   typedef void const *voidpc;$/;"	t
voidpc	src/zconf.h	146;"	d
voidpc	zconf.h	/^   typedef Byte const *voidpc;$/;"	t
voidpc	zconf.h	/^   typedef void const *voidpc;$/;"	t
voidpc	zconf.h	146;"	d
voidpf	src/zconf.h	/^   typedef Byte FAR   *voidpf;$/;"	t
voidpf	src/zconf.h	/^   typedef void FAR   *voidpf;$/;"	t
voidpf	src/zconf.h	147;"	d
voidpf	zconf.h	/^   typedef Byte FAR   *voidpf;$/;"	t
voidpf	zconf.h	/^   typedef void FAR   *voidpf;$/;"	t
voidpf	zconf.h	147;"	d
vsnprintf	src/gzguts.h	80;"	d
w_bits	src/deflate.h	/^    uInt  w_bits;        \/* log2(w_size)  (8..16) *\/$/;"	m	struct:internal_state	access:public
w_mask	src/deflate.h	/^    uInt  w_mask;        \/* w_size - 1 *\/$/;"	m	struct:internal_state	access:public
w_size	src/deflate.h	/^    uInt  w_size;        \/* LZ77 window size (32K by default) *\/$/;"	m	struct:internal_state	access:public
want	src/gzguts.h	/^    unsigned want;          \/* requested buffer size, default is GZBUFSIZE *\/$/;"	m	struct:__anon1	access:public
was	src/inflate.h	/^    unsigned was;               \/* initial length of match *\/$/;"	m	struct:inflate_state	access:public
wbits	src/inflate.h	/^    unsigned wbits;             \/* log base 2 of requested window size *\/$/;"	m	struct:inflate_state	access:public
whave	src/inflate.h	/^    unsigned whave;             \/* valid bytes in the window *\/$/;"	m	struct:inflate_state	access:public
win32_build_iowin	src/contrib/minizip/iowin32.c	/^static voidpf win32_build_iowin(HANDLE hFile)$/;"	f	file:	signature:(HANDLE hFile)
win32_close_file_func	src/contrib/minizip/iowin32.c	/^int     ZCALLBACK win32_close_file_func OF((voidpf opaque, voidpf stream));$/;"	p	file:	signature:(voidpf opaque, voidpf stream)
win32_close_file_func	src/contrib/minizip/iowin32.c	/^int ZCALLBACK win32_close_file_func (voidpf opaque, voidpf stream)$/;"	f	signature:(voidpf opaque, voidpf stream)
win32_error_file_func	src/contrib/minizip/iowin32.c	/^int     ZCALLBACK win32_error_file_func OF((voidpf opaque, voidpf stream));$/;"	p	file:	signature:(voidpf opaque, voidpf stream)
win32_error_file_func	src/contrib/minizip/iowin32.c	/^int ZCALLBACK win32_error_file_func (voidpf opaque,voidpf stream)$/;"	f	signature:(voidpf opaque,voidpf stream)
win32_open64_file_func	src/contrib/minizip/iowin32.c	/^voidpf ZCALLBACK win32_open64_file_func (voidpf opaque,const void* filename,int mode)$/;"	f	signature:(voidpf opaque,const void* filename,int mode)
win32_open64_file_funcA	src/contrib/minizip/iowin32.c	/^voidpf ZCALLBACK win32_open64_file_funcA (voidpf opaque,const void* filename,int mode)$/;"	f	signature:(voidpf opaque,const void* filename,int mode)
win32_open64_file_funcW	src/contrib/minizip/iowin32.c	/^voidpf ZCALLBACK win32_open64_file_funcW (voidpf opaque,const void* filename,int mode)$/;"	f	signature:(voidpf opaque,const void* filename,int mode)
win32_open_file_func	src/contrib/minizip/iowin32.c	/^voidpf  ZCALLBACK win32_open_file_func  OF((voidpf opaque, const char* filename, int mode));$/;"	p	file:	signature:(voidpf opaque, const char* filename, int mode)
win32_open_file_func	src/contrib/minizip/iowin32.c	/^voidpf ZCALLBACK win32_open_file_func (voidpf opaque,const char* filename,int mode)$/;"	f	signature:(voidpf opaque,const char* filename,int mode)
win32_read_file_func	src/contrib/minizip/iowin32.c	/^uLong   ZCALLBACK win32_read_file_func  OF((voidpf opaque, voidpf stream, void* buf, uLong size));$/;"	p	file:	signature:(voidpf opaque, voidpf stream, void* buf, uLong size)
win32_read_file_func	src/contrib/minizip/iowin32.c	/^uLong ZCALLBACK win32_read_file_func (voidpf opaque, voidpf stream, void* buf,uLong size)$/;"	f	signature:(voidpf opaque, voidpf stream, void* buf,uLong size)
win32_seek64_file_func	src/contrib/minizip/iowin32.c	/^long    ZCALLBACK win32_seek64_file_func  OF((voidpf opaque, voidpf stream, ZPOS64_T offset, int origin));$/;"	p	file:	signature:(voidpf opaque, voidpf stream, ZPOS64_T offset, int origin)
win32_seek64_file_func	src/contrib/minizip/iowin32.c	/^long ZCALLBACK win32_seek64_file_func (voidpf opaque, voidpf stream,ZPOS64_T offset,int origin)$/;"	f	signature:(voidpf opaque, voidpf stream,ZPOS64_T offset,int origin)
win32_seek_file_func	src/contrib/minizip/iowin32.c	/^long ZCALLBACK win32_seek_file_func (voidpf opaque,voidpf stream,uLong offset,int origin)$/;"	f	signature:(voidpf opaque,voidpf stream,uLong offset,int origin)
win32_tell64_file_func	src/contrib/minizip/iowin32.c	/^ZPOS64_T ZCALLBACK win32_tell64_file_func  OF((voidpf opaque, voidpf stream));$/;"	p	file:	signature:(voidpf opaque, voidpf stream)
win32_tell64_file_func	src/contrib/minizip/iowin32.c	/^ZPOS64_T ZCALLBACK win32_tell64_file_func (voidpf opaque, voidpf stream)$/;"	f	signature:(voidpf opaque, voidpf stream)
win32_tell_file_func	src/contrib/minizip/iowin32.c	/^long ZCALLBACK win32_tell_file_func (voidpf opaque,voidpf stream)$/;"	f	signature:(voidpf opaque,voidpf stream)
win32_translate_open_mode	src/contrib/minizip/iowin32.c	/^static void win32_translate_open_mode(int mode,$/;"	f	file:	signature:(int mode, DWORD* lpdwDesiredAccess, DWORD* lpdwCreationDisposition, DWORD* lpdwShareMode, DWORD* lpdwFlagsAndAttributes)
win32_write_file_func	src/contrib/minizip/iowin32.c	/^uLong   ZCALLBACK win32_write_file_func OF((voidpf opaque, voidpf stream, const void* buf, uLong size));$/;"	p	file:	signature:(voidpf opaque, voidpf stream, const void* buf, uLong size)
win32_write_file_func	src/contrib/minizip/iowin32.c	/^uLong ZCALLBACK win32_write_file_func (voidpf opaque,voidpf stream,const void* buf,uLong size)$/;"	f	signature:(voidpf opaque,voidpf stream,const void* buf,uLong size)
window	src/contrib/amd64/amd64-match.S	/^#define	window		r10$/;"	d
window	src/contrib/asm686/match.S	/^#define	window			4	\/* local copy of s->window	*\/$/;"	d
window	src/contrib/infback9/inflate9.h	/^    unsigned char FAR *window;  \/* allocated sliding window, if needed *\/$/;"	m	struct:inflate_state	access:public
window	src/contrib/inflate86/inffast.S	/^#define window         56  \/* unsigned char* *\/$/;"	d
window	src/contrib/masmx64/inffas8664.c	/^\/* 56   28 *\/ unsigned char FAR *window;\/*          size of window, wsize!=0 *\/$/;"	m	struct:inffast_ar	file:	access:public
window	src/contrib/masmx86/match686.asm	/^    window          equ     dword ptr [esp+NbStack-40]$/;"	d
window	src/contrib/masmx86/match686.asm	/^window      equ  esp + 4    ; local copy of s->window$/;"	d
window	src/deflate.h	/^    Bytef *window;$/;"	m	struct:internal_state	access:public
window	src/examples/zran.c	/^    unsigned char window[WINSIZE];  \/* preceding 32K of uncompressed data *\/$/;"	m	struct:point	file:	access:public
window	src/inflate.h	/^    unsigned char FAR *window;  \/* allocated sliding window, if needed *\/$/;"	m	struct:inflate_state	access:public
window_ad	src/contrib/gcc_gvmat64/gvmat64.S	/^#define window_ad        [ rcx + dsWindow]$/;"	d
window_ad	src/contrib/masmx64/gvmat64.asm	/^window_ad       equ [ rcx + dsWindow]$/;"	d
window_ad	src/contrib/masmx64/gvmat64.asm	/^window_ad equ OFFSET window$/;"	d
window_size	src/contrib/gcc_gvmat64/gvmat64.S	/^#define window_size      [ rcx + dsWSize]$/;"	d
window_size	src/contrib/masmx64/gvmat64.asm	/^window_size     equ [ rcx + dsWSize]$/;"	d
window_size	src/deflate.h	/^    ulg window_size;$/;"	m	struct:internal_state	access:public
window_state	src/contrib/inflate86/inffast.S	/^#define window_state   44  \/* state->window *\/$/;"	d
window_state	src/contrib/masmx86/inffas32.asm	/^window_state	 equ	(40+4+zlib1222sup)	;\/* state->window *\/$/;"	d
windowbestlen	src/contrib/amd64/amd64-match.S	/^#define	windowbestlen	r8$/;"	d
windowbestlen	src/contrib/asm686/match.S	/^#define	windowbestlen		8	\/* s->window + bestlen		*\/$/;"	d
windowbestlen	src/contrib/masmx86/match686.asm	/^windowbestlen   equ  esp + 8    ; s->window + bestlen$/;"	d
windowlen	src/contrib/masmx86/match686.asm	/^    windowlen       equ     dword ptr [esp+NbStack-68]$/;"	d
wmask	src/contrib/masmx86/match686.asm	/^    wmask           equ     dword ptr [esp+NbStack-52]$/;"	d
wnext	src/inflate.h	/^    unsigned wnext;             \/* window write index *\/$/;"	m	struct:inflate_state	access:public
word	src/contrib/iostream2/zstream.h	/^    struct Val { unsigned char byte; size_t word; } val;$/;"	m	struct:zstringlen::Val	access:public
work	src/contrib/infback9/inflate9.h	/^    unsigned short work[288];   \/* work area for code table building *\/$/;"	m	struct:inflate_state	access:public
work	src/inflate.h	/^    unsigned short work[288];   \/* work area for code table building *\/$/;"	m	struct:inflate_state	access:public
wrap	src/deflate.h	/^    int   wrap;          \/* bit 0 true for zlib, bit 1 true for gzip *\/$/;"	m	struct:internal_state	access:public
wrap	src/inflate.h	/^    int wrap;                   \/* bit 0 true for zlib, bit 1 true for gzip *\/$/;"	m	struct:inflate_state	access:public
write	src/contrib/inflate86/inffast.S	/^#define write          48  \/* unsigned int *\/$/;"	d
write	src/contrib/iostream2/zstream.h	/^        int write(const void* buf, size_t len) {$/;"	f	class:ozstream	access:public	signature:(const void* buf, size_t len)
write	src/contrib/iostream2/zstream.h	/^inline int write(ozstream& zs, const T* x, Items items) {$/;"	f	signature:(ozstream& zs, const T* x, Items items)
write	src/contrib/masmx64/inffas8664.c	/^\/* 96   52 *\/ unsigned write;           \/*          window write index *\/$/;"	m	struct:inffast_ar	file:	access:public
write	src/gzguts.h	41;"	d
write	src/test/minigzip.c	/^    int write;$/;"	m	struct:gzFile_s	file:	access:public
write_r	src/contrib/inflate86/inffast.S	/^#define write_r %eax$/;"	d
write_state	src/contrib/inflate86/inffast.S	/^#define write_state    40  \/* state->write *\/$/;"	d
write_state	src/contrib/masmx86/inffas32.asm	/^write_state	 equ	(36+4+zlib1222sup)	;\/* state->write *\/$/;"	d
write_table	src/crc32.c	/^   local void write_table OF((FILE *, const z_crc_t FAR *));$/;"	p	file:	signature:(FILE *, const z_crc_t FAR *)
write_table	src/crc32.c	/^local void write_table(out, table)$/;"	f
wsize	src/contrib/inflate86/inffast.S	/^#define wsize          52  \/* unsigned int *\/$/;"	d
wsize	src/contrib/masmx64/inffas8664.c	/^\/* 92   48 *\/ unsigned wsize;           \/*          window size *\/$/;"	m	struct:inffast_ar	file:	access:public
wsize	src/inflate.h	/^    unsigned wsize;             \/* window size or zero if not using window *\/$/;"	m	struct:inflate_state	access:public
wsize_state	src/contrib/inflate86/inffast.S	/^#define wsize_state    32  \/* state->wsize *\/$/;"	d
wsize_state	src/contrib/masmx86/inffas32.asm	/^wsize_state	 equ	(32+zlib1222sup)	;\/* state->wsize *\/$/;"	d
x	src/gzguts.h	/^    struct gzFile_s x;      \/* "x" for exposed *\/$/;"	m	struct:__anon1	typeref:struct:__anon1::gzFile_s	access:public
xflags	src/zlib.h	/^    int     xflags;     \/* extra flags (not used when writing a gzip file) *\/$/;"	m	struct:gz_header_s	access:public
xflags	zlib.h	/^    int     xflags;     \/* extra flags (not used when writing a gzip file) *\/$/;"	m	struct:gz_header_s	access:public
zError	src/zconf.h	119;"	d
zError	src/zlib.h	/^ZEXTERN const char   * ZEXPORT zError           OF((int));$/;"	p	signature:(int)
zError	src/zutil.c	/^const char * ZEXPORT zError(err)$/;"	f
zError	zconf.h	119;"	d
zError	zlib.h	/^ZEXTERN const char   * ZEXPORT zError           OF((int));$/;"	p	signature:(int)
z_adler32_combine	src/zlib.h	1706;"	d
z_adler32_combine	zlib.h	1706;"	d
z_const	src/zconf.h	222;"	d
z_const	src/zconf.h	224;"	d
z_const	zconf.h	222;"	d
z_const	zconf.h	224;"	d
z_crc32_combine	src/zlib.h	1707;"	d
z_crc32_combine	zlib.h	1707;"	d
z_crc_t	src/zconf.h	/^   typedef Z_U4 z_crc_t;$/;"	t
z_crc_t	src/zconf.h	/^   typedef unsigned long z_crc_t;$/;"	t
z_crc_t	zconf.h	/^   typedef Z_U4 z_crc_t;$/;"	t
z_crc_t	zconf.h	/^   typedef unsigned long z_crc_t;$/;"	t
z_errmsg	src/zutil.c	/^z_const char * const z_errmsg[10] = {$/;"	v
z_error	src/zutil.c	/^void ZLIB_INTERNAL z_error (m)$/;"	f
z_error	src/zutil.h	/^   extern void ZLIB_INTERNAL z_error OF((char *m));$/;"	p	signature:(char *m)
z_error	zutil.h	/^   extern void ZLIB_INTERNAL z_error OF((char *m));$/;"	p	signature:(char *m)
z_filefunc	src/contrib/minizip/unzip.c	/^    zlib_filefunc64_32_def z_filefunc;$/;"	m	struct:__anon7	file:	access:public
z_filefunc	src/contrib/minizip/unzip.c	/^    zlib_filefunc64_32_def z_filefunc;$/;"	m	struct:__anon8	file:	access:public
z_filefunc	src/contrib/minizip/zip.c	/^    zlib_filefunc64_32_def z_filefunc;$/;"	m	struct:__anon10	file:	access:public
z_gzgetc	src/gzread.c	383;"	d	file:
z_gzgetc	src/zlib.h	1677;"	d
z_gzgetc	src/zlib.h	1678;"	d
z_gzgetc	zlib.h	1677;"	d
z_gzgetc	zlib.h	1678;"	d
z_gzoffset	src/zlib.h	1705;"	d
z_gzoffset	zlib.h	1705;"	d
z_gzopen	src/zlib.h	1702;"	d
z_gzopen	zlib.h	1702;"	d
z_gzseek	src/zlib.h	1703;"	d
z_gzseek	zlib.h	1703;"	d
z_gztell	src/zlib.h	1704;"	d
z_gztell	zlib.h	1704;"	d
z_off64_t	src/zconf.h	485;"	d
z_off64_t	src/zconf.h	488;"	d
z_off64_t	src/zconf.h	490;"	d
z_off64_t	zconf.h	485;"	d
z_off64_t	zconf.h	488;"	d
z_off64_t	zconf.h	490;"	d
z_off_t	src/zconf.h	457;"	d
z_off_t	src/zconf.h	481;"	d
z_off_t	zconf.h	457;"	d
z_off_t	zconf.h	481;"	d
z_stream	src/zlib.h	/^} z_stream;$/;"	t	typeref:struct:z_stream_s
z_stream	zlib.h	/^} z_stream;$/;"	t	typeref:struct:z_stream_s
z_stream_s	src/zlib.h	/^typedef struct z_stream_s {$/;"	s
z_stream_s	zlib.h	/^typedef struct z_stream_s {$/;"	s
z_stream_s::adler	src/zlib.h	/^    uLong   adler;      \/* adler32 value of the uncompressed data *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::adler	zlib.h	/^    uLong   adler;      \/* adler32 value of the uncompressed data *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::avail_in	src/zlib.h	/^    uInt     avail_in;  \/* number of bytes available at next_in *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::avail_in	zlib.h	/^    uInt     avail_in;  \/* number of bytes available at next_in *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::avail_out	src/zlib.h	/^    uInt     avail_out; \/* remaining free space at next_out *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::avail_out	zlib.h	/^    uInt     avail_out; \/* remaining free space at next_out *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::data_type	src/zlib.h	/^    int     data_type;  \/* best guess about the data type: binary or text *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::data_type	zlib.h	/^    int     data_type;  \/* best guess about the data type: binary or text *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::msg	src/zlib.h	/^    z_const char *msg;  \/* last error message, NULL if no error *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::msg	zlib.h	/^    z_const char *msg;  \/* last error message, NULL if no error *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::next_in	src/zlib.h	/^    z_const Bytef *next_in;     \/* next input byte *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::next_in	zlib.h	/^    z_const Bytef *next_in;     \/* next input byte *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::next_out	src/zlib.h	/^    Bytef    *next_out; \/* next output byte should be put there *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::next_out	zlib.h	/^    Bytef    *next_out; \/* next output byte should be put there *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::opaque	src/zlib.h	/^    voidpf     opaque;  \/* private data object passed to zalloc and zfree *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::opaque	zlib.h	/^    voidpf     opaque;  \/* private data object passed to zalloc and zfree *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::reserved	src/zlib.h	/^    uLong   reserved;   \/* reserved for future use *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::reserved	zlib.h	/^    uLong   reserved;   \/* reserved for future use *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::state	src/zlib.h	/^    struct internal_state FAR *state; \/* not visible by applications *\/$/;"	m	struct:z_stream_s	typeref:struct:z_stream_s::FAR	access:public
z_stream_s::state	zlib.h	/^    struct internal_state FAR *state; \/* not visible by applications *\/$/;"	m	struct:z_stream_s	typeref:struct:z_stream_s::FAR	access:public
z_stream_s::total_in	src/zlib.h	/^    uLong    total_in;  \/* total number of input bytes read so far *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::total_in	zlib.h	/^    uLong    total_in;  \/* total number of input bytes read so far *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::total_out	src/zlib.h	/^    uLong    total_out; \/* total number of bytes output so far *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::total_out	zlib.h	/^    uLong    total_out; \/* total number of bytes output so far *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::zalloc	src/zlib.h	/^    alloc_func zalloc;  \/* used to allocate the internal state *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::zalloc	zlib.h	/^    alloc_func zalloc;  \/* used to allocate the internal state *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::zfree	src/zlib.h	/^    free_func  zfree;   \/* used to free the internal state *\/$/;"	m	struct:z_stream_s	access:public
z_stream_s::zfree	zlib.h	/^    free_func  zfree;   \/* used to free the internal state *\/$/;"	m	struct:z_stream_s	access:public
z_streamp	src/zlib.h	/^typedef z_stream FAR *z_streamp;$/;"	t
z_streamp	zlib.h	/^typedef z_stream FAR *z_streamp;$/;"	t
z_verbose	src/zutil.c	/^int ZLIB_INTERNAL z_verbose = verbose;$/;"	v
zalloc	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        uint zalloc;$/;"	f	struct:DotZLib.ZStream	access:public
zalloc	src/test/example.c	/^static alloc_func zalloc = (alloc_func)0;$/;"	v	file:
zalloc	src/test/example.c	/^static alloc_func zalloc = myalloc;$/;"	v	file:
zalloc	src/zlib.h	/^    alloc_func zalloc;  \/* used to allocate the internal state *\/$/;"	m	struct:z_stream_s	access:public
zalloc	zlib.h	/^    alloc_func zalloc;  \/* used to allocate the internal state *\/$/;"	m	struct:z_stream_s	access:public
zcalloc	src/zconf.h	121;"	d
zcalloc	src/zutil.c	/^voidpf ZLIB_INTERNAL zcalloc (opaque, items, size)$/;"	f
zcalloc	src/zutil.c	/^voidpf ZLIB_INTERNAL zcalloc (voidpf opaque, uInt items, uInt size)$/;"	f	signature:(voidpf opaque, uInt items, uInt size)
zcalloc	src/zutil.c	/^voidpf ZLIB_INTERNAL zcalloc (voidpf opaque, unsigned items, unsigned size)$/;"	f	signature:(voidpf opaque, unsigned items, unsigned size)
zcalloc	src/zutil.h	/^   voidpf ZLIB_INTERNAL zcalloc OF((voidpf opaque, unsigned items,$/;"	p	signature:(voidpf opaque, unsigned items, unsigned size)
zcalloc	zconf.h	121;"	d
zcalloc	zutil.h	/^   voidpf ZLIB_INTERNAL zcalloc OF((voidpf opaque, unsigned items,$/;"	p	signature:(voidpf opaque, unsigned items, unsigned size)
zcfree	src/zconf.h	122;"	d
zcfree	src/zutil.c	/^void ZLIB_INTERNAL zcfree (opaque, ptr)$/;"	f
zcfree	src/zutil.c	/^void ZLIB_INTERNAL zcfree (voidpf opaque, voidpf ptr)$/;"	f	signature:(voidpf opaque, voidpf ptr)
zcfree	src/zutil.h	/^   void ZLIB_INTERNAL zcfree  OF((voidpf opaque, voidpf ptr));$/;"	p	signature:(voidpf opaque, voidpf ptr)
zcfree	zconf.h	122;"	d
zcfree	zutil.h	/^   void ZLIB_INTERNAL zcfree  OF((voidpf opaque, voidpf ptr));$/;"	p	signature:(voidpf opaque, voidpf ptr)
zclose_file	src/contrib/minizip/ioapi.h	/^    close_file_func     zclose_file;$/;"	m	struct:zlib_filefunc64_def_s	access:public
zclose_file	src/contrib/minizip/ioapi.h	/^    close_file_func     zclose_file;$/;"	m	struct:zlib_filefunc_def_s	access:public
zdecode	src/contrib/minizip/crypt.h	76;"	d
zencode	src/contrib/minizip/crypt.h	79;"	d
zerr	src/examples/zpipe.c	/^void zerr(int ret)$/;"	f	signature:(int ret)
zerror_file	src/contrib/minizip/ioapi.h	/^    testerror_file_func zerror_file;$/;"	m	struct:zlib_filefunc64_def_s	access:public
zerror_file	src/contrib/minizip/ioapi.h	/^    testerror_file_func zerror_file;$/;"	m	struct:zlib_filefunc_def_s	access:public
zfile_func64	src/contrib/minizip/ioapi.h	/^    zlib_filefunc64_def zfile_func64;$/;"	m	struct:zlib_filefunc64_32_def_s	access:public
zfree	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        uint zfree;$/;"	f	struct:DotZLib.ZStream	access:public
zfree	src/test/example.c	/^static free_func zfree = (free_func)0;$/;"	v	file:
zfree	src/test/example.c	/^static free_func zfree = myfree;$/;"	v	file:
zfree	src/zlib.h	/^    free_func  zfree;   \/* used to free the internal state *\/$/;"	m	struct:z_stream_s	access:public
zfree	zlib.h	/^    free_func  zfree;   \/* used to free the internal state *\/$/;"	m	struct:z_stream_s	access:public
zfstream_h	src/contrib/iostream/zfstream.h	3;"	d
zip64	src/contrib/minizip/zip.c	/^    int  zip64;               \/* Add ZIP64 extened information in the extra field *\/$/;"	m	struct:__anon9	file:	access:public
zip64FlushWriteBuffer	src/contrib/minizip/zip.c	/^local int zip64FlushWriteBuffer(zip64_internal* zi)$/;"	f	signature:(zip64_internal* zi)
zip64_internal	src/contrib/minizip/zip.c	/^} zip64_internal;$/;"	t	typeref:struct:__anon10	file:
zip64local_SearchCentralDir	src/contrib/minizip/zip.c	/^local ZPOS64_T zip64local_SearchCentralDir OF((const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream));$/;"	p	file:	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)
zip64local_SearchCentralDir	src/contrib/minizip/zip.c	/^local ZPOS64_T zip64local_SearchCentralDir(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)$/;"	f	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)
zip64local_SearchCentralDir64	src/contrib/minizip/zip.c	/^local ZPOS64_T zip64local_SearchCentralDir64 OF((const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream));$/;"	p	file:	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)
zip64local_SearchCentralDir64	src/contrib/minizip/zip.c	/^local ZPOS64_T zip64local_SearchCentralDir64(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)$/;"	f	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)
zip64local_TmzDateToDosDate	src/contrib/minizip/zip.c	/^local uLong zip64local_TmzDateToDosDate(const tm_zip* ptm)$/;"	f	signature:(const tm_zip* ptm)
zip64local_getByte	src/contrib/minizip/zip.c	/^local int zip64local_getByte OF((const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, int *pi));$/;"	p	file:	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, int *pi)
zip64local_getByte	src/contrib/minizip/zip.c	/^local int zip64local_getByte(const zlib_filefunc64_32_def* pzlib_filefunc_def,voidpf filestream,int* pi)$/;"	f	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def,voidpf filestream,int* pi)
zip64local_getLong	src/contrib/minizip/zip.c	/^local int zip64local_getLong (const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong* pX)$/;"	f	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong* pX)
zip64local_getLong	src/contrib/minizip/zip.c	/^local int zip64local_getLong OF((const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong *pX));$/;"	p	file:	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong *pX)
zip64local_getLong64	src/contrib/minizip/zip.c	/^local int zip64local_getLong64 (const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T *pX)$/;"	f	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T *pX)
zip64local_getLong64	src/contrib/minizip/zip.c	/^local int zip64local_getLong64 OF((const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T *pX));$/;"	p	file:	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T *pX)
zip64local_getShort	src/contrib/minizip/zip.c	/^local int zip64local_getShort (const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong* pX)$/;"	f	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong* pX)
zip64local_getShort	src/contrib/minizip/zip.c	/^local int zip64local_getShort OF((const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong *pX));$/;"	p	file:	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong *pX)
zip64local_putValue	src/contrib/minizip/zip.c	/^local int zip64local_putValue (const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T x, int nbByte)$/;"	f	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T x, int nbByte)
zip64local_putValue	src/contrib/minizip/zip.c	/^local int zip64local_putValue OF((const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T x, int nbByte));$/;"	p	file:	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T x, int nbByte)
zip64local_putValue_inmemory	src/contrib/minizip/zip.c	/^local void zip64local_putValue_inmemory (void* dest, ZPOS64_T x, int nbByte)$/;"	f	signature:(void* dest, ZPOS64_T x, int nbByte)
zip64local_putValue_inmemory	src/contrib/minizip/zip.c	/^local void zip64local_putValue_inmemory OF((void* dest, ZPOS64_T x, int nbByte));$/;"	p	file:	signature:(void* dest, ZPOS64_T x, int nbByte)
zipClose	src/contrib/minizip/zip.c	/^extern int ZEXPORT zipClose (zipFile file, const char* global_comment)$/;"	f	signature:(zipFile file, const char* global_comment)
zipClose	src/contrib/minizip/zip.h	/^extern int ZEXPORT zipClose OF((zipFile file,$/;"	p	signature:(zipFile file, const char* global_comment)
zipCloseFileInZip	src/contrib/minizip/zip.c	/^extern int ZEXPORT zipCloseFileInZip (zipFile file)$/;"	f	signature:(zipFile file)
zipCloseFileInZip	src/contrib/minizip/zip.h	/^extern int ZEXPORT zipCloseFileInZip OF((zipFile file));$/;"	p	signature:(zipFile file)
zipCloseFileInZipRaw	src/contrib/minizip/zip.c	/^extern int ZEXPORT zipCloseFileInZipRaw (zipFile file, uLong uncompressed_size, uLong crc32)$/;"	f	signature:(zipFile file, uLong uncompressed_size, uLong crc32)
zipCloseFileInZipRaw	src/contrib/minizip/zip.h	/^extern int ZEXPORT zipCloseFileInZipRaw OF((zipFile file,$/;"	p	signature:(zipFile file, uLong uncompressed_size, uLong crc32)
zipCloseFileInZipRaw64	src/contrib/minizip/zip.c	/^extern int ZEXPORT zipCloseFileInZipRaw64 (zipFile file, ZPOS64_T uncompressed_size, uLong crc32)$/;"	f	signature:(zipFile file, ZPOS64_T uncompressed_size, uLong crc32)
zipCloseFileInZipRaw64	src/contrib/minizip/zip.h	/^extern int ZEXPORT zipCloseFileInZipRaw64 OF((zipFile file,$/;"	p	signature:(zipFile file, ZPOS64_T uncompressed_size, uLong crc32)
zipFile	src/contrib/minizip/zip.h	/^typedef voidp zipFile;$/;"	t
zipFile	src/contrib/minizip/zip.h	/^typedef zipFile__ *zipFile;$/;"	t
zipFile__	src/contrib/minizip/zip.h	/^typedef struct TagzipFile__ { int unused; } zipFile__;$/;"	t	typeref:struct:TagzipFile__
zipOpen	src/contrib/minizip/zip.c	/^extern zipFile ZEXPORT zipOpen (const char* pathname, int append)$/;"	f	signature:(const char* pathname, int append)
zipOpen	src/contrib/minizip/zip.h	/^extern zipFile ZEXPORT zipOpen OF((const char *pathname, int append));$/;"	p	signature:(const char *pathname, int append)
zipOpen2	src/contrib/minizip/zip.c	/^extern zipFile ZEXPORT zipOpen2 (const char *pathname, int append, zipcharpc* globalcomment, zlib_filefunc_def* pzlib_filefunc32_def)$/;"	f	signature:(const char *pathname, int append, zipcharpc* globalcomment, zlib_filefunc_def* pzlib_filefunc32_def)
zipOpen2	src/contrib/minizip/zip.h	/^extern zipFile ZEXPORT zipOpen2 OF((const char *pathname,$/;"	p	signature:(const char *pathname, int append, zipcharpc* globalcomment, zlib_filefunc_def* pzlib_filefunc_def)
zipOpen2_64	src/contrib/minizip/zip.c	/^extern zipFile ZEXPORT zipOpen2_64 (const void *pathname, int append, zipcharpc* globalcomment, zlib_filefunc64_def* pzlib_filefunc_def)$/;"	f	signature:(const void *pathname, int append, zipcharpc* globalcomment, zlib_filefunc64_def* pzlib_filefunc_def)
zipOpen2_64	src/contrib/minizip/zip.h	/^extern zipFile ZEXPORT zipOpen2_64 OF((const void *pathname,$/;"	p	signature:(const void *pathname, int append, zipcharpc* globalcomment, zlib_filefunc64_def* pzlib_filefunc_def)
zipOpen3	src/contrib/minizip/zip.c	/^extern zipFile ZEXPORT zipOpen3 (const void *pathname, int append, zipcharpc* globalcomment, zlib_filefunc64_32_def* pzlib_filefunc64_32_def)$/;"	f	signature:(const void *pathname, int append, zipcharpc* globalcomment, zlib_filefunc64_32_def* pzlib_filefunc64_32_def)
zipOpen64	src/contrib/minizip/zip.c	/^extern zipFile ZEXPORT zipOpen64 (const void* pathname, int append)$/;"	f	signature:(const void* pathname, int append)
zipOpen64	src/contrib/minizip/zip.h	/^extern zipFile ZEXPORT zipOpen64 OF((const void *pathname, int append));$/;"	p	signature:(const void *pathname, int append)
zipOpenNewFileInZip	src/contrib/minizip/zip.c	/^extern int ZEXPORT zipOpenNewFileInZip (zipFile file, const char* filename, const zip_fileinfo* zipfi,$/;"	f	signature:(zipFile file, const char* filename, const zip_fileinfo* zipfi, const void* extrafield_local, uInt size_extrafield_local, const void*extrafield_global, uInt size_extrafield_global, const char* comment, int method, int level)
zipOpenNewFileInZip	src/contrib/minizip/zip.h	/^extern int ZEXPORT zipOpenNewFileInZip OF((zipFile file,$/;"	p	signature:(zipFile file, const char* filename, const zip_fileinfo* zipfi, const void* extrafield_local, uInt size_extrafield_local, const void* extrafield_global, uInt size_extrafield_global, const char* comment, int method, int level)
zipOpenNewFileInZip2	src/contrib/minizip/zip.c	/^extern int ZEXPORT zipOpenNewFileInZip2(zipFile file, const char* filename, const zip_fileinfo* zipfi,$/;"	f	signature:(zipFile file, const char* filename, const zip_fileinfo* zipfi, const void* extrafield_local, uInt size_extrafield_local, const void* extrafield_global, uInt size_extrafield_global, const char* comment, int method, int level, int raw)
zipOpenNewFileInZip2	src/contrib/minizip/zip.h	/^extern int ZEXPORT zipOpenNewFileInZip2 OF((zipFile file,$/;"	p	signature:(zipFile file, const char* filename, const zip_fileinfo* zipfi, const void* extrafield_local, uInt size_extrafield_local, const void* extrafield_global, uInt size_extrafield_global, const char* comment, int method, int level, int raw)
zipOpenNewFileInZip2_64	src/contrib/minizip/zip.c	/^extern int ZEXPORT zipOpenNewFileInZip2_64(zipFile file, const char* filename, const zip_fileinfo* zipfi,$/;"	f	signature:(zipFile file, const char* filename, const zip_fileinfo* zipfi, const void* extrafield_local, uInt size_extrafield_local, const void* extrafield_global, uInt size_extrafield_global, const char* comment, int method, int level, int raw, int zip64)
zipOpenNewFileInZip2_64	src/contrib/minizip/zip.h	/^extern int ZEXPORT zipOpenNewFileInZip2_64 OF((zipFile file,$/;"	p	signature:(zipFile file, const char* filename, const zip_fileinfo* zipfi, const void* extrafield_local, uInt size_extrafield_local, const void* extrafield_global, uInt size_extrafield_global, const char* comment, int method, int level, int raw, int zip64)
zipOpenNewFileInZip3	src/contrib/minizip/zip.c	/^extern int ZEXPORT zipOpenNewFileInZip3 (zipFile file, const char* filename, const zip_fileinfo* zipfi,$/;"	f	signature:(zipFile file, const char* filename, const zip_fileinfo* zipfi, const void* extrafield_local, uInt size_extrafield_local, const void* extrafield_global, uInt size_extrafield_global, const char* comment, int method, int level, int raw, int windowBits,int memLevel, int strategy, const char* password, uLong crcForCrypting)
zipOpenNewFileInZip3	src/contrib/minizip/zip.h	/^extern int ZEXPORT zipOpenNewFileInZip3 OF((zipFile file,$/;"	p	signature:(zipFile file, const char* filename, const zip_fileinfo* zipfi, const void* extrafield_local, uInt size_extrafield_local, const void* extrafield_global, uInt size_extrafield_global, const char* comment, int method, int level, int raw, int windowBits, int memLevel, int strategy, const char* password, uLong crcForCrypting)
zipOpenNewFileInZip3_64	src/contrib/minizip/zip.c	/^extern int ZEXPORT zipOpenNewFileInZip3_64(zipFile file, const char* filename, const zip_fileinfo* zipfi,$/;"	f	signature:(zipFile file, const char* filename, const zip_fileinfo* zipfi, const void* extrafield_local, uInt size_extrafield_local, const void* extrafield_global, uInt size_extrafield_global, const char* comment, int method, int level, int raw, int windowBits,int memLevel, int strategy, const char* password, uLong crcForCrypting, int zip64)
zipOpenNewFileInZip3_64	src/contrib/minizip/zip.h	/^extern int ZEXPORT zipOpenNewFileInZip3_64 OF((zipFile file,$/;"	p	signature:(zipFile file, const char* filename, const zip_fileinfo* zipfi, const void* extrafield_local, uInt size_extrafield_local, const void* extrafield_global, uInt size_extrafield_global, const char* comment, int method, int level, int raw, int windowBits, int memLevel, int strategy, const char* password, uLong crcForCrypting, int zip64 )
zipOpenNewFileInZip4	src/contrib/minizip/zip.c	/^extern int ZEXPORT zipOpenNewFileInZip4 (zipFile file, const char* filename, const zip_fileinfo* zipfi,$/;"	f	signature:(zipFile file, const char* filename, const zip_fileinfo* zipfi, const void* extrafield_local, uInt size_extrafield_local, const void* extrafield_global, uInt size_extrafield_global, const char* comment, int method, int level, int raw, int windowBits,int memLevel, int strategy, const char* password, uLong crcForCrypting, uLong versionMadeBy, uLong flagBase)
zipOpenNewFileInZip4	src/contrib/minizip/zip.h	/^extern int ZEXPORT zipOpenNewFileInZip4 OF((zipFile file,$/;"	p	signature:(zipFile file, const char* filename, const zip_fileinfo* zipfi, const void* extrafield_local, uInt size_extrafield_local, const void* extrafield_global, uInt size_extrafield_global, const char* comment, int method, int level, int raw, int windowBits, int memLevel, int strategy, const char* password, uLong crcForCrypting, uLong versionMadeBy, uLong flagBase )
zipOpenNewFileInZip4_64	src/contrib/minizip/zip.c	/^extern int ZEXPORT zipOpenNewFileInZip4_64 (zipFile file, const char* filename, const zip_fileinfo* zipfi,$/;"	f	signature:(zipFile file, const char* filename, const zip_fileinfo* zipfi, const void* extrafield_local, uInt size_extrafield_local, const void* extrafield_global, uInt size_extrafield_global, const char* comment, int method, int level, int raw, int windowBits,int memLevel, int strategy, const char* password, uLong crcForCrypting, uLong versionMadeBy, uLong flagBase, int zip64)
zipOpenNewFileInZip4_64	src/contrib/minizip/zip.h	/^extern int ZEXPORT zipOpenNewFileInZip4_64 OF((zipFile file,$/;"	p	signature:(zipFile file, const char* filename, const zip_fileinfo* zipfi, const void* extrafield_local, uInt size_extrafield_local, const void* extrafield_global, uInt size_extrafield_global, const char* comment, int method, int level, int raw, int windowBits, int memLevel, int strategy, const char* password, uLong crcForCrypting, uLong versionMadeBy, uLong flagBase, int zip64 )
zipOpenNewFileInZip64	src/contrib/minizip/zip.c	/^extern int ZEXPORT zipOpenNewFileInZip64 (zipFile file, const char* filename, const zip_fileinfo* zipfi,$/;"	f	signature:(zipFile file, const char* filename, const zip_fileinfo* zipfi, const void* extrafield_local, uInt size_extrafield_local, const void*extrafield_global, uInt size_extrafield_global, const char* comment, int method, int level, int zip64)
zipOpenNewFileInZip64	src/contrib/minizip/zip.h	/^extern int ZEXPORT zipOpenNewFileInZip64 OF((zipFile file,$/;"	p	signature:(zipFile file, const char* filename, const zip_fileinfo* zipfi, const void* extrafield_local, uInt size_extrafield_local, const void* extrafield_global, uInt size_extrafield_global, const char* comment, int method, int level, int zip64)
zipRemoveExtraInfoBlock	src/contrib/minizip/zip.c	/^extern int ZEXPORT zipRemoveExtraInfoBlock (char* pData, int* dataLen, short sHeader)$/;"	f	signature:(char* pData, int* dataLen, short sHeader)
zipRemoveExtraInfoBlock	src/contrib/minizip/zip.h	/^extern int ZEXPORT zipRemoveExtraInfoBlock OF((char* pData, int* dataLen, short sHeader));$/;"	p	signature:(char* pData, int* dataLen, short sHeader)
zipWriteInFileInZip	src/contrib/minizip/zip.c	/^extern int ZEXPORT zipWriteInFileInZip (zipFile file,const void* buf,unsigned int len)$/;"	f	signature:(zipFile file,const void* buf,unsigned int len)
zipWriteInFileInZip	src/contrib/minizip/zip.h	/^extern int ZEXPORT zipWriteInFileInZip OF((zipFile file,$/;"	p	signature:(zipFile file, const void* buf, unsigned len)
zip_copyright	src/contrib/minizip/zip.c	/^const char zip_copyright[] =" zip 1.01 Copyright 1998-2004 Gilles Vollant - http:\/\/www.winimage.com\/zLibDll";$/;"	v
zip_fileinfo	src/contrib/minizip/zip.h	/^} zip_fileinfo;$/;"	t	typeref:struct:__anon6
zipcharpc	src/contrib/minizip/zip.h	/^typedef const char* zipcharpc;$/;"	t
zlib1222add	src/contrib/asm686/match.S	/^#define zlib1222add		(8)$/;"	d
zlib1222add	src/contrib/masmx64/gvmat64.asm	/^    zlib1222add equ 8$/;"	d
zlib1222add	src/contrib/masmx86/match686.asm	/^    zlib1222add         equ     8$/;"	d
zlib1222sup	src/contrib/masmx86/inffas32.asm	/^zlib1222sup      equ    8$/;"	d
zlibAllocMem	src/contrib/delphi/ZLib.pas	/^function zlibAllocMem(AppData: Pointer; Items, Size: Integer): Pointer; cdecl;$/;"	f
zlibCompileFlags	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        private static extern uint zlibCompileFlags();$/;"	m	class:DotZLib.Info	file:	access:private	signature:()
zlibCompileFlags	src/contrib/pascal/zlibpas.pas	/^function zlibCompileFlags: LongInt;$/;"	f
zlibCompileFlags	src/contrib/pascal/zlibpas.pas	/^function zlibCompileFlags; external;$/;"	f
zlibCompileFlags	src/zconf.h	124;"	d
zlibCompileFlags	src/zlib.h	/^ZEXTERN uLong ZEXPORT zlibCompileFlags OF((void));$/;"	p	signature:(void)
zlibCompileFlags	src/zutil.c	/^uLong ZEXPORT zlibCompileFlags()$/;"	f
zlibCompileFlags	zconf.h	124;"	d
zlibCompileFlags	zlib.h	/^ZEXTERN uLong ZEXPORT zlibCompileFlags OF((void));$/;"	p	signature:(void)
zlibFreeMem	src/contrib/delphi/ZLib.pas	/^procedure zlibFreeMem(AppData, Block: Pointer); cdecl;$/;"	p
zlibVersion	src/contrib/dotzlib/DotZLib/DotZLib.cs	/^        private static extern string zlibVersion();$/;"	m	class:DotZLib.Info	file:	access:private	signature:()
zlibVersion	src/contrib/pascal/zlibpas.pas	/^function zlibVersion: PChar;$/;"	f
zlibVersion	src/contrib/pascal/zlibpas.pas	/^function zlibVersion; external;$/;"	f
zlibVersion	src/zconf.h	125;"	d
zlibVersion	src/zlib.h	/^ZEXTERN const char * ZEXPORT zlibVersion OF((void));$/;"	p	signature:(void)
zlibVersion	src/zutil.c	/^const char * ZEXPORT zlibVersion()$/;"	f
zlibVersion	zconf.h	125;"	d
zlibVersion	zlib.h	/^ZEXTERN const char * ZEXPORT zlibVersion OF((void));$/;"	p	signature:(void)
zlib_arm_files	Android.mk	/^zlib_arm_files :=$/;"	m
zlib_arm_flags	Android.mk	/^zlib_arm_flags :=$/;"	m
zlib_filefunc64_32_def	src/contrib/minizip/ioapi.h	/^} zlib_filefunc64_32_def;$/;"	t	typeref:struct:zlib_filefunc64_32_def_s
zlib_filefunc64_32_def_s	src/contrib/minizip/ioapi.h	/^typedef struct zlib_filefunc64_32_def_s$/;"	s
zlib_filefunc64_32_def_s::zfile_func64	src/contrib/minizip/ioapi.h	/^    zlib_filefunc64_def zfile_func64;$/;"	m	struct:zlib_filefunc64_32_def_s	access:public
zlib_filefunc64_32_def_s::zopen32_file	src/contrib/minizip/ioapi.h	/^    open_file_func      zopen32_file;$/;"	m	struct:zlib_filefunc64_32_def_s	access:public
zlib_filefunc64_32_def_s::zseek32_file	src/contrib/minizip/ioapi.h	/^    seek_file_func      zseek32_file;$/;"	m	struct:zlib_filefunc64_32_def_s	access:public
zlib_filefunc64_32_def_s::ztell32_file	src/contrib/minizip/ioapi.h	/^    tell_file_func      ztell32_file;$/;"	m	struct:zlib_filefunc64_32_def_s	access:public
zlib_filefunc64_def	src/contrib/minizip/ioapi.h	/^} zlib_filefunc64_def;$/;"	t	typeref:struct:zlib_filefunc64_def_s
zlib_filefunc64_def_s	src/contrib/minizip/ioapi.h	/^typedef struct zlib_filefunc64_def_s$/;"	s
zlib_filefunc64_def_s::opaque	src/contrib/minizip/ioapi.h	/^    voidpf              opaque;$/;"	m	struct:zlib_filefunc64_def_s	access:public
zlib_filefunc64_def_s::zclose_file	src/contrib/minizip/ioapi.h	/^    close_file_func     zclose_file;$/;"	m	struct:zlib_filefunc64_def_s	access:public
zlib_filefunc64_def_s::zerror_file	src/contrib/minizip/ioapi.h	/^    testerror_file_func zerror_file;$/;"	m	struct:zlib_filefunc64_def_s	access:public
zlib_filefunc64_def_s::zopen64_file	src/contrib/minizip/ioapi.h	/^    open64_file_func    zopen64_file;$/;"	m	struct:zlib_filefunc64_def_s	access:public
zlib_filefunc64_def_s::zread_file	src/contrib/minizip/ioapi.h	/^    read_file_func      zread_file;$/;"	m	struct:zlib_filefunc64_def_s	access:public
zlib_filefunc64_def_s::zseek64_file	src/contrib/minizip/ioapi.h	/^    seek64_file_func    zseek64_file;$/;"	m	struct:zlib_filefunc64_def_s	access:public
zlib_filefunc64_def_s::ztell64_file	src/contrib/minizip/ioapi.h	/^    tell64_file_func    ztell64_file;$/;"	m	struct:zlib_filefunc64_def_s	access:public
zlib_filefunc64_def_s::zwrite_file	src/contrib/minizip/ioapi.h	/^    write_file_func     zwrite_file;$/;"	m	struct:zlib_filefunc64_def_s	access:public
zlib_filefunc_def	src/contrib/minizip/ioapi.h	/^} zlib_filefunc_def;$/;"	t	typeref:struct:zlib_filefunc_def_s
zlib_filefunc_def_s	src/contrib/minizip/ioapi.h	/^typedef struct zlib_filefunc_def_s$/;"	s
zlib_filefunc_def_s::opaque	src/contrib/minizip/ioapi.h	/^    voidpf              opaque;$/;"	m	struct:zlib_filefunc_def_s	access:public
zlib_filefunc_def_s::zclose_file	src/contrib/minizip/ioapi.h	/^    close_file_func     zclose_file;$/;"	m	struct:zlib_filefunc_def_s	access:public
zlib_filefunc_def_s::zerror_file	src/contrib/minizip/ioapi.h	/^    testerror_file_func zerror_file;$/;"	m	struct:zlib_filefunc_def_s	access:public
zlib_filefunc_def_s::zopen_file	src/contrib/minizip/ioapi.h	/^    open_file_func      zopen_file;$/;"	m	struct:zlib_filefunc_def_s	access:public
zlib_filefunc_def_s::zread_file	src/contrib/minizip/ioapi.h	/^    read_file_func      zread_file;$/;"	m	struct:zlib_filefunc_def_s	access:public
zlib_filefunc_def_s::zseek_file	src/contrib/minizip/ioapi.h	/^    seek_file_func      zseek_file;$/;"	m	struct:zlib_filefunc_def_s	access:public
zlib_filefunc_def_s::ztell_file	src/contrib/minizip/ioapi.h	/^    tell_file_func      ztell_file;$/;"	m	struct:zlib_filefunc_def_s	access:public
zlib_filefunc_def_s::zwrite_file	src/contrib/minizip/ioapi.h	/^    write_file_func     zwrite_file;$/;"	m	struct:zlib_filefunc_def_s	access:public
zlib_files	Android.mk	/^zlib_files := \\$/;"	m
zlib_version	src/zlib.h	210;"	d
zlib_version	zlib.h	210;"	d
zmemcmp	src/zutil.c	/^int ZLIB_INTERNAL zmemcmp(s1, s2, len)$/;"	f
zmemcmp	src/zutil.h	/^   int ZLIB_INTERNAL zmemcmp OF((const Bytef* s1, const Bytef* s2, uInt len));$/;"	p	signature:(const Bytef* s1, const Bytef* s2, uInt len)
zmemcmp	src/zutil.h	205;"	d
zmemcmp	src/zutil.h	209;"	d
zmemcmp	zutil.h	/^   int ZLIB_INTERNAL zmemcmp OF((const Bytef* s1, const Bytef* s2, uInt len));$/;"	p	signature:(const Bytef* s1, const Bytef* s2, uInt len)
zmemcmp	zutil.h	205;"	d
zmemcmp	zutil.h	209;"	d
zmemcpy	src/zutil.c	/^void ZLIB_INTERNAL zmemcpy(dest, source, len)$/;"	f
zmemcpy	src/zutil.h	/^   void ZLIB_INTERNAL zmemcpy OF((Bytef* dest, const Bytef* source, uInt len));$/;"	p	signature:(Bytef* dest, const Bytef* source, uInt len)
zmemcpy	src/zutil.h	204;"	d
zmemcpy	src/zutil.h	208;"	d
zmemcpy	zutil.h	/^   void ZLIB_INTERNAL zmemcpy OF((Bytef* dest, const Bytef* source, uInt len));$/;"	p	signature:(Bytef* dest, const Bytef* source, uInt len)
zmemcpy	zutil.h	204;"	d
zmemcpy	zutil.h	208;"	d
zmemzero	src/zutil.c	/^void ZLIB_INTERNAL zmemzero(dest, len)$/;"	f
zmemzero	src/zutil.h	/^   void ZLIB_INTERNAL zmemzero OF((Bytef* dest, uInt len));$/;"	p	signature:(Bytef* dest, uInt len)
zmemzero	src/zutil.h	206;"	d
zmemzero	src/zutil.h	210;"	d
zmemzero	zutil.h	/^   void ZLIB_INTERNAL zmemzero OF((Bytef* dest, uInt len));$/;"	p	signature:(Bytef* dest, uInt len)
zmemzero	zutil.h	206;"	d
zmemzero	zutil.h	210;"	d
zopen32_file	src/contrib/minizip/ioapi.h	/^    open_file_func      zopen32_file;$/;"	m	struct:zlib_filefunc64_32_def_s	access:public
zopen64_file	src/contrib/minizip/ioapi.h	/^    open64_file_func    zopen64_file;$/;"	m	struct:zlib_filefunc64_def_s	access:public
zopen_file	src/contrib/minizip/ioapi.h	/^    open_file_func      zopen_file;$/;"	m	struct:zlib_filefunc_def_s	access:public
zpull	src/examples/gzjoin.c	/^local void zpull(z_streamp strm, bin *in)$/;"	f	signature:(z_streamp strm, bin *in)
zread_file	src/contrib/minizip/ioapi.h	/^    read_file_func      zread_file;$/;"	m	struct:zlib_filefunc64_def_s	access:public
zread_file	src/contrib/minizip/ioapi.h	/^    read_file_func      zread_file;$/;"	m	struct:zlib_filefunc_def_s	access:public
zseek32_file	src/contrib/minizip/ioapi.h	/^    seek_file_func      zseek32_file;$/;"	m	struct:zlib_filefunc64_32_def_s	access:public
zseek64_file	src/contrib/minizip/ioapi.h	/^    seek64_file_func    zseek64_file;$/;"	m	struct:zlib_filefunc64_def_s	access:public
zseek_file	src/contrib/minizip/ioapi.h	/^    seek_file_func      zseek_file;$/;"	m	struct:zlib_filefunc_def_s	access:public
zstrerror	src/gzguts.h	120;"	d
zstrerror	src/gzguts.h	124;"	d
zstrerror	src/gzguts.h	126;"	d
zstringlen	src/contrib/iostream2/zstream.h	/^    zstringlen(class izstream&);$/;"	p	class:zstringlen	access:public	signature:(class izstream&)
zstringlen	src/contrib/iostream2/zstream.h	/^    zstringlen(class ozstream&, const char*);$/;"	p	class:zstringlen	access:public	signature:(class ozstream&, const char*)
zstringlen	src/contrib/iostream2/zstream.h	/^class zstringlen {$/;"	c
zstringlen	src/contrib/iostream2/zstream.h	/^inline zstringlen::zstringlen(izstream& zs) {$/;"	f	class:zstringlen	signature:(izstream& zs)
zstringlen	src/contrib/iostream2/zstream.h	/^inline zstringlen::zstringlen(ozstream& zs, const char* x) {$/;"	f	class:zstringlen	signature:(ozstream& zs, const char* x)
zstringlen::Val	src/contrib/iostream2/zstream.h	/^    struct Val { unsigned char byte; size_t word; } val;$/;"	s	class:zstringlen	access:private
zstringlen::Val::byte	src/contrib/iostream2/zstream.h	/^    struct Val { unsigned char byte; size_t word; } val;$/;"	m	struct:zstringlen::Val	access:public
zstringlen::Val::word	src/contrib/iostream2/zstream.h	/^    struct Val { unsigned char byte; size_t word; } val;$/;"	m	struct:zstringlen::Val	access:public
zstringlen::val	src/contrib/iostream2/zstream.h	/^    struct Val { unsigned char byte; size_t word; } val;$/;"	m	class:zstringlen	typeref:struct:zstringlen::Val	access:private
zstringlen::value	src/contrib/iostream2/zstream.h	/^    size_t value() const { return val.word; }$/;"	f	class:zstringlen	access:public	signature:() const
zstringlen::zstringlen	src/contrib/iostream2/zstream.h	/^    zstringlen(class izstream&);$/;"	p	class:zstringlen	access:public	signature:(class izstream&)
zstringlen::zstringlen	src/contrib/iostream2/zstream.h	/^    zstringlen(class ozstream&, const char*);$/;"	p	class:zstringlen	access:public	signature:(class ozstream&, const char*)
zstringlen::zstringlen	src/contrib/iostream2/zstream.h	/^inline zstringlen::zstringlen(izstream& zs) {$/;"	f	class:zstringlen	signature:(izstream& zs)
zstringlen::zstringlen	src/contrib/iostream2/zstream.h	/^inline zstringlen::zstringlen(ozstream& zs, const char* x) {$/;"	f	class:zstringlen	signature:(ozstream& zs, const char* x)
ztell32_file	src/contrib/minizip/ioapi.h	/^    tell_file_func      ztell32_file;$/;"	m	struct:zlib_filefunc64_32_def_s	access:public
ztell64_file	src/contrib/minizip/ioapi.h	/^    tell64_file_func    ztell64_file;$/;"	m	struct:zlib_filefunc64_def_s	access:public
ztell_file	src/contrib/minizip/ioapi.h	/^    tell_file_func      ztell_file;$/;"	m	struct:zlib_filefunc_def_s	access:public
zwrite_file	src/contrib/minizip/ioapi.h	/^    write_file_func     zwrite_file;$/;"	m	struct:zlib_filefunc64_def_s	access:public
zwrite_file	src/contrib/minizip/ioapi.h	/^    write_file_func     zwrite_file;$/;"	m	struct:zlib_filefunc_def_s	access:public
~CodecBase	src/contrib/dotzlib/DotZLib/CodecBase.cs	/^        ~CodecBase()$/;"	m	class:DotZLib.CodecBase	file:	access:private	signature:()
~GZipStream	src/contrib/dotzlib/DotZLib/GZipStream.cs	/^        ~GZipStream()$/;"	m	class:DotZLib.GZipStream	file:	access:private	signature:()
~gzfilebuf	src/contrib/iostream/zfstream.cpp	/^gzfilebuf::~gzfilebuf() {$/;"	f	class:gzfilebuf	signature:()
~gzfilebuf	src/contrib/iostream/zfstream.h	/^  virtual ~gzfilebuf();$/;"	p	class:gzfilebuf	access:public	signature:()
~gzfilebuf	src/contrib/iostream3/zfstream.cc	/^gzfilebuf::~gzfilebuf()$/;"	f	class:gzfilebuf	signature:()
~gzfilebuf	src/contrib/iostream3/zfstream.h	/^  ~gzfilebuf();$/;"	p	class:gzfilebuf	access:public	signature:()
~gzfilestream_common	src/contrib/iostream/zfstream.cpp	/^gzfilestream_common::~gzfilestream_common()$/;"	f	class:gzfilestream_common	signature:()
~gzfilestream_common	src/contrib/iostream/zfstream.h	/^  virtual ~gzfilestream_common();$/;"	p	class:gzfilestream_common	access:public	signature:()
~gzifstream	src/contrib/iostream/zfstream.cpp	/^gzifstream::~gzifstream() { }$/;"	f	class:gzifstream	signature:()
~gzifstream	src/contrib/iostream/zfstream.h	/^  virtual ~gzifstream();$/;"	p	class:gzifstream	access:public	signature:()
~gzofstream	src/contrib/iostream/zfstream.cpp	/^gzofstream::~gzofstream() { }$/;"	f	class:gzofstream	signature:()
~gzofstream	src/contrib/iostream/zfstream.h	/^  virtual ~gzofstream();$/;"	p	class:gzofstream	access:public	signature:()
~izstream	src/contrib/iostream2/zstream.h	/^        ~izstream() { close(); }$/;"	f	class:izstream	access:public	signature:()
~ozstream	src/contrib/iostream2/zstream.h	/^        ~ozstream() {$/;"	f	class:ozstream	access:public	signature:()
